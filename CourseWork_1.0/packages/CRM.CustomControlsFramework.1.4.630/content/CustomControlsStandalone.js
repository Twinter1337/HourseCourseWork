(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var IFlyoutPopupManagerSubscriber_1 = require("./IFlyoutPopupManagerSubscriber");
var CustomControlUtilityPointers_1 = require("../../../CustomControls/Models/CustomControlUtilityPointers");
var FlyoutPopupManager = /** @class */ (function () {
    function FlyoutPopupManager() {
        this._subscribers = [];
        this.fireEvent = this.fireEvent.bind(this);
    }
    Object.defineProperty(FlyoutPopupManager, "_isIOS", {
        /**
         * iOS device detection
         */
        get: function () {
            return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlyoutPopupManager, "pointerDownEvent", {
        /**
         * Get OS specific pointer down event
         */
        get: function () {
            return FlyoutPopupManager._isIOS ? "touchstart" : "pointerdown";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlyoutPopupManager, "scrollEvent", {
        /**
         * Get scroll event name
         */
        get: function () {
            return "scroll";
        },
        enumerable: true,
        configurable: true
    });
    FlyoutPopupManager.getInstance = function () {
        if (!FlyoutPopupManager._instance) {
            FlyoutPopupManager._instance = new FlyoutPopupManager();
        }
        return FlyoutPopupManager._instance;
    };
    Object.defineProperty(FlyoutPopupManager.prototype, "subscribers", {
        /**
         * Returns all the subscribers.
         */
        get: function () {
            return this._subscribers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds the subscribers.
     * @param subscriber to add
     */
    FlyoutPopupManager.prototype.addSubscribers = function (subscriber) {
        var _this = this;
        setTimeout(function () {
            if (CustomControlUtilityPointers_1.IsNullOrUndefined(_this.subscribers) || _this.subscribers.length <= 0) {
                document.addEventListener(FlyoutPopupManager.pointerDownEvent, _this.fireEvent);
                if (subscriber.onScroll) {
                    document.addEventListener(FlyoutPopupManager.scrollEvent, _this.fireEvent, true);
                }
            }
            _this._subscribers.push(subscriber);
        }, 100);
    };
    /**
     * Removes the subscribers
     * @param subscriber to remove
     */
    FlyoutPopupManager.prototype.removeSubscribers = function (subscriber) {
        this._subscribers = this._subscribers.filter(function (currentSubscriber) {
            return currentSubscriber !== subscriber;
        });
        if (CustomControlUtilityPointers_1.IsNullOrUndefined(this.subscribers) || this.subscribers.length <= 0) {
            document.removeEventListener(FlyoutPopupManager.pointerDownEvent, this.fireEvent);
            document.removeEventListener(FlyoutPopupManager.scrollEvent, this.fireEvent);
        }
    };
    /**
     * Fire the event
     */
    FlyoutPopupManager.prototype.fireEvent = function (event) {
        if (this.subscribers) {
            for (var i = this._subscribers.length - 1; i >= 0; i--) {
                var subscriber = this.subscribers[i];
                if (subscriber &&
                    subscriber.getComponent() &&
                    (subscriber.onPointerDown || subscriber.onScroll) &&
                    subscriber.getComponent().offsetHeight > 0) {
                    var isClickInsideSubscriber = subscriber.isClickInsideSubscriber && subscriber.isClickInsideSubscriber(event);
                    if (subscriber.onPointerDown && event.type === FlyoutPopupManager.pointerDownEvent) {
                        subscriber.onPointerDown.bind(subscriber, event)();
                    }
                    if (subscriber.onScroll && event.type === FlyoutPopupManager.scrollEvent) {
                        subscriber.onScroll.bind(subscriber, event)();
                    }
                    if (isClickInsideSubscriber) {
                        break;
                    }
                }
                if (subscriber && subscriber.type === IFlyoutPopupManagerSubscriber_1.FlyoutPopupManagerSubscriberType.Popup) {
                    break;
                }
            }
        }
    };
    return FlyoutPopupManager;
}());
exports.FlyoutPopupManager = FlyoutPopupManager;

},{"../../../CustomControls/Models/CustomControlUtilityPointers":67,"./IFlyoutPopupManagerSubscriber":2}],2:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var FlyoutPopupManagerSubscriberType;
(function (FlyoutPopupManagerSubscriberType) {
    FlyoutPopupManagerSubscriberType[FlyoutPopupManagerSubscriberType["Flyout"] = 1] = "Flyout";
    FlyoutPopupManagerSubscriberType[FlyoutPopupManagerSubscriberType["Popup"] = 2] = "Popup";
})(FlyoutPopupManagerSubscriberType || (FlyoutPopupManagerSubscriberType = {}));
exports.FlyoutPopupManagerSubscriberType = FlyoutPopupManagerSubscriberType;

},{}],3:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var ComponentBase_1 = require("../Primitive/ComponentBase");
var Button_1 = require("../Primitive/Button");
var View_1 = require("../Primitive/View");
var ScrollView_1 = require("../Primitive/ScrollView");
var MicrosoftIconSymbol_1 = require("../FontIcon/MicrosoftIconSymbol");
var MicrosoftIcon_1 = require("../FontIcon/MicrosoftIcon");

var FelaConnectHelper_1 = require("../Primitive/FelaConnectHelper");
/**
 * HorizontalScroll component.
 */
var InnerHorizontalScroll = /** @class */ (function (_super) {
    __extends(InnerHorizontalScroll, _super);
    function InnerHorizontalScroll(props) {
        var _this = _super.call(this, props) || this;
        /**
         * The current index into the children of the scroll container. Refers to the currently-scrolled to element
         */
        _this._SCROLL_THRESHOLD = 1;
        /**
         * Duration of translate transition for full browser window.
         */
        _this._FULL_BROWSER_TRANSLATE_DURATION = 500;
        /**
         * Duration of translate transition for tablet browser window.
         */
        _this._TABLET_TRANSLATE_DURATION = 500;
        /**
         * Duration of translate transition for mobile browser window.
         */
        _this._MOBILE_BROWSER_TRANSLATE_DURATION = 500;
        _this._recalculateState = _this._recalculateState.bind(_this);
        _this._onNextClick = _this._onNextClick.bind(_this);
        _this._onPrevClick = _this._onPrevClick.bind(_this);
        _this._onNextKeyDown = _this._onNextKeyDown.bind(_this);
        _this._onPrevKeyDown = _this._onPrevKeyDown.bind(_this);
        _this._saveScrollViewRefCallback = _this._saveScrollViewRefCallback.bind(_this);
        //disable arrows by default to avoid arrows blinking on control render
        _this.state = {
            prevArrowDisabled: true,
            nextArrowDisabled: true,
        };
        _this._userAgent = window.navigator.userAgent;
        return _this;
    }
    /**
     * Returns the specific element props.
     */
    InnerHorizontalScroll.prototype.getElementProps = function () {
        var defaultArrowWidth = 20;
        var arrowButtonStyle = this.props.arrowButtonStyle || {};
        var scrollViewStyle = this.props.scrollViewStyle || {};
        var returnElementProps = Object.assign({}, this.props, {
            startChildIndex: this.props.startChildIndex || 0,
            arrowWidth: this.props.arrowWidth || arrowButtonStyle.width || defaultArrowWidth,
            arrowButtonStyle: arrowButtonStyle,
            scrollViewStyle: scrollViewStyle,
        });
        return returnElementProps;
    };
    /**
     * Component did mount lifecycle method
     */
    InnerHorizontalScroll.prototype.componentDidMount = function () {
        var props = this.getElementPropsInternal();
        if (props.startChildIndex !== 0) {
            this._scrollToChildByIndex(props.startChildIndex);
        }
        this._currentChildIndex = props.startChildIndex;
    };
    /**
     * When component did update, we need to set height to the container to hide scroll.
     * It shouldn't be done if height is defined in style.
     */
    InnerHorizontalScroll.prototype.componentDidUpdate = function () {
        var props = this.getElementPropsInternal();
        if (!props.style.height) {
            var scrollableContainer = this._getScrollableContainer();
            if (scrollableContainer) {
                var newHeight = scrollableContainer.scrollHeight + "px";
                scrollableContainer.parentElement.style.height = newHeight;
                scrollableContainer.parentElement.style.minHeight = newHeight;
            }
        }
        this._recalculateState();
    };
    /**
     * Reacts on the scrollview creation.
     */
    InnerHorizontalScroll.prototype._saveScrollViewRefCallback = function (ref) {
        this._scrollView = ref;
    };
    /**
     * Invoked when user press keys when the arrow button is on focus.
     * @param e
     */
    InnerHorizontalScroll.prototype._onPrevKeyDown = function (e) {
        if (this.props.onPrevArrowKeyDown) {
            this.props.onPrevArrowKeyDown(e, this._currentChildIndex);
        }
    };
    /**
     * Invoked when user press keys when the arrow button is on focus.
     * @param e
     */
    InnerHorizontalScroll.prototype._onNextKeyDown = function (e) {
        if (this.props.onNextArrowKeyDown) {
            this.props.onNextArrowKeyDown(e, this._currentChildIndex);
        }
    };
    /**
     * Invoked when user clicks the arrow button which scrolls left.
     * @param e
     */
    InnerHorizontalScroll.prototype._onPrevClick = function (e) {
        this._slideByArrow(false);
        e.stopPropagation();
        if (this.props.onPrevArrowClick) {
            this.props.onPrevArrowClick(e, this._currentChildIndex);
        }
    };
    /**
     * Invoked when user clicks the arrow button which scrolls right.
     * @param e
     */
    InnerHorizontalScroll.prototype._onNextClick = function (e) {
        this._slideByArrow(true);
        e.stopPropagation();
        if (this.props.onNextArrowClick) {
            this.props.onNextArrowClick(e, this._currentChildIndex);
        }
    };
    /**
     * Sliding to next set of elements.
     * @param isSlideNext slide direction.
     */
    InnerHorizontalScroll.prototype._slideByArrow = function (isSlideNext) {
        var childIndexToScroll = this._getChildIndexToScroll(isSlideNext);
        this._scrollToChildByIndex(childIndexToScroll);
    };
    /**
     * Calculate scrollLeftValue for LTR and RTL
     */
    InnerHorizontalScroll.prototype._getScrollLeft = function (scrollableContainer) {
        if (this.props.isRTL) {
            if (this._isBrowserIEorEdge() || this._isBrowserFirefox()) {
                return Math.abs(scrollableContainer.scrollLeft);
            }
            if (this._isBrowserChromeOrAndroid() || this._isBrowserSafari()) {
                return scrollableContainer.scrollWidth - scrollableContainer.clientWidth - scrollableContainer.scrollLeft;
            }
        }
        return scrollableContainer.scrollLeft;
    };
    /*
     * Returns previous icon while accounting for LTR/RTL
     */
    InnerHorizontalScroll.prototype._getPrevIcon = function () {
        var arrow = this.props.prevArrowIconType;
        /**
         * Currently there exists an issue where the Symbols.css stylesheet is missing RTL for certain arrow icons
         * Temporary workaround in which BackButton and Forward icons are manually switched
         *
         * 13 -> "Forward" E72A
         * 56 -> "BackButton" E72B
         *
         * TODO: Add RTL selectors to stylesheet
         * Bug 791284: RTL Selectors Missing for Icons in Symbols.css
         */
        if (this.props.isRTL && arrow === 56) {
            arrow = 13;
        }
        return this._renderArrowIcon(arrow, "<");
    };
    /*
     * Returns next icon while accounting for LFR/RTL
     */
    InnerHorizontalScroll.prototype._getNextIcon = function () {
        var arrow = this.props.nextArrowIconType;
        /**
         * Currently there exists an issue where the Symbols.css stylesheet is missing RTL for certain arrow icons
         * Temporary workaround in which BackButton and Forward icons are manually switched
         *
         * 13 -> "Forward" E72A
         * 56 -> "BackButton" E72B
         *
         * TODO: Add RTL selectors to stylesheet
         * Bug 791284: RTL Selectors Missing for Icons in Symbols.css
         */
        if (this.props.isRTL && arrow === 13) {
            arrow = 56;
        }
        return this._renderArrowIcon(arrow, ">");
    };
    /*
     * Determines the child index to which the scrollable container should scroll
     * @param	index			Index of the child element in the scrollable container
     * @param	isSlideNext		Determines if the scrollable container scrolls to the next (or previous) child element
     * @param	childrenLength	Total number of children in the scrollable container
     */
    InnerHorizontalScroll.prototype._getCurrentChildIndex = function (index, isSlideNext) {
        var scrollContainer = this._getScrollableContainer();
        var children = scrollContainer.children;
        var totalWidth = 0;
        var i = index;
        if ((isSlideNext && !this.props.isRTL) || (!isSlideNext && this.props.isRTL)) {
            // If child width surpasses scrollable container width, then new child index is current index incremented by one
            if (this._getTotalWidthIncludingMargins(children[i]) >= scrollContainer.clientWidth) {
                return this._boundIndex(++i, children);
            }
            for (i; i < children.length; i++) {
                totalWidth += this._getTotalWidthIncludingMargins(children[i]);
                if (totalWidth >= scrollContainer.clientWidth) {
                    return this._boundIndex(i, children);
                }
            }
        }
        else {
            // If child width surpasses scrollable container width, then new child index is current index decremented by one
            if (this._getTotalWidthIncludingMargins(children[i]) >= scrollContainer.clientWidth) {
                return this._boundIndex(--i, children);
            }
            for (i; i >= 0; i--) {
                totalWidth += this._getTotalWidthIncludingMargins(children[i]);
                if (totalWidth >= scrollContainer.clientWidth) {
                    return this._boundIndex(i, children);
                }
            }
        }
        return this._boundIndex(i, children);
    };
    /**
     * Ensure that index does remains in bounds from 0 to children.length - 1 inclusively
     * @param newIndex	Proposed new index
     * @param children	Children of scrollable container
     */
    InnerHorizontalScroll.prototype._boundIndex = function (newIndex, children) {
        newIndex = Math.min(newIndex, children.length - 1);
        newIndex = Math.max(newIndex, 0);
        return newIndex;
    };
    /**
     * Get child to scroll to.
     * @param isSlideNext slide direction.
     */
    InnerHorizontalScroll.prototype._getChildIndexToScroll = function (isSlideNext) {
        this._currentChildIndex = this._getCurrentChildIndex(this._currentChildIndex, isSlideNext);
        return this._currentChildIndex;
    };
    /**
     * Recalculates state.
     */
    InnerHorizontalScroll.prototype._recalculateState = function () {
        var scrollableContainer = this._getScrollableContainer();
        var scrollLeft = this._getScrollLeft(scrollableContainer);
        var prevArrowDisabled;
        var nextArrowDisabled;
        var scrollableDistance = scrollableContainer.scrollWidth - scrollableContainer.offsetWidth;
        if (this.props.isRTL) {
            nextArrowDisabled = scrollLeft <= 0 + this._SCROLL_THRESHOLD;
            prevArrowDisabled =
                this._isBrowserIEorEdge() || this._isBrowserFirefox() || this._isBrowserSafari()
                    ? Math.abs(scrollLeft) + scrollableContainer.offsetWidth + this._SCROLL_THRESHOLD >=
                        scrollableContainer.scrollWidth
                    : scrollLeft + this._SCROLL_THRESHOLD >= scrollableDistance;
        }
        else {
            prevArrowDisabled = scrollLeft <= 0 + this._SCROLL_THRESHOLD;
            nextArrowDisabled =
                scrollLeft + scrollableContainer.offsetWidth + this._SCROLL_THRESHOLD >= scrollableContainer.scrollWidth - 1;
        }
        if (prevArrowDisabled !== this.state.prevArrowDisabled || nextArrowDisabled !== this.state.nextArrowDisabled) {
            this.setState({
                prevArrowDisabled: prevArrowDisabled,
                nextArrowDisabled: nextArrowDisabled,
            });
        }
    };
    /**
     * Returns the HTML element of the desired child element of the scrollable container.
     * @param childIndex child index.
     */
    InnerHorizontalScroll.prototype._getChildByIndex = function (childIndex) {
        var scrollableContainer = this._getScrollableContainer();
        childIndex = childIndex && childIndex > 0 ? childIndex : 0;
        var children = scrollableContainer.children;
        return children ? children[childIndex] : null;
    };
    /**
     * Scroll to child with some index.
     * @param childIndex child index.
     */
    InnerHorizontalScroll.prototype._scrollToChildByIndex = function (childIndex) {
        var childToScroll = this._getChildByIndex(childIndex);
        if (childToScroll) {
            this._scrollToChild(childToScroll);
        }
    };
    /**
     * Scrolls the viewport to the position of the given component so that it becomes visible.
     * @param child Child Element to which the scrollable container should scroll
     */
    InnerHorizontalScroll.prototype._scrollToChild = function (child) {
        // Validate the input
        if (!child) {
            var error = new Error("child must be specified");
            throw error;
        }
        this._scrollToContent(this._getScrollableContainer(), child);
    };
    /**
     * Scrolls to desired child element using scrolling transition.
     *
     * @param child 		Child Element to which the scrollable container should scroll
     * @param scrollParent	Scrollable container element
     */
    InnerHorizontalScroll.prototype._scrollToWithTransition = function (scrollParent, scrollLeft) {
        var originalScrollLeft = scrollParent.scrollLeft;
        var changeInScrollLeft = scrollLeft - originalScrollLeft;
        var currentTime = 0;
        var increment = 10;
        var duration = this._determineDuration();
        this._scrollTransition(scrollParent, currentTime, originalScrollLeft, increment, changeInScrollLeft, duration);
    };
    /**
     * Responsible for updating scrollLeft of scrollParent over specified duration.
     *
     * @param child 				Child Element to which the scrollable container should scroll
     * @param scrollParent			Scrollable container element
     * @param currentTime			Current duration of scrolling transition
     * @param originalScrolLeft		Original scrollLeft of scrollable container element prior to transition
     * @param increment				Amount of time that passes between updates of scrollLeft
     * @param changeInScrollLeft	Overall change of scrollLeft during transition
     * @param duration				Duration of scrolling transition
     */
    InnerHorizontalScroll.prototype._scrollTransition = function (scrollParent, currentTime, originalScrollLeft, increment, changeInScrollLeft, duration) {
        var _context = this;
        var scrollTransition = function () {
            currentTime += increment;
            scrollParent.scrollLeft = _context._scrollEase(currentTime, originalScrollLeft, changeInScrollLeft, duration);
            if (currentTime < duration) {
                setTimeout(scrollTransition, increment);
            }
        };
        scrollTransition();
    };
    /**
     * Calculates the change in scrollLeft to create ease effect.
     *
     * @param currentTime		Current duration of scrolling transition
     * @param originalScrolLeft	Original scrollLeft of scrollable container element prior to transition
     * @param changeInScrollLeft	Overall change of scrollLeft during transition
     * @param duration				Duration of scrolling transition
     */
    InnerHorizontalScroll.prototype._scrollEase = function (currentTime, originalScrollLeft, changeInScrollLeft, duration) {
        currentTime = currentTime / (duration / 2);
        if (currentTime < 1) {
            return (changeInScrollLeft * Math.pow(currentTime, 2)) / 2 + originalScrollLeft;
        }
        currentTime--;
        return (-1 * changeInScrollLeft * (Math.pow(currentTime, 2) - 2 * currentTime - 1)) / 2 + originalScrollLeft;
    };
    /**
     * Get DOM element with scrollbar.
     */
    InnerHorizontalScroll.prototype._getScrollableContainer = function () {
        return ReactDOM.findDOMNode(this._scrollView);
    };
    /**
     * Renders prev arrow button.
     */
    InnerHorizontalScroll.prototype._renderPrevArrowButton = function () {
        var props = this.getElementPropsInternal();
        var buttonPrevStyle = Object.assign({
            position: "absolute",
            left: "0px",
            top: "0px",
            width: props.arrowWidth + "px",
            boxSizing: "border-box",
            alignItems: "center",
        }, this.props.arrowButtonStyle);
        var id = this.props.id + "_scrollPrevArrow";
        return (React.createElement(Button_1.Button, { id: id, key: id, 
            // TODO: Use resource strings
            // Bug 781504: Horizontal Scroll Missing Resource Strings
            accessibilityHidden: this.state.prevArrowDisabled, accessibilityLabel: this.props.isRTL ? "Scroll right the content" : "Scroll left the content", accessibilityHasPopup: true, tabIndex: -1, disabled: this.state.prevArrowDisabled, style: buttonPrevStyle, onFocus: this.props.onFocus, onClick: this._onPrevClick, onKeyDown: this._onPrevKeyDown }, this.props.isRTL ? this._getNextIcon() : this._getPrevIcon()));
    };
    /**
     * Renders next arrow button.
     */
    InnerHorizontalScroll.prototype._renderNextArrowButton = function () {
        var props = this.getElementPropsInternal();
        var buttonNextStyle = Object.assign({
            position: "absolute",
            right: "0px",
            top: "0px",
            width: props.arrowWidth + "px",
            boxSizing: "border-box",
            alignItems: "center",
        }, this.props.arrowButtonStyle);
        var id = this.props.id + "_scrollNextArrow";
        return (React.createElement(Button_1.Button, { id: id, key: id, 
            // TODO: Use resource strings
            // Bug 781504: Horizontal Scroll Missing Resource Strings
            accessibilityHidden: this.state.nextArrowDisabled, accessibilityLabel: this.props.isRTL ? "Scroll left the content" : "Scroll right the content", accessibilityHasPopup: true, tabIndex: -1, disabled: this.state.nextArrowDisabled, style: buttonNextStyle, onFocus: this.props.onFocus, onClick: this._onNextClick, onKeyDown: this._onNextKeyDown }, this.props.isRTL ? this._getPrevIcon() : this._getNextIcon()));
    };
    /**
     * Renders arrow icon.
     * @param arrowIconKey property key to get CrmIconSymbol.
     * @param defaultText default text to show instead of the icon.
     */
    InnerHorizontalScroll.prototype._renderArrowIcon = function (arrowIconType, defaultText) {
        if (arrowIconType) {
            var iconKey = "scroll" + MicrosoftIconSymbol_1.MicrosoftIconSymbol[arrowIconType] + "Icon";
            return React.createElement(MicrosoftIcon_1.MicrosoftIcon, { key: iconKey, type: arrowIconType });
        }
        else {
            return defaultText;
        }
    };
    /**
     * Checks whether the platform is IE or Edge.
     */
    InnerHorizontalScroll.prototype._isBrowserIEorEdge = function () {
        return this.isEdge || this.isIE;
    };
    /**
     * Checks whether the current platform is Firefox.
     */
    InnerHorizontalScroll.prototype._isBrowserFirefox = function () {
        return !!this._userAgent.match("Firefox");
    };
    /**
     * Checks whether the current platform is Chrome or Android.
     */
    InnerHorizontalScroll.prototype._isBrowserChromeOrAndroid = function () {
        return (!!this._userAgent.match("Chrome") || !!this._userAgent.match("Android") || !!this._userAgent.match("AppleWebKit"));
    };
    /**
     * Checks whether the current platform is Safari.
     */
    InnerHorizontalScroll.prototype._isBrowserSafari = function () {
        return !!this._userAgent.match("Safari");
    };
    /*
     * Calls method responsible for setting scrollLeft of scrollParent element
     * @param scrollParent		Scrollable container element
     * @param scrollToElement	Child element to which the scrollable container should scroll
     */
    InnerHorizontalScroll.prototype._scrollToContent = function (scrollParent, scrollToElement) {
        if (scrollParent && scrollToElement) {
            this._scrollToContentHorizontal(scrollParent, scrollToElement);
        }
    };
    /**
     * Perform calculation of scrollLeft, and update scrollLeft of scrollable container
     * @param scrollParent
     * @param scrollToElement
     */
    InnerHorizontalScroll.prototype._scrollToContentHorizontal = function (scrollParent, scrollToElement) {
        // Total width that the container is capable of scrolling
        var scrollableDistance = scrollParent.scrollWidth - scrollParent.offsetWidth;
        var children = scrollParent.children;
        var index = this._getChildIndex(scrollToElement);
        var scrollLeft = 0;
        for (var i = 0; i < index; i++) {
            scrollLeft += this._getTotalWidthIncludingMargins(children[i]);
        }
        var newScrollLeft;
        if (this.props.isRTL) {
            scrollLeft += parseInt(this._getCalculatedStyle(scrollToElement).marginRight, 10);
            newScrollLeft = this._isBrowserIEorEdge() ? scrollLeft : scrollableDistance - scrollLeft;
        }
        else {
            scrollLeft += parseInt(this._getCalculatedStyle(scrollToElement).marginLeft, 10);
            newScrollLeft = scrollLeft;
        }
        this._scrollToWithTransition(scrollParent, newScrollLeft);
    };
    /*
     * Retrieves the styles calculated by the browser
     * @param element	Child element in scrollable container of which the styles are calculated from
     */
    InnerHorizontalScroll.prototype._getCalculatedStyle = function (element) {
        return element.currentStyle || window.getComputedStyle(element);
    };
    /*
     * Returns the overall width of an element, including the left and right margins
     * @param element	Child element in scrollable container from which the width and margins are calculated
     */
    InnerHorizontalScroll.prototype._getTotalWidthIncludingMargins = function (element) {
        var style = this._getCalculatedStyle(element);
        var width = parseInt(style.width, 10);
        if (isNaN(width)) {
            width = element.offsetWidth;
        }
        var marginLeft = style.marginLeft.indexOf("px") < 0
            ? parseInt(getComputedStyle(element).marginLeft, 10)
            : parseInt(style.marginLeft, 10);
        var marginRight = style.marginRight.indexOf("px") < 0
            ? parseInt(getComputedStyle(element).marginRight, 10)
            : parseInt(style.marginRight, 10);
        return width + marginLeft + marginRight;
    };
    /*
     * Determines the index of the current child element in the scrollable container
     * @param child	Child element in scrollable container
     */
    InnerHorizontalScroll.prototype._getChildIndex = function (child) {
        var i = 0;
        while ((child = child && child.previousSibling) != null) {
            i++;
        }
        return i;
    };
    /*
     * Determines duration for horizontal scroll transition translation
     */
    InnerHorizontalScroll.prototype._determineDuration = function () {
        var duration;
        if (this._getScrollableContainer().clientWidth <= 550) {
            duration = this._MOBILE_BROWSER_TRANSLATE_DURATION;
        }
        else if (this._getScrollableContainer().clientWidth <= 1200) {
            duration = this._TABLET_TRANSLATE_DURATION;
        }
        else {
            duration = this._FULL_BROWSER_TRANSLATE_DURATION;
        }
        return duration;
    };
    /**
     * React control render method.
     */
    InnerHorizontalScroll.prototype.render = function () {
        var props = this.getElementPropsInternal();
        // Add some defaults to the props.style
        Object.assign(props.style, {
            display: "block",
            position: "relative",
            paddingLeft: props.arrowWidth + "px",
            paddingRight: props.arrowWidth + "px",
            overflow: "hidden",
        }, this.props.style);
        var scrollViewStyle = Object.assign({}, this.props.scrollViewStyle, {
            position: "relative",
        });
        var control = (React.createElement(View_1.View, { style: props.style, isRequestedMeasuring: true, onMeasuring: this._recalculateState, accessibilityLabel: this.props.accessibilityLabel },
            this.props.isRTL ? this._renderNextArrowButton() : this._renderPrevArrowButton(),
            React.createElement(ScrollView_1.ScrollView, { semanticTag: this.props.semanticTag, key: "HorizontalScrollContent", refCallback: this._saveScrollViewRefCallback, horizontal: true, style: scrollViewStyle, accessibilityLabel: this.props.accessibilityLabel, onScroll: this._recalculateState, role: this.props.role, isRTL: this.props.isRTL }, this.props.children),
            this.props.isRTL ? this._renderPrevArrowButton() : this._renderNextArrowButton()));
        return control;
    };
    /**
     * Component name for React Dev Tools.
     */
    InnerHorizontalScroll.displayName = "HorizontalScroll";
    return InnerHorizontalScroll;
}(ComponentBase_1.ComponentBase));
exports.InnerHorizontalScroll = InnerHorizontalScroll;
var HorizontalScroll = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerHorizontalScroll);
exports.HorizontalScroll = HorizontalScroll;

},{"../FontIcon/MicrosoftIcon":10,"../FontIcon/MicrosoftIconSymbol":11,"../Primitive/Button":12,"../Primitive/ComponentBase":15,"../Primitive/FelaConnectHelper":17,"../Primitive/ScrollView":39,"../Primitive/View":55,"react":undefined,"react-dom":undefined,"react-fela":undefined}],4:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var MeasuringHandler = /** @class */ (function () {
    function MeasuringHandler() {
        var _this = this;
        this._previousDimensions = new Map();
        this._subscribers = [];
        /**
         * Subscribers that need to be notified of size updates.
         */
        this._pendingSubscribers = [];
        /**
         * Functions to call to notify subscribers of pending size updates.
         */
        this._pendingUpdates = [];
        // Default scheduling function that will synchronously
        // take measurements and immediately update components.
        this._schedule = function () {
            _this.takeMeasurements();
            _this.flushPendingMeasuringNotifications();
        };
    }
    MeasuringHandler.getInstance = function () {
        if (!MeasuringHandler._instance) {
            MeasuringHandler._instance = new MeasuringHandler();
        }
        return MeasuringHandler._instance;
    };
    /**
     * Sets the function used to schedule measuring service updates.
     */
    MeasuringHandler.prototype.setSchedulingFunction = function (schedule) {
        this._schedule = schedule;
    };
    Object.defineProperty(MeasuringHandler.prototype, "subscribers", {
        /**
         * Returns all the subscribers for re-measuring service.
         */
        get: function () {
            return this._subscribers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds the subscribers.
     * @param subscriber to add
     */
    MeasuringHandler.prototype.addMeasuringSubscribers = function (subscriber) {
        this._subscribers.push(subscriber);
    };
    /**
     * Removes the subscribers
     * @param subscriber to remove
     */
    MeasuringHandler.prototype.removeMeasuringSubscribers = function (subscriber) {
        var index = this._subscribers.indexOf(subscriber);
        if (index > -1) {
            this._subscribers.splice(index, 1);
            this._previousDimensions.delete(subscriber);
        }
    };
    /**
     * Schedules a measuring update.
     */
    MeasuringHandler.prototype.scheduleMeasuringUpdate = function () {
        this._schedule();
    };
    /**
     * Notifies subscribers of any pending size updates.
     * This function does not perform measurements, takeMeasurements needs to be
     * called first to construct a list of subscribers to notify.
     * @returns Number of components updated.
     */
    MeasuringHandler.prototype.flushPendingMeasuringNotifications = function () {
        var numOfUpdates = this._pendingUpdates.length;
        for (var i = 0; i < numOfUpdates; i++) {
            this._pendingUpdates[i]();
        }
        this._pendingUpdates = [];
        this._pendingSubscribers = [];
        return numOfUpdates;
    };
    /**
     * Checks whether any subscribers need to be notified of a size update.
     * This function does not notify subscribers, flushPendingMeasuringNotifications needs to be called to notify them.
     */
    MeasuringHandler.prototype.takeMeasurements = function () {
        if (this._subscribers) {
            for (var i = 0; i < this._subscribers.length; i++) {
                var subscriber = this._subscribers[i];
                var element = subscriber.getComponent();
                if (element) {
                    var elementDimension = this._previousDimensions.get(subscriber);
                    var dimension = element.getBoundingClientRect();
                    var width = dimension.width;
                    var height = dimension.height;
                    if (!elementDimension ||
                        elementDimension.Width !== width ||
                        elementDimension.Height !== height ||
                        this._subscribers[i].forceMeasure) {
                        // Remove previous update for this component if it's still pending
                        var previousUpdateIndex = this._pendingSubscribers.indexOf(subscriber);
                        if (previousUpdateIndex > -1) {
                            this._pendingSubscribers.splice(previousUpdateIndex, 1);
                            this._pendingUpdates.splice(previousUpdateIndex, 1);
                        }
                        this._previousDimensions.set(subscriber, { Width: width, Height: height });
                        this._pendingUpdates.push(subscriber.onMeasure.bind(subscriber, width, height));
                        this._pendingSubscribers.push(subscriber);
                    }
                }
            }
        }
    };
    return MeasuringHandler;
}());
exports.MeasuringHandler = MeasuringHandler;

},{}],5:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/* tslint:disable:crm-prohibit-standard-react-element */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });

var CrmIcon_1 = require("../FontIcon/CrmIcon");
var MicrosoftIcon_1 = require("../FontIcon/MicrosoftIcon");
var MicrosoftIconSymbol_1 = require("../FontIcon/MicrosoftIconSymbol");
var ComboBox_1 = require("../Primitive/ComboBox");
var Image_1 = require("../Primitive/Image");
var List_1 = require("../Primitive/List");
var ListItem_1 = require("../Primitive/ListItem");
var ScrollView_1 = require("../Primitive/ScrollView");
var Text_1 = require("../Primitive/Text");
var View_1 = require("../Primitive/View");
var roles = require("../Supplementary/Accessibility/Attributes/Role");
var Flyout_1 = require("../Primitive/Flyout");
var iconCategory;
(function (iconCategory) {
    iconCategory[iconCategory["Crm"] = 0] = "Crm";
    iconCategory[iconCategory["Microsoft"] = 1] = "Microsoft";
})(iconCategory || (iconCategory = {}));
/**
 * Component representing an viewselectorcontrol base control
 */
var ViewSelectorControl = /** @class */ (function (_super) {
    __extends(ViewSelectorControl, _super);
    function ViewSelectorControl(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.handleItemSelected = _this.handleItemSelected.bind(_this);
        _this.handleItemIconPointerDown = _this.handleItemIconPointerDown.bind(_this);
        _this.handleSpaceKey = _this.handleSpaceKey.bind(_this);
        _this.handleRelativeToElementSelector = _this.handleRelativeToElementSelector.bind(_this);
        _this._getOptionTestHooks = _this._getOptionTestHooks.bind(_this);
        return _this;
    }
    /**
     * Handles the event of selecting an item in a drop-down.
     * @param item the item being selected
     */
    ViewSelectorControl.prototype.handleItemSelected = function (item) {
        this.selectedListItem = item;
    };
    /**
     * Handles the event of clicking the icon action
     * @param e the MouseEvent to handle
     */
    ViewSelectorControl.prototype.handleItemIconPointerDown = function (e) {
        var iconElement = e.currentTarget;
        this._handleIconClick(iconElement);
    };
    /**
     * Handles the event of pressing spacebar shortcut
     * @param e the KeyboardEvent to handle
     */
    ViewSelectorControl.prototype.handleSpaceKey = function (e) {
        var iconElement = e.currentTarget;
        this._handleIconClick(iconElement);
    };
    /**
     * Handle arrow up key
     * @param amount pages
     */
    ViewSelectorControl.prototype.handleArrowUp = function (amount) {
        if (!this.state.isExpanded) {
            return;
        }
        _super.prototype.handleArrowUp.call(this, amount);
    };
    /**
     * Map the enter key behavior only for view selector
     * @param e The keyboard event
     * @param amount pages
     */
    ViewSelectorControl.prototype.handleArrowDown = function (e, amount) {
        if (!this.state.isExpanded) {
            _super.prototype.handleEnterKey.call(this, e);
        }
        else {
            _super.prototype.handleArrowDown.call(this, e, amount);
        }
    };
    /**
     * A helper selector used to get the proper container for the flyout to be
     * relative to.
     */
    ViewSelectorControl.prototype.handleRelativeToElementSelector = function (element) {
        return element;
    };
    ViewSelectorControl.prototype.calculateWidth = function () {
        return this.props.style && this.props.style.width ? this.props.style.width : "20em";
    };
    ViewSelectorControl.prototype._handleIconClick = function (iconElement) {
        // Make sure icon element's parent's parent is the list item that we need
        if (iconElement &&
            iconElement.parentElement &&
            iconElement.parentElement.parentElement &&
            iconElement.parentElement.parentElement.localName === "li") {
            var listItem = iconElement.parentElement.parentElement;
            var value = listItem.dataset.value;
            if (this.props.onItemIconPointerDown && value) {
                var option = this.getOptionByValue(this.props.options, value);
                if (option) {
                    this.props.onItemIconPointerDown(option);
                }
            }
        }
    };
    ViewSelectorControl.prototype._renderListItem = function (option) {
        var iconStyle = option.iconStyle
            ? option.iconStyle
            : {
                width: 16,
                height: 16,
                margin: 2,
            };
        var icon = !option.imageSource && option.iconType ? (option.iconCategory === iconCategory.Crm ? (React.createElement(CrmIcon_1.CrmIcon, { type: option.iconType, style: iconStyle })) : (React.createElement(MicrosoftIcon_1.MicrosoftIcon, { type: option.iconType, style: iconStyle }))) : null;
        var pinIconLabelText = option.iconType === 30 ? "Pin " : option.iconType === 31 ? "Unpin " : null;
        var pinAriaLabel = pinIconLabelText == null ? pinIconLabelText : pinIconLabelText + option.text;
        var listItemImage = option.imageSource ? (React.createElement(View_1.View, null,
            React.createElement(Image_1.Image, { source: option.imageSource, style: iconStyle, altText: option.altText || "" }))) : option.iconType ? (React.createElement(View_1.View, { title: option.iconTitle, accessibilityLabel: pinAriaLabel, role: option.iconType === 30 || option.iconType === 31 ? roles.BUTTON : roles.PRESENTATION, onKeyDown: option.iconType === 30 || option.iconType === 31 ? this.handleSpaceKey : null, onPointerDown: this.handleItemIconPointerDown }, icon)) : null;
        return (React.createElement(View_1.View, { style: { display: "flex" } },
            listItemImage,
            React.createElement(Text_1.Text, { role: roles.PRESENTATION, style: {
                    marginLeft: "10px",
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                } }, option.text || "\u00a0")));
    };
    ViewSelectorControl.prototype._renderOptions = function (categoryId, indexAddendum) {
        var _this = this;
        var options = this.props.options;
        var selectedStyle = this.props.selectedItemStyle || ViewSelectorControl.getSelectedItemStyle();
        return options
            .filter(function (option) { return option.categoryId === categoryId; })
            .map(function (option, i) {
            var itemId = _this.getListItemId(option);
            var optionTesthooks = _this._getOptionTestHooks(i);
            indexAddendum = indexAddendum ? indexAddendum : 0;
            var listItemKey = i + indexAddendum;
            return (React.createElement(ListItem_1.ListItem, { key: listItemKey, id: itemId, tabIndex: -1, role: roles.OPTION, title: option.text, accessibilityLabel: option.text, dataText: option.text, dataValue: option.value, onSelected: _this.handleItemSelected, isSelected: _this.selectedIndex === listItemKey, style: ViewSelectorControl.getListItemStyle(), selectedStyle: selectedStyle, ref: _this.saveItemRef, onClick: _this.handleItemPointerDown, testhooks: optionTesthooks }, _this._renderListItem(option)));
        });
    };
    ViewSelectorControl.prototype._getOptionTestHooks = function (i) {
        if (!this.props.testhooks)
            return null;
        var testhooks = Object.assign({}, this.props.testhooks);
        for (var key in testhooks) {
            testhooks[key] += "-item-" + i;
        }
        return testhooks;
    };
    ViewSelectorControl.prototype._renderCategories = function () {
        var _this = this;
        var categories = this.props.categories;
        var renderedCategories = [];
        if (categories) {
            var indexAddendum_1 = 0;
            categories.map(function (category, i) {
                var categoryOptions = _this._renderOptions(category.id, indexAddendum_1);
                renderedCategories.push(React.createElement(View_1.View, { key: i, style: { display: "block" } },
                    category.name,
                    categoryOptions));
                indexAddendum_1 += categoryOptions.length;
            });
        }
        else {
            renderedCategories.push(React.createElement(View_1.View, null, this._renderOptions()));
        }
        return renderedCategories;
    };
    /**
     * Performs options props array to React.Component mapping
     */
    ViewSelectorControl.prototype.renderOptionsList = function () {
        var options = this.props.options;
        if (options) {
            var categoriesRendered = this._renderCategories();
            //UX behaviors to be decided
            var visibleItemsAmount = this.getPageSize();
            var scrollViewId = this.getListId() + "_scrollView";
            var showScroll = visibleItemsAmount < options.length;
            var assumedItemHeight = 2.35;
            var scrollStyle = {
                height: showScroll ? visibleItemsAmount * assumedItemHeight + "em" : undefined,
                overflowY: showScroll ? "scroll" : "hidden",
                overflowX: "hidden",
                flex: "1 1 auto",
                display: "block",
            };
            var listStyle = {
                listStyleType: "none",
                width: "100%",
            };
            var selectedId = undefined;
            if (~this.selectedIndex) {
                var handleOption = options[this.selectedIndex];
                selectedId = this.getListItemId(handleOption);
            }
            var listAriaLabel = "Select a view.";
            var scrollViewAriaLabel = "Expanded list";
            return (React.createElement(List_1.List, { role: roles.LISTBOX, id: this.getListId(), title: listAriaLabel, accessibilityLabel: listAriaLabel, tabIndex: -1, style: listStyle, onKeyDown: this.keyboardNavigation },
                React.createElement(ScrollView_1.ScrollView, { id: scrollViewId, accessibilityLabel: this.isIE ? scrollViewAriaLabel : null, style: scrollStyle, role: roles.PRESENTATION, scrollToId: selectedId, horizontal: false }, categoriesRendered)));
        }
        return null;
    };
    /**
     * Gets styles for text only component
     */
    ViewSelectorControl.prototype.getTextOnlyStyle = function () {
        var textStyle = this.props.textStyle
            ? this.props.textStyle
            : {
                borderWidth: 0,
                flex: "0 1 auto",
                outline: "none",
                cursor: "pointer",
                padding: "0.5em 0.75em",
            };
        return Object.assign({}, textStyle, { maxWidth: "100%", display: "flex" });
    };
    /**
     * Gets ineer component for TextOnly component
     */
    ViewSelectorControl.prototype.getTextOnlyInnerComponent = function (valueId) {
        return (React.createElement(View_1.View, { style: { display: "flex", maxWidth: "100%" } },
            React.createElement(Text_1.Text, { style: { display: "inline-block", overflow: "hidden", textOverflow: "ellipsis" }, id: valueId, accessibilityHidden: true }, this.getSelectedOptionText()),
            this._renderCaretButton()));
    };
    /**
     * ViewSelector.onChange event handler
     * @param e Synthetic React event
     */
    ViewSelectorControl.prototype.handleValueChange = function (valueNew) {
        if (this.props.onChange) {
            this.props.onChange(valueNew);
            // focus on control after view selection
            var thisObj_1 = this;
            setTimeout(function () {
                thisObj_1.selectItem(thisObj_1.getInternalId() + "_text");
            }, 500);
        }
    };
    /**
     * Render the caret fonticon for viewselector dropdown
     */
    ViewSelectorControl.prototype._renderCaretButton = function () {
        var caretStyle = this.props.caretStyle
            ? Object.assign({}, this.props.caretStyle)
            : {
                paddingLeft: "5px",
                color: "black",
                backgroundColor: "transparent",
            };
        var hoverStyle = this.props.hoveredStyle || { ":hover": { backgroundColor: "#EFEFEF" } };
        Object.assign(caretStyle, hoverStyle, { cursor: "pointer" });
        if (this.state.isExpanded) {
            caretStyle.backgroundColor = "#EFEFEF";
        }
        var caretType = this.props.caretType && MicrosoftIconSymbol_1.MicrosoftIconSymbol[this.props.caretType]
            ? this.props.caretType
            : MicrosoftIconSymbol_1.MicrosoftIconSymbol.DropdownArrow;
        return (React.createElement(Text_1.Text, { id: this.getButtonId(), style: caretStyle, accessibilityHidden: true },
            React.createElement(MicrosoftIcon_1.MicrosoftIcon, { type: caretType, role: roles.PRESENTATION })));
    };
    /**
     * Renders the flyout.
     */
    ViewSelectorControl.prototype.renderFlyout = function (isRTL) {
        if (isRTL === void 0) { isRTL = document.body.dir === "rtl"; }
        var flyout = undefined;
        var testhooks = undefined;
        /*
         * Create testhooks for flyout
         */
        if (this.props.testhooks) {
            testhooks = Object.assign({}, this.props.testhooks);
            for (var i in testhooks) {
                testhooks[i] += "-flyout";
            }
        }
        if (!this.props.readOnly && this.state.isExpanded) {
            var optionsRendered = this.renderOptionsList();
            var itemFocusId = this.getActiveDescendantId();
            if (optionsRendered) {
                var flyoutStyle = {
                    borderWidth: "0.1em",
                    borderStyle: "solid",
                    borderColor: "#666666",
                    backgroundColor: "white",
                    width: this.calculateWidth(),
                    boxShadow: ComboBox_1.InnerComboBox.SHADOWS.Shadow01,
                };
                flyout = (React.createElement(Flyout_1.Flyout, { id: this.getFlyoutId(), key: this.getFlyoutId(), focusElementId: itemFocusId, testhooks: testhooks, focusCallback: this.setFocusToItem, flyoutDirection: isRTL ? Flyout_1.FlyoutDirection.down : Flyout_1.FlyoutDirection.downleft, flyoutStyle: flyoutStyle, positionType: "relative", relativeToElementId: this.props.relativeToElementId ? this.props.relativeToElementId : this.getButtonId(), relativeToElementIdSelector: this.handleRelativeToElementSelector, onOutsideClick: this.handleFlyoutOutsideClick, parentCustomControlId: this.props.parentCustomControlId, parentFlyoutRoot: this.props.parentFlyoutRoot, rootZIndex: this.props.rootZIndex, enableTrackOnScroll: true, dismissOnScroll: !this.props.keepFlyoutOpenOnScroll }, optionsRendered));
            }
        }
        return flyout;
    };
    /**
     * Handles the event of a click outside a flyout.
     */
    ViewSelectorControl.prototype.handleFlyoutOutsideClick = function (e) {
        var viewSelectorId = this.props.id;
        var viewSelector = document.getElementById(viewSelectorId);
        if (viewSelector &&
            viewSelector.contains(event.target) &&
            viewSelector.childNodes[0] !== event.target) {
            return;
        }
        var targetElement = e.target;
        // collapse dropdown if click is outside combobox flyout.
        // If click is outside combobox but on dropdown button then let dropdown button click handle the flyout collapse
        if (targetElement.id !== this.getButtonId()) {
            this.setIsExpanded(false);
        }
        this.setFocus();
        this.clickedOutside = true;
    };
    /**
     * React control render method.
     */
    ViewSelectorControl.prototype.render = function () {
        var props = Object.assign({}, this.getElementPropsInternal(), {
            title: "",
        });
        // Add some defaults to the props.style
        Object.assign(props.style, {
            backgroundColor: "transparent",
            display: "flex",
            flex: "0 1 auto",
            width: "100%",
        }, this.props.viewSelectorStyle);
        // We use outer and inner containers here just for the sake of keeping the original ID in the root element of the component.
        // The uniquity of the original ID is not guaranteed and depends on the consumer, not the component.
        //
        // The internal container has a different (100% unique) ID, so that the drop-down flyout positions itself properly relative to it.
        var control = (React.createElement(View_1.View, __assign({}, props, { ref: this.saveContainerRef }),
            React.createElement(View_1.View, { style: props.style, id: this.getInternalId() },
                this.renderTextOnly(this.focusableControlId, this.props.testhooks),
                !this.props.readOnly && this.renderFlyout(this.props.isRTL))));
        return control;
    };
    /**
     * Display name for React dev tools
     */
    ViewSelectorControl.displayName = "ViewSelectorControl";
    return ViewSelectorControl;
}(ComboBox_1.InnerComboBox));
exports.ViewSelectorControl = ViewSelectorControl;

},{"../FontIcon/CrmIcon":6,"../FontIcon/MicrosoftIcon":10,"../FontIcon/MicrosoftIconSymbol":11,"../Primitive/ComboBox":14,"../Primitive/Flyout":20,"../Primitive/Image":27,"../Primitive/List":29,"../Primitive/ListItem":30,"../Primitive/ScrollView":39,"../Primitive/Text":53,"../Primitive/View":55,"../Supplementary/Accessibility/Attributes/Role":58,"react":undefined}],6:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FontIcon_1 = require("../Primitive/FontIcon");
var CrmIconSymbol_1 = require("./CrmIconSymbol");

var FelaConnectHelper_1 = require("../Primitive/FelaConnectHelper");
var InnerCrmIcon = /** @class */ (function (_super) {
    __extends(InnerCrmIcon, _super);
    function InnerCrmIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InnerCrmIcon.prototype.getSymbolClassName = function (type) {
        return CrmIconSymbol_1.getSymbolMapping(type);
    };
    return InnerCrmIcon;
}(FontIcon_1.FontIcon));
exports.InnerCrmIcon = InnerCrmIcon;
var CrmIcon = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerCrmIcon);
exports.CrmIcon = CrmIcon;

},{"../Primitive/FelaConnectHelper":17,"../Primitive/FontIcon":23,"./CrmIconSymbol":7,"react-fela":undefined}],7:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * IMPORTANT!
 * DO NOT MAKE CHANGES TO THIS FILE - THIS FILE IS GENERATED BY A BUILD TASK
 * IF YOU NEED TO MAKE CHANGES THEY MUST BE MADE IN THE JSON CONFIGURATION FILE
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CrmIconSymbol;
(function (CrmIconSymbol) {
    CrmIconSymbol[CrmIconSymbol["Entity"] = 0] = "Entity";
    CrmIconSymbol[CrmIconSymbol["List"] = 1] = "List";
    CrmIconSymbol[CrmIconSymbol["Account"] = 2] = "Account";
    CrmIconSymbol[CrmIconSymbol["Opportunity"] = 3] = "Opportunity";
    CrmIconSymbol[CrmIconSymbol["Sharepointdocument"] = 4] = "Sharepointdocument";
    CrmIconSymbol[CrmIconSymbol["Dashboard"] = 5] = "Dashboard";
    CrmIconSymbol[CrmIconSymbol["WORKSPACE"] = 6] = "WORKSPACE";
    CrmIconSymbol[CrmIconSymbol["Lead"] = 7] = "Lead";
    CrmIconSymbol[CrmIconSymbol["Contact"] = 8] = "Contact";
    CrmIconSymbol[CrmIconSymbol["Activitypointer"] = 9] = "Activitypointer";
    CrmIconSymbol[CrmIconSymbol["Drafts"] = 10] = "Drafts";
    CrmIconSymbol[CrmIconSymbol["Systemuser"] = 11] = "Systemuser";
    CrmIconSymbol[CrmIconSymbol["Letter"] = 12] = "Letter";
    CrmIconSymbol[CrmIconSymbol["Salesorder"] = 13] = "Salesorder";
    CrmIconSymbol[CrmIconSymbol["Competitor"] = 14] = "Competitor";
    CrmIconSymbol[CrmIconSymbol["Task"] = 15] = "Task";
    CrmIconSymbol[CrmIconSymbol["Fax"] = 16] = "Fax";
    CrmIconSymbol[CrmIconSymbol["Email"] = 17] = "Email";
    CrmIconSymbol[CrmIconSymbol["Phonecall"] = 18] = "Phonecall";
    CrmIconSymbol[CrmIconSymbol["Contract"] = 19] = "Contract";
    CrmIconSymbol[CrmIconSymbol["Quote"] = 20] = "Quote";
    CrmIconSymbol[CrmIconSymbol["Incident"] = 21] = "Incident";
    CrmIconSymbol[CrmIconSymbol["Campaign"] = 22] = "Campaign";
    CrmIconSymbol[CrmIconSymbol["Appointment"] = 23] = "Appointment";
    CrmIconSymbol[CrmIconSymbol["Invoice"] = 24] = "Invoice";
    CrmIconSymbol[CrmIconSymbol["Knowledgearticle"] = 25] = "Knowledgearticle";
    CrmIconSymbol[CrmIconSymbol["Product"] = 26] = "Product";
    CrmIconSymbol[CrmIconSymbol["Opportunityproduct"] = 27] = "Opportunityproduct";
    CrmIconSymbol[CrmIconSymbol["Queueitem"] = 28] = "Queueitem";
    CrmIconSymbol[CrmIconSymbol["Socialprofile"] = 29] = "Socialprofile";
    CrmIconSymbol[CrmIconSymbol["ChevronRight"] = 30] = "ChevronRight";
    CrmIconSymbol[CrmIconSymbol["Globe"] = 31] = "Globe";
    CrmIconSymbol[CrmIconSymbol["Ticker"] = 32] = "Ticker";
    CrmIconSymbol[CrmIconSymbol["Duration"] = 33] = "Duration";
    CrmIconSymbol[CrmIconSymbol["Timezone"] = 34] = "Timezone";
    CrmIconSymbol[CrmIconSymbol["Language"] = 35] = "Language";
    CrmIconSymbol[CrmIconSymbol["MultipleUsers"] = 36] = "MultipleUsers";
    CrmIconSymbol[CrmIconSymbol["Regarding"] = 37] = "Regarding";
    CrmIconSymbol[CrmIconSymbol["Checklist"] = 38] = "Checklist";
    CrmIconSymbol[CrmIconSymbol["TwoOptions"] = 39] = "TwoOptions";
    CrmIconSymbol[CrmIconSymbol["Currency"] = 40] = "Currency";
    CrmIconSymbol[CrmIconSymbol["DateTime"] = 41] = "DateTime";
    CrmIconSymbol[CrmIconSymbol["OfficeIcon"] = 42] = "OfficeIcon";
    CrmIconSymbol[CrmIconSymbol["OfficeIconWordFileSharedWithMe"] = 43] = "OfficeIconWordFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconWordFileCheckedOut"] = 44] = "OfficeIconWordFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconExcelFile"] = 45] = "OfficeIconExcelFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconExcelFileSharedWithMe"] = 46] = "OfficeIconExcelFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconExcelFileCheckedOut"] = 47] = "OfficeIconExcelFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconPowerPointFile"] = 48] = "OfficeIconPowerPointFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconPowerPointFileSharedWithMe"] = 49] = "OfficeIconPowerPointFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconPowerPointFileCheckedOut"] = 50] = "OfficeIconPowerPointFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconOneNoteFile"] = 51] = "OfficeIconOneNoteFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconOneNoteFileSharedWithMe"] = 52] = "OfficeIconOneNoteFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconOneNoteFileCheckedOut"] = 53] = "OfficeIconOneNoteFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconAccessFile"] = 54] = "OfficeIconAccessFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconAccessFileSharedWithMe"] = 55] = "OfficeIconAccessFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconAccessFileCheckedOut"] = 56] = "OfficeIconAccessFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconProjectFile"] = 57] = "OfficeIconProjectFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconProjectFileSharedWithMe"] = 58] = "OfficeIconProjectFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconProjectFileCheckedOut"] = 59] = "OfficeIconProjectFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconVisioFile"] = 60] = "OfficeIconVisioFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconVisioFileSharedWithMe"] = 61] = "OfficeIconVisioFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconVisioFileCheckedOut"] = 62] = "OfficeIconVisioFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconHelpFile"] = 63] = "OfficeIconHelpFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconHelpFileSharedWithMe"] = 64] = "OfficeIconHelpFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconHelpFileCheckedOut"] = 65] = "OfficeIconHelpFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconZipFile"] = 66] = "OfficeIconZipFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconZipFileSharedWithMe"] = 67] = "OfficeIconZipFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconZipFileCheckedOut"] = 68] = "OfficeIconZipFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconSetupFile"] = 69] = "OfficeIconSetupFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconSetupFileSharedWithMe"] = 70] = "OfficeIconSetupFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconSetupFileCheckedOut"] = 71] = "OfficeIconSetupFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconVideoFile"] = 72] = "OfficeIconVideoFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconVideoFileSharedWithMe"] = 73] = "OfficeIconVideoFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconVideoFileCheckedOut"] = 74] = "OfficeIconVideoFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconImageFile"] = 75] = "OfficeIconImageFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconImageFileSharedWithMe"] = 76] = "OfficeIconImageFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconImageFileCheckedOut"] = 77] = "OfficeIconImageFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconAudioFile"] = 78] = "OfficeIconAudioFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconAudioFileSharedWithMe"] = 79] = "OfficeIconAudioFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconAudioFileCheckedOut"] = 80] = "OfficeIconAudioFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconExecutableFile"] = 81] = "OfficeIconExecutableFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconExecutableFileSharedWithMe"] = 82] = "OfficeIconExecutableFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconExecutableFileCheckedOut"] = 83] = "OfficeIconExecutableFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconPdfFile"] = 84] = "OfficeIconPdfFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconPdfFileSharedWithMe"] = 85] = "OfficeIconPdfFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconPdfFileCheckedOut"] = 86] = "OfficeIconPdfFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconWebFile"] = 87] = "OfficeIconWebFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconWebFileSharedWithMe"] = 88] = "OfficeIconWebFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconWebFileCheckedOut"] = 89] = "OfficeIconWebFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconTextFile"] = 90] = "OfficeIconTextFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconTextFileSharedWithMe"] = 91] = "OfficeIconTextFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconTextFileCheckedOut"] = 92] = "OfficeIconTextFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconFolder"] = 93] = "OfficeIconFolder";
    CrmIconSymbol[CrmIconSymbol["OfficeIconFolderSharedWithMe"] = 94] = "OfficeIconFolderSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconFolderCheckedOut"] = 95] = "OfficeIconFolderCheckedOut";
    CrmIconSymbol[CrmIconSymbol["OfficeIconGenericFile"] = 96] = "OfficeIconGenericFile";
    CrmIconSymbol[CrmIconSymbol["OfficeIconGenericFileSharedWithMe"] = 97] = "OfficeIconGenericFileSharedWithMe";
    CrmIconSymbol[CrmIconSymbol["OfficeIconGenericFileCheckedOut"] = 98] = "OfficeIconGenericFileCheckedOut";
    CrmIconSymbol[CrmIconSymbol["Timer"] = 99] = "Timer";
    CrmIconSymbol[CrmIconSymbol["ScanBarcodeButton"] = 100] = "ScanBarcodeButton";
    CrmIconSymbol[CrmIconSymbol["Goal"] = 101] = "Goal";
    CrmIconSymbol[CrmIconSymbol["Metric"] = 102] = "Metric";
    CrmIconSymbol[CrmIconSymbol["Report"] = 103] = "Report";
    CrmIconSymbol[CrmIconSymbol["SalesLiterature"] = 104] = "SalesLiterature";
    CrmIconSymbol[CrmIconSymbol["Connection"] = 105] = "Connection";
    CrmIconSymbol[CrmIconSymbol["CustomerAddress"] = 106] = "CustomerAddress";
    CrmIconSymbol[CrmIconSymbol["Position"] = 107] = "Position";
    CrmIconSymbol[CrmIconSymbol["TransactionCurrency"] = 108] = "TransactionCurrency";
    CrmIconSymbol[CrmIconSymbol["Team"] = 109] = "Team";
    CrmIconSymbol[CrmIconSymbol["Service"] = 110] = "Service";
    CrmIconSymbol[CrmIconSymbol["ServiceAppointment"] = 111] = "ServiceAppointment";
    CrmIconSymbol[CrmIconSymbol["Equipment"] = 112] = "Equipment";
    CrmIconSymbol[CrmIconSymbol["PriceLevel"] = 113] = "PriceLevel";
    CrmIconSymbol[CrmIconSymbol["GoalRollUpQuery"] = 114] = "GoalRollUpQuery";
    CrmIconSymbol[CrmIconSymbol["UoMSchedule"] = 115] = "UoMSchedule";
    CrmIconSymbol[CrmIconSymbol["DiscountType"] = 116] = "DiscountType";
    CrmIconSymbol[CrmIconSymbol["Territory"] = 117] = "Territory";
})(CrmIconSymbol || (CrmIconSymbol = {}));
exports.CrmIconSymbol = CrmIconSymbol;
/**
 * Mapping of CrmIconSymbol enum to unicode char that should be used in CrmIcon base control
 */
var CrmIconSymbolMapping = {
    Entity: "crmSymbolFont entity-symbol Entity",
    List: "crmSymbolFont entity-symbol List",
    Account: "crmSymbolFont entity-symbol Account",
    ScanBarcodeButton: "crmSymbolFont entity-symbol ScanBarcodeButton",
    Opportunity: "crmSymbolFont entity-symbol Opportunity",
    Sharepointdocument: "crmSymbolFont entity-symbol Sharepointdocument",
    Dashboard: "crmSymbolFont entity-symbol Dashboard",
    WORKSPACE: "crmSymbolFont entity-symbol WORKSPACE",
    Lead: "crmSymbolFont entity-symbol Lead",
    Contact: "crmSymbolFont entity-symbol Contact",
    Activitypointer: "crmSymbolFont entity-symbol Activitypointer",
    Drafts: "crmSymbolFont entity-symbol Drafts",
    Systemuser: "crmSymbolFont entity-symbol Systemuser",
    Letter: "crmSymbolFont entity-symbol Letter",
    Salesorder: "crmSymbolFont entity-symbol Salesorder",
    Competitor: "crmSymbolFont entity-symbol Competitor",
    Task: "crmSymbolFont entity-symbol Task",
    Fax: "crmSymbolFont entity-symbol Fax",
    Email: "crmSymbolFont entity-symbol Email",
    Phonecall: "crmSymbolFont entity-symbol Phonecall",
    Contract: "crmSymbolFont entity-symbol Contract",
    Quote: "crmSymbolFont entity-symbol Quote",
    Incident: "crmSymbolFont entity-symbol Incident",
    Campaign: "crmSymbolFont entity-symbol Campaign",
    Appointment: "crmSymbolFont entity-symbol Appointment",
    Invoice: "crmSymbolFont entity-symbol Invoice",
    Knowledgearticle: "crmSymbolFont entity-symbol Knowledgearticle",
    Product: "crmSymbolFont entity-symbol Product",
    Opportunityproduct: "crmSymbolFont entity-symbol Opportunityproduct",
    Queueitem: "crmSymbolFont entity-symbol Queueitem",
    Socialprofile: "crmSymbolFont entity-symbol Socialprofile",
    ChevronRight: "crmSymbolFont entity-symbol ChevronRight",
    Globe: "crmSymbolFont entity-symbol Globe",
    Ticker: "crmSymbolFont entity-symbol Ticker",
    Duration: "crmSymbolFont entity-symbol Duration",
    Timezone: "crmSymbolFont entity-symbol Timezone",
    Language: "crmSymbolFont entity-symbol Language",
    MultipleUsers: "crmSymbolFont entity-symbol MultipleUsers",
    Regarding: "crmSymbolFont entity-symbol Regarding",
    Checklist: "crmSymbolFont entity-symbol Checklist",
    TwoOptions: "crmSymbolFont entity-symbol TwoOptions",
    Currency: "crmSymbolFont entity-symbol Currency",
    DateTime: "crmSymbolFont entity-symbol DateTime",
    OfficeIcon: "crmSymbolFont entity-symbol OfficeIcon",
    OfficeIconWordFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconWordFileSharedWithMe",
    OfficeIconWordFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconWordFileCheckedOut",
    OfficeIconExcelFile: "crmSymbolFont entity-symbol OfficeIconExcelFile",
    OfficeIconExcelFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconExcelFileSharedWithMe",
    OfficeIconExcelFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconExcelFileCheckedOut",
    OfficeIconPowerPointFile: "crmSymbolFont entity-symbol OfficeIconPowerPointFile",
    OfficeIconPowerPointFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconPowerPointFileSharedWithMe",
    OfficeIconPowerPointFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconPowerPointFileCheckedOut",
    OfficeIconOneNoteFile: "crmSymbolFont entity-symbol OfficeIconOneNoteFile",
    OfficeIconOneNoteFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconOneNoteFileSharedWithMe",
    OfficeIconOneNoteFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconOneNoteFileCheckedOut",
    OfficeIconAccessFile: "crmSymbolFont entity-symbol OfficeIconAccessFile",
    OfficeIconAccessFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconAccessFileSharedWithMe",
    OfficeIconAccessFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconAccessFileCheckedOut",
    OfficeIconProjectFile: "crmSymbolFont entity-symbol OfficeIconProjectFile",
    OfficeIconProjectFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconProjectFileSharedWithMe",
    OfficeIconProjectFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconProjectFileCheckedOut",
    OfficeIconVisioFile: "crmSymbolFont entity-symbol OfficeIconVisioFile",
    OfficeIconVisioFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconVisioFileSharedWithMe",
    OfficeIconVisioFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconVisioFileCheckedOut",
    OfficeIconHelpFile: "crmSymbolFont entity-symbol OfficeIconHelpFile",
    OfficeIconHelpFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconHelpFileSharedWithMe",
    OfficeIconHelpFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconHelpFileCheckedOut",
    OfficeIconZipFile: "crmSymbolFont entity-symbol OfficeIconZipFile",
    OfficeIconZipFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconZipFileSharedWithMe",
    OfficeIconZipFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconZipFileCheckedOut",
    OfficeIconSetupFile: "crmSymbolFont entity-symbol OfficeIconSetupFile",
    OfficeIconSetupFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconSetupFileSharedWithMe",
    OfficeIconSetupFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconSetupFileCheckedOut",
    OfficeIconVideoFile: "crmSymbolFont entity-symbol OfficeIconVideoFile",
    OfficeIconVideoFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconVideoFileSharedWithMe",
    OfficeIconVideoFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconVideoFileCheckedOut",
    OfficeIconImageFile: "crmSymbolFont entity-symbol OfficeIconImageFile",
    OfficeIconImageFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconImageFileSharedWithMe",
    OfficeIconImageFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconImageFileCheckedOut",
    OfficeIconAudioFile: "crmSymbolFont entity-symbol OfficeIconAudioFile",
    OfficeIconAudioFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconAudioFileSharedWithMe",
    OfficeIconAudioFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconAudioFileCheckedOut",
    OfficeIconExecutableFile: "crmSymbolFont entity-symbol OfficeIconExecutableFile",
    OfficeIconExecutableFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconExecutableFileSharedWithMe",
    OfficeIconExecutableFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconExecutableFileCheckedOut",
    OfficeIconPdfFile: "crmSymbolFont entity-symbol OfficeIconPdfFile",
    OfficeIconPdfFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconPdfFileSharedWithMe",
    OfficeIconPdfFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconPdfFileCheckedOut",
    OfficeIconWebFile: "crmSymbolFont entity-symbol OfficeIconWebFile",
    OfficeIconWebFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconWebFileSharedWithMe",
    OfficeIconWebFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconWebFileCheckedOut",
    OfficeIconTextFile: "crmSymbolFont entity-symbol OfficeIconTextFile",
    OfficeIconTextFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconTextFileSharedWithMe",
    OfficeIconTextFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconTextFileCheckedOut",
    OfficeIconFolder: "crmSymbolFont entity-symbol OfficeIconFolder",
    OfficeIconFolderSharedWithMe: "crmSymbolFont entity-symbol OfficeIconFolderSharedWithMe",
    OfficeIconFolderCheckedOut: "crmSymbolFont entity-symbol OfficeIconFolderCheckedOut",
    OfficeIconGenericFile: "crmSymbolFont entity-symbol OfficeIconGenericFile",
    OfficeIconGenericFileSharedWithMe: "crmSymbolFont entity-symbol OfficeIconGenericFileSharedWithMe",
    OfficeIconGenericFileCheckedOut: "crmSymbolFont entity-symbol OfficeIconGenericFileCheckedOut",
    Timer: "crmSymbolFont entity-symbol Timer",
    Goal: "crmSymbolFont entity-symbol Goal",
    Metric: "crmSymbolFont entity-symbol Metric",
    Report: "crmSymbolFont entity-symbol Report",
    SalesLiterature: "crmSymbolFont entity-symbol SalesLiterature",
    Connection: "crmSymbolFont entity-symbol Connection",
    CustomerAddress: "crmSymbolFont entity-symbol CustomerAddress",
    Position: "crmSymbolFont entity-symbol Position",
    TransactionCurrency: "crmSymbolFont entity-symbol TransactionCurrency",
    Team: "crmSymbolFont entity-symbol Team",
    Service: "crmSymbolFont entity-symbol Service",
    ServiceAppointment: "crmSymbolFont entity-symbol ServiceAppointment",
    Equipment: "crmSymbolFont entity-symbol Equipment",
    PriceLevel: "crmSymbolFont entity-symbol PriceLevel",
    GoalRollUpQuery: "crmSymbolFont entity-symbol GoalRollUpQuery",
    UoMSchedule: "crmSymbolFont entity-symbol UoMSchedule",
    DiscountType: "crmSymbolFont entity-symbol DiscountType",
    Territory: "crmSymbolFont entity-symbol Territory",
};
function getSymbolMapping(type) {
    return CrmIconSymbolMapping[CrmIconSymbol[type]];
}
exports.getSymbolMapping = getSymbolMapping;

},{}],8:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FontIcon_1 = require("../Primitive/FontIcon");
var EntityIconSymbol_1 = require("./EntityIconSymbol");

var FelaConnectHelper_1 = require("../Primitive/FelaConnectHelper");
var InnerEntityIcon = /** @class */ (function (_super) {
    __extends(InnerEntityIcon, _super);
    function InnerEntityIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InnerEntityIcon.prototype.getSymbolClassName = function (name) {
        return EntityIconSymbol_1.getSymbolMappingByTypeName(name);
    };
    return InnerEntityIcon;
}(FontIcon_1.FontIcon));
exports.InnerEntityIcon = InnerEntityIcon;
var EntityIcon = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerEntityIcon);
exports.EntityIcon = EntityIcon;

},{"../Primitive/FelaConnectHelper":17,"../Primitive/FontIcon":23,"./EntityIconSymbol":9,"react-fela":undefined}],9:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Mapping of Entity logical name to unicode char that should be used in EntityIcon base control
 */
var EntityIconSymbolMapping = {
    account: "crmSymbolFont entity-symbol Account",
    activitypointer: "crmSymbolFont entity-symbol Activitypointer",
    appointment: "crmSymbolFont entity-symbol Appointment",
    article: "symbolFont Article-symbol",
    businessunit: "crmSymbolFont entity-symbol BusinessUnit",
    campaign: "crmSymbolFont entity-symbol Campaign",
    campaignresolution: "symbolFont CampaignResolution-symbol",
    case: "symbolFont Case-symbol",
    caseresolution: "symbolFont CaseResolution-symbol",
    chat: "symbolFont Chat-symbol",
    competitor: "crmSymbolFont entity-symbol Competitor",
    connection: "crmSymbolFont entity-symbol Connection",
    contact: "crmSymbolFont entity-symbol Contact",
    contract: "crmSymbolFont entity-symbol Contract",
    createquote: "symbolFont CreateQuote-symbol",
    customactivity: "symbolFont CustomActivity-symbol",
    customeraddress: "crmSymbolFont entity-symbol CustomerAddress",
    dashboard: "crmSymbolFont entity-symbol Dashboard",
    distributionList: "symbolFont DistributionList-symbol",
    documenttemplates: "symbolFont DocumentTemplates-symbol",
    email: "crmSymbolFont entity-symbol Email",
    externalUser: "symbolFont GuestUser-symbol",
    fax: "crmSymbolFont entity-symbol Fax",
    goal: "crmSymbolFont entity-symbol Goal",
    guestUser: "symbolFont GuestUser-symbol",
    incident: "crmSymbolFont entity-symbol Incident",
    invoice: "crmSymbolFont entity-symbol Invoice",
    knowledgearticle: "crmSymbolFont entity-symbol Knowledgearticle",
    lead: "crmSymbolFont entity-symbol Lead",
    letter: "crmSymbolFont entity-symbol Letter",
    mail: "symbolFont Mail-symbol",
    membersicon: "symbolFont MembersIcon-symbol",
    metric: "crmSymbolFont entity-symbol Metric",
    opportunity: "crmSymbolFont entity-symbol Opportunity",
    opportunityproduct: "crmSymbolFont entity-symbol Opportunityproduct",
    phone: "symbolFont Phone-symbol",
    phonecall: "crmSymbolFont entity-symbol Phonecall",
    position: "crmSymbolFont entity-symbol Position",
    product: "crmSymbolFont entity-symbol Product",
    queueicon: "symbolFont QueueIcon-symbol",
    queueitem: "crmSymbolFont entity-symbol Queueitem",
    queueitemroute: "symbolFont QueueItemRoute-symbol",
    quote: "crmSymbolFont entity-symbol Quote",
    report: "crmSymbolFont entity-symbol Report",
    resolvecase: "symbolFont ResolveCase-symbol",
    salesliterature: "crmSymbolFont entity-symbol SalesLiterature",
    salesorder: "crmSymbolFont entity-symbol Salesorder",
    serviceactivity: "symbolFont ServiceActivity-symbol",
    sharepointdocument: "crmSymbolFont entity-symbol Sharepointdocument",
    socialprofile: "crmSymbolFont entity-symbol Socialprofile",
    systemuser: "crmSymbolFont entity-symbol Systemuser",
    task: "crmSymbolFont entity-symbol Task",
    team: "crmSymbolFont entity-symbol Team",
    transactioncurrency: "crmSymbolFont entity-symbol TransactionCurrency",
    user: "symbolFont GuestUser-symbol",
    wordtemplates: "symbolFont WordTemplates-symbol",
    msdyusd_task: "crmSymbolFont entity-symbol msdyusd_task-symbol",
    msdyusd_configuration: "crmSymbolFont entity-symbol msdyusd_configuration-symbol",
    msdyusd_customizationfiles: "crmSymbolFont entity-symbol msdyusd_customizationfiles-symbol",
    msdyusd_entitysearch: "crmSymbolFont entity-symbol msdyusd_entitysearch-symbol",
    msdyusd_uiievent: "crmSymbolFont entity-symbol msdyusd_uiievent-symbol",
    msdyusd_form: "crmSymbolFont entity-symbol msdyusd_form-symbol",
    uii_option: "crmSymbolFont entity-symbol uii_option-symbol",
    uii_hostedapplication: "crmSymbolFont entity-symbol uii_hostedapplication-symbol",
    msdyusd_scriptlet: "crmSymbolFont entity-symbol msdyusd_scriptlet-symbol",
    msdyusd_toolbarstrip: "crmSymbolFont entity-symbol msdyusd_toolbarstrip-symbol",
    msdyusd_usersettings: "crmSymbolFont entity-symbol msdyusd_usersettings-symbol",
    msdyusd_agentscriptaction: "crmSymbolFont entity-symbol msdyusd_agentscriptaction-symbol",
    msdyusd_auditanddiagnosticssetting: "crmSymbolFont entity-symbol msdyusd_auditanddiagnosticssetting-symbol",
    msdyusd_sessioninformation: "crmSymbolFont entity-symbol msdyusd_sessioninformation-symbol",
    msdyusd_windowroute: "crmSymbolFont entity-symbol msdyusd_windowroute-symbol",
    customentity: "symbolFont CustomEntity-symbol",
    default: "symbolFont CustomEntity-symbol",
    unresolvedaddress: "symbolFont InformationIcon-symbol",
    recurringappointmentmaster: "symbolFont NewRecurringAppointment-symbol",
    service: "crmSymbolFont entity-symbol Service",
    serviceappointment: "crmSymbolFont entity-symbol ServiceAppointment",
    equipment: "crmSymbolFont entity-symbol Equipment",
    pricelevel: "crmSymbolFont entity-symbol PriceLevel",
    goalrollupquery: "crmSymbolFont entity-symbol GoalRollUpQuery",
    uomschedule: "crmSymbolFont entity-symbol UoMSchedule",
    discounttype: "crmSymbolFont entity-symbol DiscountType",
    territory: "crmSymbolFont entity-symbol Territory",
};
function getSymbolMappingByTypeName(name) {
    return EntityIconSymbolMapping[name] ? EntityIconSymbolMapping[name] : EntityIconSymbolMapping.default;
}
exports.getSymbolMappingByTypeName = getSymbolMappingByTypeName;

},{}],10:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FontIcon_1 = require("../Primitive/FontIcon");
var MicrosoftIconSymbol_1 = require("./MicrosoftIconSymbol");

var FelaConnectHelper_1 = require("../Primitive/FelaConnectHelper");
var InnerMicrosoftIcon = /** @class */ (function (_super) {
    __extends(InnerMicrosoftIcon, _super);
    function InnerMicrosoftIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InnerMicrosoftIcon.prototype.getSymbolClassName = function (type) {
        return MicrosoftIconSymbol_1.getSymbolMapping(type);
    };
    return InnerMicrosoftIcon;
}(FontIcon_1.FontIcon));
exports.InnerMicrosoftIcon = InnerMicrosoftIcon;
/**
 * Icon Display Type enum
 */
var IconPosition;
(function (IconPosition) {
    IconPosition[IconPosition["None"] = 0] = "None";
    IconPosition[IconPosition["Left"] = 1] = "Left";
    IconPosition[IconPosition["Top"] = 2] = "Top";
})(IconPosition || (IconPosition = {}));
exports.IconPosition = IconPosition;
var MicrosoftIcon = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerMicrosoftIcon);
exports.MicrosoftIcon = MicrosoftIcon;

},{"../Primitive/FelaConnectHelper":17,"../Primitive/FontIcon":23,"./MicrosoftIconSymbol":11,"react-fela":undefined}],11:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * IMPORTANT!
 * DO NOT MAKE CHANGES TO THIS FILE - THIS FILE IS GENERATED BY A BUILD TASK
 * IF YOU NEED TO MAKE CHANGES THEY MUST BE MADE IN THE JSON CONFIGURATION FILE
 */
Object.defineProperty(exports, "__esModule", { value: true });
var MicrosoftIconSymbol;
(function (MicrosoftIconSymbol) {
    MicrosoftIconSymbol[MicrosoftIconSymbol["Expanded"] = 0] = "Expanded";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UpArrowHead"] = 1] = "UpArrowHead";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LeftArrowHead"] = 2] = "LeftArrowHead";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Collapsed"] = 3] = "Collapsed";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Edit"] = 4] = "Edit";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Save"] = 5] = "Save";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Delete"] = 6] = "Delete";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Remove"] = 7] = "Remove";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Add"] = 8] = "Add";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Cancel"] = 9] = "Cancel";
    MicrosoftIconSymbol[MicrosoftIconSymbol["HandClick"] = 10] = "HandClick";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Accept"] = 11] = "Accept";
    MicrosoftIconSymbol[MicrosoftIconSymbol["More"] = 12] = "More";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Forward"] = 13] = "Forward";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Favorite"] = 14] = "Favorite";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Placeholder"] = 15] = "Placeholder";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RatingFull"] = 16] = "RatingFull";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RatingEmpty"] = 17] = "RatingEmpty";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Options"] = 18] = "Options";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Manage"] = 19] = "Manage";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Settings"] = 20] = "Settings";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Find"] = 21] = "Find";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Help"] = 22] = "Help";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ViewNotifications"] = 23] = "ViewNotifications";
    MicrosoftIconSymbol[MicrosoftIconSymbol["StageAdvance"] = 24] = "StageAdvance";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CheckMark"] = 25] = "CheckMark";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Locked"] = 26] = "Locked";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Lock"] = 27] = "Lock";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MoreOptions"] = 28] = "MoreOptions";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ContactInfo"] = 29] = "ContactInfo";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Pin"] = 30] = "Pin";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Unpin"] = 31] = "Unpin";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Refresh"] = 32] = "Refresh";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Details"] = 33] = "Details";
    MicrosoftIconSymbol[MicrosoftIconSymbol["VisualFilter"] = 34] = "VisualFilter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilter"] = 35] = "GlobalFilter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Diamond"] = 36] = "Diamond";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ApplyFilter"] = 37] = "ApplyFilter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CancelFilter"] = 38] = "CancelFilter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["StreamView"] = 39] = "StreamView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["TileView"] = 40] = "TileView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Import"] = 41] = "Import";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Tools"] = 42] = "Tools";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Attach"] = 43] = "Attach";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Filter"] = 44] = "Filter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Copy"] = 45] = "Copy";
    MicrosoftIconSymbol[MicrosoftIconSymbol["HighPriority"] = 46] = "HighPriority";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReduceTile"] = 47] = "ReduceTile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ExpandTile"] = 48] = "ExpandTile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterExpand"] = 49] = "GlobalFilterExpand";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterCollapse"] = 50] = "GlobalFilterCollapse";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Clear"] = 51] = "Clear";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Post"] = 52] = "Post";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OneNote"] = 53] = "OneNote";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Home"] = 54] = "Home";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SetAsHome"] = 55] = "SetAsHome";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BackButton"] = 56] = "BackButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BackButtonWithoutBorder"] = 57] = "BackButtonWithoutBorder";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UpArrow"] = 58] = "UpArrow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DownArrow"] = 59] = "DownArrow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SetActiveButton"] = 60] = "SetActiveButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SearchButton"] = 61] = "SearchButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ForwardButton"] = 62] = "ForwardButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Mail"] = 63] = "Mail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CheckedMail"] = 64] = "CheckedMail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FailedMail"] = 65] = "FailedMail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Phone"] = 66] = "Phone";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Chat"] = 67] = "Chat";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenPane"] = 68] = "OpenPane";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ClosePane"] = 69] = "ClosePane";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddFriend"] = 70] = "AddFriend";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Arrow"] = 71] = "Arrow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DropdownArrow"] = 72] = "DropdownArrow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FlsLocked"] = 73] = "FlsLocked";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LinkArticle"] = 74] = "LinkArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UnlinkArticle"] = 75] = "UnlinkArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CopyLink"] = 76] = "CopyLink";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EmailLink"] = 77] = "EmailLink";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Share"] = 78] = "Share";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Assign"] = 79] = "Assign";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Connect"] = 80] = "Connect";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Opportunity"] = 81] = "Opportunity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Appointment"] = 82] = "Appointment";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Task"] = 83] = "Task";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Case"] = 84] = "Case";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PhoneCallIncoming"] = 85] = "PhoneCallIncoming";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PhoneCallOutgoing"] = 86] = "PhoneCallOutgoing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EmailIncoming"] = 87] = "EmailIncoming";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EmailOutgoing"] = 88] = "EmailOutgoing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SendEmail"] = 89] = "SendEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ApplyTemplate"] = 90] = "ApplyTemplate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["InsertKbArticle"] = 91] = "InsertKbArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SendSelected"] = 92] = "SendSelected";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAndClose"] = 93] = "SaveAndClose";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReplyEmail"] = 94] = "ReplyEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReplyAllEmail"] = 95] = "ReplyAllEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ForwardEmail"] = 96] = "ForwardEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Close"] = 97] = "Close";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Activate"] = 98] = "Activate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DeActivate"] = 99] = "DeActivate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DeleteBulk"] = 100] = "DeleteBulk";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SocialActivityIncoming"] = 101] = "SocialActivityIncoming";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SocialActivityOutgoing"] = 102] = "SocialActivityOutgoing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CustomActivity"] = 103] = "CustomActivity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SystemPost"] = 104] = "SystemPost";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Convert"] = 105] = "Convert";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MarkAsWon"] = 106] = "MarkAsWon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MarkAsLost"] = 107] = "MarkAsLost";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SetRegarding"] = 108] = "SetRegarding";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAsComplete"] = 109] = "SaveAsComplete";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SwitchProcess"] = 110] = "SwitchProcess";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Recalculate"] = 111] = "Recalculate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SendDirectEmail"] = 112] = "SendDirectEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenMailbox"] = 113] = "OpenMailbox";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReOpenOpportunity"] = 114] = "ReOpenOpportunity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReactivateLead"] = 115] = "ReactivateLead";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Disqualify"] = 116] = "Disqualify";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Qualify"] = 117] = "Qualify";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SelectView"] = 118] = "SelectView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SelectChart"] = 119] = "SelectChart";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenInBrowser"] = 120] = "OpenInBrowser";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewAppointment"] = 121] = "NewAppointment";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewRecurringAppointment"] = 122] = "NewRecurringAppointment";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewPhoneCall"] = 123] = "NewPhoneCall";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewTask"] = 124] = "NewTask";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewEmail"] = 125] = "NewEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddExisting"] = 126] = "AddExisting";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAndEdit"] = 127] = "SaveAndEdit";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Default"] = 128] = "Default";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ScrollRight"] = 129] = "ScrollRight";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ScrollLeft"] = 130] = "ScrollLeft";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAndRunRoutingRule"] = 131] = "SaveAndRunRoutingRule";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RunRoutingRule"] = 132] = "RunRoutingRule";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ResolveCase"] = 133] = "ResolveCase";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CancelCase"] = 134] = "CancelCase";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReactivateCase"] = 135] = "ReactivateCase";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddToQueue"] = 136] = "AddToQueue";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CreateChildCase"] = 137] = "CreateChildCase";
    MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemRoute"] = 138] = "QueueItemRoute";
    MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemRelease"] = 139] = "QueueItemRelease";
    MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemRemove"] = 140] = "QueueItemRemove";
    MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemPick"] = 141] = "QueueItemPick";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Drilldown"] = 142] = "Drilldown";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PopOverButton"] = 143] = "PopOverButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ExitButton"] = 144] = "ExitButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ExportToExcel"] = 145] = "ExportToExcel";
    MicrosoftIconSymbol[MicrosoftIconSymbol["WordTemplates"] = 146] = "WordTemplates";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplates"] = 147] = "DocumentTemplates";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenInPowerBI"] = 148] = "OpenInPowerBI";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenPowerBIReport"] = 149] = "OpenPowerBIReport";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenDelve"] = 150] = "OpenDelve";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ArticleLink"] = 151] = "ArticleLink";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ArchiveArticle"] = 152] = "ArchiveArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ApproveArticle"] = 153] = "ApproveArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DiscardArticle"] = 154] = "DiscardArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Minor"] = 155] = "Minor";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Major"] = 156] = "Major";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PublishKnowledgeArticle"] = 157] = "PublishKnowledgeArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RelateArticle"] = 158] = "RelateArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RelateProduct"] = 159] = "RelateProduct";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RestoreArticle"] = 160] = "RestoreArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RevertToDraftArticle"] = 161] = "RevertToDraftArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Translate"] = 162] = "Translate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UpdateArticle"] = 163] = "UpdateArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RemoveFilter"] = 164] = "RemoveFilter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Article"] = 165] = "Article";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Graph"] = 166] = "Graph";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CSR"] = 167] = "CSR";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MembersIcon"] = 168] = "MembersIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["QueueIcon"] = 169] = "QueueIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SiteMap"] = 170] = "SiteMap";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NormalPriority"] = 171] = "NormalPriority";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LowPriority"] = 172] = "LowPriority";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ViewIcon"] = 173] = "ViewIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RecentCases"] = 174] = "RecentCases";
    MicrosoftIconSymbol[MicrosoftIconSymbol["KBRecords"] = 175] = "KBRecords";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NumberOfViews"] = 176] = "NumberOfViews";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ResizeHandle"] = 177] = "ResizeHandle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["TaskBasedFlow"] = 178] = "TaskBasedFlow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["InformationIcon"] = 179] = "InformationIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PencilIcon"] = 180] = "PencilIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ErrorIcon"] = 181] = "ErrorIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SuccessIcon"] = 182] = "SuccessIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OptionsetIcon"] = 183] = "OptionsetIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NotificationIcon"] = 184] = "NotificationIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PanelHeaderImportDataIcon"] = 185] = "PanelHeaderImportDataIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SidePanelUpload"] = 186] = "SidePanelUpload";
    MicrosoftIconSymbol[MicrosoftIconSymbol["New"] = 187] = "New";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DetailsPageClose"] = 188] = "DetailsPageClose";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SettingsListIcon"] = 189] = "SettingsListIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ListIcon"] = 190] = "ListIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ForwardDisable"] = 191] = "ForwardDisable";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PdfIconFile"] = 192] = "PdfIconFile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PresentationFile"] = 193] = "PresentationFile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OneNoteFile"] = 194] = "OneNoteFile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AccessFile"] = 195] = "AccessFile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["VisioFile"] = 196] = "VisioFile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ProjectFile"] = 197] = "ProjectFile";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Plus"] = 198] = "Plus";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ChevronUp"] = 199] = "ChevronUp";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ChevronDown"] = 200] = "ChevronDown";
    MicrosoftIconSymbol[MicrosoftIconSymbol["HappySmiley"] = 201] = "HappySmiley";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SadSmiley"] = 202] = "SadSmiley";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CaseResolution"] = 203] = "CaseResolution";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CampaignResolution"] = 204] = "CampaignResolution";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ServiceActivity"] = 205] = "ServiceActivity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Notes"] = 206] = "Notes";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Audio"] = 207] = "Audio";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Camera"] = 208] = "Camera";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Video"] = 209] = "Video";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Image"] = 210] = "Image";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Html"] = 211] = "Html";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointEditDocument"] = 212] = "SharePointEditDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointDeleteDocument"] = 213] = "SharePointDeleteDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointCheckoutDocument"] = 214] = "SharePointCheckoutDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointCheckinDocument"] = 215] = "SharePointCheckinDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointEditDocumentProperties"] = 216] = "SharePointEditDocumentProperties";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointDiscardCheckoutDocument"] = 217] = "SharePointDiscardCheckoutDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewDocument"] = 218] = "SharePointNewDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewWordDocument"] = 219] = "SharePointNewWordDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewExcelDocument"] = 220] = "SharePointNewExcelDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewPowerPointDocument"] = 221] = "SharePointNewPowerPointDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewOneNoteDocument"] = 222] = "SharePointNewOneNoteDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointUploadDocument"] = 223] = "SharePointUploadDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointChangeLocation"] = 224] = "SharePointChangeLocation";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointAddDocumentLocation"] = 225] = "SharePointAddDocumentLocation";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointEditLocation"] = 226] = "SharePointEditLocation";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointOpenLocation"] = 227] = "SharePointOpenLocation";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointOpenDocument"] = 228] = "SharePointOpenDocument";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SendByEmail"] = 229] = "SendByEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CreateQuote"] = 230] = "CreateQuote";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Reply"] = 231] = "Reply";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Warning"] = 232] = "Warning";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Play"] = 233] = "Play";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ExpandButton"] = 234] = "ExpandButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AssociatedArticle"] = 235] = "AssociatedArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DisassociatedArticle"] = 236] = "DisassociatedArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FormDesign"] = 237] = "FormDesign";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterClearAll"] = 238] = "GlobalFilterClearAll";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterExpandedRow"] = 239] = "GlobalFilterExpandedRow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterCollapsedRow"] = 240] = "GlobalFilterCollapsedRow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RelationshipAssistant"] = 241] = "RelationshipAssistant";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AutomaticSuggestions"] = 242] = "AutomaticSuggestions";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SemanticZoom"] = 243] = "SemanticZoom";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SemanticZoomMirrored"] = 244] = "SemanticZoomMirrored";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BackwardButton"] = 245] = "BackwardButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MultiSelect"] = 246] = "MultiSelect";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MultiSelectMirrored"] = 247] = "MultiSelectMirrored";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Spinning"] = 248] = "Spinning";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RetireProduct"] = 249] = "RetireProduct";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddProduct"] = 250] = "AddProduct";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OfflineStatus"] = 251] = "OfflineStatus";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Abandon"] = 252] = "Abandon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Reactivate"] = 253] = "Reactivate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FinishStage"] = 254] = "FinishStage";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SortButton"] = 255] = "SortButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Flows"] = 256] = "Flows";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenEntityRecord"] = 257] = "OpenEntityRecord";
    MicrosoftIconSymbol[MicrosoftIconSymbol["View"] = 258] = "View";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CreateView"] = 259] = "CreateView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EditView"] = 260] = "EditView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GuestUser"] = 261] = "GuestUser";
    MicrosoftIconSymbol[MicrosoftIconSymbol["History"] = 262] = "History";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReassignRecords"] = 263] = "ReassignRecords";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ManageRoles"] = 264] = "ManageRoles";
    MicrosoftIconSymbol[MicrosoftIconSymbol["JoinTeams"] = 265] = "JoinTeams";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ChangeManager"] = 266] = "ChangeManager";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddMembers"] = 267] = "AddMembers";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RemoveMembers"] = 268] = "RemoveMembers";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Download"] = 269] = "Download";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SetAsDefaultView"] = 270] = "SetAsDefaultView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Pinned"] = 271] = "Pinned";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DistributionList"] = 272] = "DistributionList";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MergeRecords"] = 273] = "MergeRecords";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AssociateChildCase"] = 274] = "AssociateChildCase";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SetAsDefault"] = 275] = "SetAsDefault";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ConvertKnowledgeArticle"] = 276] = "ConvertKnowledgeArticle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Messenger"] = 277] = "Messenger";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AssociateCategory"] = 278] = "AssociateCategory";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OfficeWaffle"] = 279] = "OfficeWaffle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["TripleColumn"] = 280] = "TripleColumn";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Tiles"] = 281] = "Tiles";
    MicrosoftIconSymbol[MicrosoftIconSymbol["HideVisualFilter"] = 282] = "HideVisualFilter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["InteractiveDashboard"] = 283] = "InteractiveDashboard";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Dynamics365"] = 284] = "Dynamics365";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SalesLiterature"] = 285] = "SalesLiterature";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SelectButton"] = 286] = "SelectButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SelectButtonRTL"] = 287] = "SelectButtonRTL";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LockPricing"] = 288] = "LockPricing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CreateInvoice"] = 289] = "CreateInvoice";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FulfillOrder"] = 290] = "FulfillOrder";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CancelInvoice"] = 291] = "CancelInvoice";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ActivateQuote"] = 292] = "ActivateQuote";
    MicrosoftIconSymbol[MicrosoftIconSymbol["InvoicePaid"] = 293] = "InvoicePaid";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GetProducts"] = 294] = "GetProducts";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UnlockPricing"] = 295] = "UnlockPricing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Checkbox"] = 296] = "Checkbox";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CheckboxComposite"] = 297] = "CheckboxComposite";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RightChevron"] = 298] = "RightChevron";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LeftChevron"] = 299] = "LeftChevron";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UntrackedEmail"] = 300] = "UntrackedEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpenEmail"] = 301] = "OpenEmail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterCollapsedRowRTL"] = 302] = "GlobalFilterCollapsedRowRTL";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CancelOrder"] = 303] = "CancelOrder";
    MicrosoftIconSymbol[MicrosoftIconSymbol["URL"] = 304] = "URL";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Ticker"] = 305] = "Ticker";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UseCurrentPricing"] = 306] = "UseCurrentPricing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Process"] = 307] = "Process";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FirstPageButton"] = 308] = "FirstPageButton";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LinkedInLogo"] = 309] = "LinkedInLogo";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Health"] = 310] = "Health";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Family"] = 311] = "Family";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Sports"] = 312] = "Sports";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Entertainment"] = 313] = "Entertainment";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OOF"] = 314] = "OOF";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CarouselView"] = 315] = "CarouselView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["HeartEmpty"] = 316] = "HeartEmpty";
    MicrosoftIconSymbol[MicrosoftIconSymbol["HeartFilled"] = 317] = "HeartFilled";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Follow"] = 318] = "Follow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RunQuery"] = 319] = "RunQuery";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GroupAnd"] = 320] = "GroupAnd";
    MicrosoftIconSymbol[MicrosoftIconSymbol["GroupOr"] = 321] = "GroupOr";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Ungroup"] = 322] = "Ungroup";
    MicrosoftIconSymbol[MicrosoftIconSymbol["HideInSimpleMode"] = 323] = "HideInSimpleMode";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ShowInSimpleMode"] = 324] = "ShowInSimpleMode";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PinnedSolid"] = 325] = "PinnedSolid";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FilterSolid"] = 326] = "FilterSolid";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Bot"] = 327] = "Bot";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SystemDocumentTemplates"] = 328] = "SystemDocumentTemplates";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MyDocumentTemplates"] = 329] = "MyDocumentTemplates";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ViewAllMyDocumentTemplates"] = 330] = "ViewAllMyDocumentTemplates";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EnableSecurityRoles"] = 331] = "EnableSecurityRoles";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateUpload"] = 332] = "DocumentTemplateUpload";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateEdit"] = 333] = "DocumentTemplateEdit";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateActivate"] = 334] = "DocumentTemplateActivate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateDeactivate"] = 335] = "DocumentTemplateDeactivate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["YammerIcon"] = 336] = "YammerIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["StopIcon"] = 337] = "StopIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReplaceContentIcon"] = 338] = "ReplaceContentIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CloseDateComingSoon"] = 339] = "CloseDateComingSoon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NearbyCustomers"] = 340] = "NearbyCustomers";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RelevantNews"] = 341] = "RelevantNews";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UpcomingMeeting"] = 342] = "UpcomingMeeting";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RecentMeeting"] = 343] = "RecentMeeting";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ReminderWithCall"] = 344] = "ReminderWithCall";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CardsTask"] = 345] = "CardsTask";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CardsQuote"] = 346] = "CardsQuote";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CardsOpportunity"] = 347] = "CardsOpportunity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CardsInvoice"] = 348] = "CardsInvoice";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CardsDashboard"] = 349] = "CardsDashboard";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CardsLeads"] = 350] = "CardsLeads";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpportunityNoActivity"] = 351] = "OpportunityNoActivity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CaseNoActivity"] = 352] = "CaseNoActivity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CompetitorMentioned"] = 353] = "CompetitorMentioned";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MeetingRequest"] = 354] = "MeetingRequest";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MissedCloseDate"] = 355] = "MissedCloseDate";
    MicrosoftIconSymbol[MicrosoftIconSymbol["IssueDetection"] = 356] = "IssueDetection";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NoActivityWithAccount"] = 357] = "NoActivityWithAccount";
    MicrosoftIconSymbol[MicrosoftIconSymbol["YesNo"] = 358] = "YesNo";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AgendaActivityServiceAppointment"] = 359] = "AgendaActivityServiceAppointment";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AgendaActivityFax"] = 360] = "AgendaActivityFax";
    MicrosoftIconSymbol[MicrosoftIconSymbol["UpcomingFlight"] = 361] = "UpcomingFlight";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpportunityAtRiskSentiment"] = 362] = "OpportunityAtRiskSentiment";
    MicrosoftIconSymbol[MicrosoftIconSymbol["IconDue"] = 363] = "IconDue";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddProductFamily"] = 364] = "AddProductFamily";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddProductBundle"] = 365] = "AddProductBundle";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ProductPublish"] = 366] = "ProductPublish";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CloneProduct"] = 367] = "CloneProduct";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CloseGoal"] = 368] = "CloseGoal";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AlignWithFiscalPeriod"] = 369] = "AlignWithFiscalPeriod";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Connection"] = 370] = "Connection";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ConnectionToMe"] = 371] = "ConnectionToMe";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ConnectionToOther"] = 372] = "ConnectionToOther";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ProductUpsell"] = 373] = "ProductUpsell";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SubscriptionAdd"] = 374] = "SubscriptionAdd";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RefreshDevice"] = 375] = "RefreshDevice";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BulletListRemove"] = 376] = "BulletListRemove";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BulletListAdd"] = 377] = "BulletListAdd";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ScatterChart"] = 378] = "ScatterChart";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartHorizontal"] = 379] = "BarChartHorizontal";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartVertical"] = 380] = "BarChartVertical";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FunnelChart"] = 381] = "FunnelChart";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PieDouble"] = 382] = "PieDouble";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AALinkedInLogo"] = 383] = "AALinkedInLogo";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SendAndClose"] = 384] = "SendAndClose";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AdvFind"] = 385] = "AdvFind";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DoubleChevronLeft"] = 386] = "DoubleChevronLeft";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DoubleChevronRight"] = 387] = "DoubleChevronRight";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AreaChart"] = 388] = "AreaChart";
    MicrosoftIconSymbol[MicrosoftIconSymbol["DonutChart"] = 389] = "DonutChart";
    MicrosoftIconSymbol[MicrosoftIconSymbol["TagChart"] = 390] = "TagChart";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Teaser"] = 391] = "Teaser";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Clone"] = 392] = "Clone";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AreaChartMirrored"] = 393] = "AreaChartMirrored";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartHorizontalMirrored"] = 394] = "BarChartHorizontalMirrored";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartVerticalMirrored"] = 395] = "BarChartVerticalMirrored";
    MicrosoftIconSymbol[MicrosoftIconSymbol["People"] = 396] = "People";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PeopleBlock"] = 397] = "PeopleBlock";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BulletListDownArrow"] = 398] = "BulletListDownArrow";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Recent"] = 399] = "Recent";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointIcon"] = 400] = "SharePointIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OneDriveIcon"] = 401] = "OneDriveIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FolderSharedIcon"] = 402] = "FolderSharedIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["MSTeamsIcon"] = 403] = "MSTeamsIcon";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ScrollUpDown"] = 404] = "ScrollUpDown";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SendToCTI"] = 405] = "SendToCTI";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CreateQuickCampaign"] = 406] = "CreateQuickCampaign";
    MicrosoftIconSymbol[MicrosoftIconSymbol["PageSolid"] = 407] = "PageSolid";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Page"] = 408] = "Page";
    MicrosoftIconSymbol[MicrosoftIconSymbol["OpportunitiesList"] = 409] = "OpportunitiesList";
    MicrosoftIconSymbol[MicrosoftIconSymbol["BrowseCards"] = 410] = "BrowseCards";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Letter"] = 411] = "Letter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Fax"] = 412] = "Fax";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewLetter"] = 413] = "NewLetter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewFax"] = 414] = "NewFax";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LetterIncoming"] = 415] = "LetterIncoming";
    MicrosoftIconSymbol[MicrosoftIconSymbol["LetterOutgoing"] = 416] = "LetterOutgoing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FaxIncoming"] = 417] = "FaxIncoming";
    MicrosoftIconSymbol[MicrosoftIconSymbol["FaxOutgoing"] = 418] = "FaxOutgoing";
    MicrosoftIconSymbol[MicrosoftIconSymbol["CreatePersonalView"] = 419] = "CreatePersonalView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SaveFilterToNewPersonalView"] = 420] = "SaveFilterToNewPersonalView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SaveFilterToCurrentPersonalView"] = 421] = "SaveFilterToCurrentPersonalView";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ViewHierarchy"] = 422] = "ViewHierarchy";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ProductPreview"] = 423] = "ProductPreview";
    MicrosoftIconSymbol[MicrosoftIconSymbol["AddTerritoryMember"] = 424] = "AddTerritoryMember";
    MicrosoftIconSymbol[MicrosoftIconSymbol["RemoveTerritoryMember"] = 425] = "RemoveTerritoryMember";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Report"] = 426] = "Report";
    MicrosoftIconSymbol[MicrosoftIconSymbol["NewServiceActivity"] = 427] = "NewServiceActivity";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Recurrence"] = 428] = "Recurrence";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EditSeries"] = 429] = "EditSeries";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EndSeries"] = 430] = "EndSeries";
    MicrosoftIconSymbol[MicrosoftIconSymbol["EditDefaultFilter"] = 431] = "EditDefaultFilter";
    MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemDetail"] = 432] = "QueueItemDetail";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ThumbsUp"] = 433] = "ThumbsUp";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ThumbsDown"] = 434] = "ThumbsDown";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Lead"] = 435] = "Lead";
    MicrosoftIconSymbol[MicrosoftIconSymbol["TableLink"] = 436] = "TableLink";
    MicrosoftIconSymbol[MicrosoftIconSymbol["TableGroup"] = 437] = "TableGroup";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ClearDefault"] = 438] = "ClearDefault";
    MicrosoftIconSymbol[MicrosoftIconSymbol["SetDefault"] = 439] = "SetDefault";
    MicrosoftIconSymbol[MicrosoftIconSymbol["Expand"] = 440] = "Expand";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ChromeMinimize"] = 441] = "ChromeMinimize";
    MicrosoftIconSymbol[MicrosoftIconSymbol["ChromeMaximize"] = 442] = "ChromeMaximize";
})(MicrosoftIconSymbol || (MicrosoftIconSymbol = {}));
exports.MicrosoftIconSymbol = MicrosoftIconSymbol;
/**
 * Mapping of MicrosoftIconSymbol enum to unicode char that should be used in MicrosoftIcon base control
 */
var MicrosoftIconSymbolMapping = {
    Expanded: "symbolFont Expanded-symbol",
    UpArrowHead: "symbolFont UpArrowHead-symbol",
    LeftArrowHead: "symbolFont LeftArrowHead-symbol",
    Collapsed: "symbolFont Collapsed-symbol",
    Edit: "symbolFont Edit-symbol",
    Save: "symbolFont Save-symbol",
    Delete: "symbolFont Delete-symbol",
    Remove: "symbolFont Remove-symbol",
    Add: "symbolFont Add-symbol",
    Cancel: "symbolFont Cancel-symbol",
    HandClick: "symbolFont HandClick-symbol",
    Accept: "symbolFont Accept-symbol",
    More: "symbolFont More-symbol",
    Forward: "symbolFont Forward-symbol",
    Favorite: "symbolFont Favorite-symbol",
    Placeholder: "symbolFont Placeholder-symbol",
    RatingFull: "symbolFont RatingFull-symbol",
    RatingEmpty: "symbolFont RatingEmpty-symbol",
    Options: "symbolFont Options-symbol",
    Manage: "symbolFont Manage-symbol",
    Settings: "symbolFont Settings-symbol",
    Find: "symbolFont Find-symbol",
    Help: "symbolFont Help-symbol",
    ViewNotifications: "symbolFont ViewNotifications-symbol",
    StageAdvance: "symbolFont StageAdvance-symbol",
    CheckMark: "symbolFont CheckMark-symbol",
    Locked: "symbolFont Locked-symbol",
    Lock: "symbolFont Lock-symbol",
    MoreOptions: "symbolFont MoreOptions-symbol",
    ContactInfo: "symbolFont ContactInfo-symbol",
    Pin: "symbolFont Pin-symbol",
    Unpin: "symbolFont Unpin-symbol",
    Refresh: "symbolFont Refresh-symbol",
    Details: "symbolFont Details-symbol",
    VisualFilter: "symbolFont VisualFilter-symbol",
    GlobalFilter: "symbolFont GlobalFilter-symbol",
    Diamond: "symbolFont Diamond-symbol",
    ApplyFilter: "symbolFont ApplyFilter-symbol",
    CancelFilter: "symbolFont CancelFilter-symbol",
    StreamView: "symbolFont StreamView-symbol",
    TileView: "symbolFont TileView-symbol",
    Import: "symbolFont Import-symbol",
    Tools: "symbolFont Tools-symbol",
    Attach: "symbolFont Attach-symbol",
    Filter: "symbolFont Filter-symbol",
    Copy: "symbolFont Copy-symbol",
    HighPriority: "symbolFont HighPriority-symbol",
    ReduceTile: "symbolFont ReduceTile-symbol",
    ExpandTile: "symbolFont ExpandTile-symbol",
    GlobalFilterExpand: "symbolFont GlobalFilterExpand-symbol",
    GlobalFilterCollapse: "symbolFont GlobalFilterCollapse-symbol",
    Clear: "symbolFont Clear-symbol",
    Post: "symbolFont Post-symbol",
    OneNote: "symbolFont OneNote-symbol",
    Home: "symbolFont Home-symbol",
    SetAsHome: "symbolFont SetAsHome-symbol",
    BackButton: "symbolFont BackButton-symbol",
    BackButtonWithoutBorder: "symbolFont BackButtonWithoutBorder-symbol",
    UpArrow: "symbolFont UpArrow-symbol",
    DownArrow: "symbolFont DownArrow-symbol",
    SetActiveButton: "symbolFont SetActiveButton-symbol",
    SearchButton: "symbolFont SearchButton-symbol",
    ForwardButton: "symbolFont ForwardButton-symbol",
    Mail: "symbolFont Mail-symbol",
    CheckedMail: "symbolFont CheckedMail-symbol",
    FailedMail: "symbolFont FailedMail-symbol",
    Phone: "symbolFont Phone-symbol",
    Chat: "symbolFont Chat-symbol",
    OpenPane: "symbolFont OpenPane-symbol",
    ClosePane: "symbolFont ClosePane-symbol",
    AddFriend: "symbolFont AddFriend-symbol",
    Arrow: "symbolFont Arrow-symbol",
    DropdownArrow: "symbolFont DropdownArrow-symbol",
    FlsLocked: "symbolFont FlsLocked-symbol",
    LinkArticle: "symbolFont LinkArticle-symbol",
    UnlinkArticle: "symbolFont UnlinkArticle-symbol",
    CopyLink: "symbolFont CopyLink-symbol",
    EmailLink: "symbolFont EmailLink-symbol",
    Share: "symbolFont Share-symbol",
    Assign: "symbolFont Assign-symbol",
    Connect: "symbolFont Connect-symbol",
    Opportunity: "symbolFont Opportunity-symbol",
    Appointment: "symbolFont Appointment-symbol",
    Task: "symbolFont Task-symbol",
    Case: "symbolFont Case-symbol",
    PhoneCallIncoming: "symbolFont PhoneCallIncoming-symbol",
    PhoneCallOutgoing: "symbolFont PhoneCallOutgoing-symbol",
    EmailIncoming: "symbolFont EmailIncoming-symbol",
    EmailOutgoing: "symbolFont EmailOutgoing-symbol",
    SendEmail: "symbolFont SendEmail-symbol",
    ApplyTemplate: "symbolFont ApplyTemplate-symbol",
    InsertKbArticle: "symbolFont InsertKbArticle-symbol",
    SendSelected: "symbolFont SendSelected-symbol",
    SaveAndClose: "symbolFont SaveAndClose-symbol",
    ReplyEmail: "symbolFont ReplyEmail-symbol",
    ReplyAllEmail: "symbolFont ReplyAllEmail-symbol",
    ForwardEmail: "symbolFont ForwardEmail-symbol",
    Close: "symbolFont Close-symbol",
    Activate: "symbolFont Activate-symbol",
    DeActivate: "symbolFont DeActivate-symbol",
    DeleteBulk: "symbolFont DeleteBulk-symbol",
    SocialActivityIncoming: "symbolFont SocialActivityIncoming-symbol",
    SocialActivityOutgoing: "symbolFont SocialActivityOutgoing-symbol",
    CustomActivity: "symbolFont CustomActivity-symbol",
    SystemPost: "symbolFont SystemPost-symbol",
    Convert: "symbolFont Convert-symbol",
    MarkAsWon: "symbolFont MarkAsWon-symbol",
    MarkAsLost: "symbolFont MarkAsLost-symbol",
    SetRegarding: "symbolFont SetRegarding-symbol",
    SaveAsComplete: "symbolFont SaveAsComplete-symbol",
    SwitchProcess: "symbolFont SwitchProcess-symbol",
    Recalculate: "symbolFont Recalculate-symbol",
    SendDirectEmail: "symbolFont SendDirectEmail-symbol",
    OpenMailbox: "symbolFont OpenMailbox-symbol",
    ReOpenOpportunity: "symbolFont ReOpenOpportunity-symbol",
    ReactivateLead: "symbolFont ReactivateLead-symbol",
    Disqualify: "symbolFont Disqualify-symbol",
    Qualify: "symbolFont Qualify-symbol",
    SelectView: "symbolFont SelectView-symbol",
    SelectChart: "symbolFont SelectChart-symbol",
    OpenInBrowser: "symbolFont OpenInBrowser-symbol",
    NewAppointment: "symbolFont NewAppointment-symbol",
    NewRecurringAppointment: "symbolFont NewRecurringAppointment-symbol",
    NewPhoneCall: "symbolFont NewPhoneCall-symbol",
    NewTask: "symbolFont NewTask-symbol",
    NewEmail: "symbolFont NewEmail-symbol",
    AddExisting: "symbolFont AddExisting-symbol",
    SaveAndEdit: "symbolFont SaveAndEdit-symbol",
    Default: "symbolFont Default-symbol",
    ScrollRight: "symbolFont ScrollRight-symbol",
    ScrollLeft: "symbolFont ScrollLeft-symbol",
    SaveAndRunRoutingRule: "symbolFont SaveAndRunRoutingRule-symbol",
    RunRoutingRule: "symbolFont RunRoutingRule-symbol",
    ResolveCase: "symbolFont ResolveCase-symbol",
    CancelCase: "symbolFont CancelCase-symbol",
    ReactivateCase: "symbolFont ReactivateCase-symbol",
    AddToQueue: "symbolFont AddToQueue-symbol",
    CreateChildCase: "symbolFont CreateChildCase-symbol",
    QueueItemRoute: "symbolFont QueueItemRoute-symbol",
    QueueItemRelease: "symbolFont QueueItemRelease-symbol",
    QueueItemRemove: "symbolFont QueueItemRemove-symbol",
    QueueItemPick: "symbolFont QueueItemPick-symbol",
    Drilldown: "symbolFont Drilldown-symbol",
    PopOverButton: "symbolFont PopOverButton-symbol",
    ExitButton: "symbolFont ExitButton-symbol",
    ExportToExcel: "symbolFont ExportToExcel-symbol",
    WordTemplates: "symbolFont WordTemplates-symbol",
    DocumentTemplates: "symbolFont DocumentTemplates-symbol",
    OpenInPowerBI: "symbolFont OpenInPowerBI-symbol",
    OpenPowerBIReport: "symbolFont OpenPowerBIReport-symbol",
    OpenDelve: "symbolFont OpenDelve-symbol",
    ArticleLink: "symbolFont ArticleLink-symbol",
    ArchiveArticle: "symbolFont ArchiveArticle-symbol",
    ApproveArticle: "symbolFont ApproveArticle-symbol",
    DiscardArticle: "symbolFont DiscardArticle-symbol",
    Minor: "symbolFont Minor-symbol",
    Major: "symbolFont Major-symbol",
    PublishKnowledgeArticle: "symbolFont PublishKnowledgeArticle-symbol",
    RelateArticle: "symbolFont RelateArticle-symbol",
    RelateProduct: "symbolFont RelateProduct-symbol",
    RestoreArticle: "symbolFont RestoreArticle-symbol",
    RevertToDraftArticle: "symbolFont RevertToDraftArticle-symbol",
    Translate: "symbolFont Translate-symbol",
    UpdateArticle: "symbolFont UpdateArticle-symbol",
    RemoveFilter: "symbolFont RemoveFilter-symbol",
    Article: "symbolFont Article-symbol",
    Graph: "symbolFont Graph-symbol",
    CSR: "symbolFont CSR-symbol",
    MembersIcon: "symbolFont MembersIcon-symbol",
    QueueIcon: "symbolFont QueueIcon-symbol",
    SiteMap: "symbolFont SiteMap-symbol",
    NormalPriority: "symbolFont NormalPriority-symbol",
    LowPriority: "symbolFont LowPriority-symbol",
    ViewIcon: "symbolFont ViewIcon-symbol",
    RecentCases: "symbolFont RecentCases-symbol",
    KBRecords: "symbolFont KBRecords-symbol",
    NumberOfViews: "symbolFont NumberOfViews-symbol",
    ResizeHandle: "symbolFont ResizeHandle-symbol",
    TaskBasedFlow: "symbolFont TaskBasedFlow-symbol",
    InformationIcon: "symbolFont InformationIcon-symbol",
    PencilIcon: "symbolFont PencilIcon-symbol",
    ErrorIcon: "symbolFont ErrorIcon-symbol",
    SuccessIcon: "symbolFont SuccessIcon-symbol",
    OptionsetIcon: "symbolFont OptionsetIcon-symbol",
    NotificationIcon: "symbolFont NotificationIcon-symbol",
    PanelHeaderImportDataIcon: "symbolFont PanelHeaderImportDataIcon-symbol",
    SidePanelUpload: "symbolFont SidePanelUpload-symbol",
    New: "symbolFont New-symbol",
    DetailsPageClose: "symbolFont DetailsPageClose-symbol",
    SettingsListIcon: "symbolFont SettingsListIcon-symbol",
    ListIcon: "symbolFont ListIcon-symbol",
    ForwardDisable: "symbolFont ForwardDisable-symbol",
    PdfIconFile: "symbolFont PdfIconFile-symbol",
    PresentationFile: "symbolFont PresentationFile-symbol",
    OneNoteFile: "symbolFont OneNoteFile-symbol",
    AccessFile: "symbolFont AccessFile-symbol",
    VisioFile: "symbolFont VisioFile-symbol",
    ProjectFile: "symbolFont ProjectFile-symbol",
    Plus: "symbolFont Plus-symbol",
    ChevronUp: "symbolFont ChevronUp-symbol",
    ChevronDown: "symbolFont ChevronDown-symbol",
    HappySmiley: "symbolFont HappySmiley-symbol",
    SadSmiley: "symbolFont SadSmiley-symbol",
    CaseResolution: "symbolFont CaseResolution-symbol",
    CampaignResolution: "symbolFont CampaignResolution-symbol",
    ServiceActivity: "symbolFont ServiceActivity-symbol",
    Notes: "symbolFont Notes-symbol",
    Audio: "symbolFont Audio-symbol",
    Camera: "symbolFont Camera-symbol",
    Video: "symbolFont Video-symbol",
    Image: "symbolFont Image-symbol",
    Html: "symbolFont Html-symbol",
    SharePointEditDocument: "symbolFont SharePointEditDocument-symbol",
    SharePointDeleteDocument: "symbolFont SharePointDeleteDocument-symbol",
    SharePointCheckoutDocument: "symbolFont SharePointCheckoutDocument-symbol",
    SharePointCheckinDocument: "symbolFont SharePointCheckinDocument-symbol",
    SharePointEditDocumentProperties: "symbolFont SharePointEditDocumentProperties-symbol",
    SharePointDiscardCheckoutDocument: "symbolFont SharePointDiscardCheckoutDocument-symbol",
    SharePointNewDocument: "symbolFont SharePointNewDocument-symbol",
    SharePointNewWordDocument: "symbolFont SharePointNewWordDocument-symbol",
    SharePointNewExcelDocument: "symbolFont SharePointNewExcelDocument-symbol",
    SharePointNewPowerPointDocument: "symbolFont SharePointNewPowerPointDocument-symbol",
    SharePointNewOneNoteDocument: "symbolFont SharePointNewOneNoteDocument-symbol",
    SharePointUploadDocument: "symbolFont SharePointUploadDocument-symbol",
    SharePointChangeLocation: "symbolFont SharePointChangeLocation-symbol",
    SharePointAddDocumentLocation: "symbolFont SharePointAddDocumentLocation-symbol",
    SharePointEditLocation: "symbolFont SharePointEditLocation-symbol",
    SharePointOpenLocation: "symbolFont SharePointOpenLocation-symbol",
    SharePointOpenDocument: "symbolFont SharePointOpenDocument-symbol",
    SendByEmail: "symbolFont SendByEmail-symbol",
    CreateQuote: "symbolFont CreateQuote-symbol",
    Reply: "symbolFont Reply-symbol",
    Warning: "symbolFont Warning-symbol",
    Play: "symbolFont Play-symbol",
    ExpandButton: "symbolFont ExpandButton-symbol",
    AssociatedArticle: "symbolFont AssociatedArticle-symbol",
    DisassociatedArticle: "symbolFont DisassociatedArticle-symbol",
    FormDesign: "symbolFont FormDesign-symbol",
    GlobalFilterClearAll: "symbolFont GlobalFilterClearAll-symbol",
    GlobalFilterExpandedRow: "symbolFont GlobalFilterExpandedRow-symbol",
    GlobalFilterCollapsedRow: "symbolFont GlobalFilterCollapsedRow-symbol",
    RelationshipAssistant: "symbolFont RelationshipAssistant-symbol",
    AutomaticSuggestions: "symbolFont AutomaticSuggestions-symbol",
    SemanticZoom: "symbolFont SemanticZoom-symbol",
    SemanticZoomMirrored: "symbolFont SemanticZoomMirrored-symbol",
    BackwardButton: "symbolFont BackwardButton-symbol",
    MultiSelect: "symbolFont MultiSelect-symbol",
    MultiSelectMirrored: "symbolFont MultiSelectMirrored-symbol",
    Spinning: "symbolFont Spinning-symbol",
    RetireProduct: "symbolFont RetireProduct-symbol",
    AddProduct: "symbolFont AddProduct-symbol",
    OfflineStatus: "symbolFont OfflineStatus-symbol",
    Abandon: "symbolFont Abandon-symbol",
    Reactivate: "symbolFont Reactivate-symbol",
    FinishStage: "symbolFont FinishStage-symbol",
    SortButton: "symbolFont SortButton-symbol",
    View: "symbolFont View-symbol",
    CreateView: "symbolFont CreateView-symbol",
    EditView: "symbolFont EditView-symbol",
    Flows: "symbolFont Flows-symbol",
    OpenEntityRecord: "symbolFont OpenEntityRecord-symbol",
    GuestUser: "symbolFont GuestUser-symbol",
    History: "symbolFont History-symbol",
    ReassignRecords: "symbolFont ReassignRecords-symbol",
    ManageRoles: "symbolFont ManageRoles-symbol",
    JoinTeams: "symbolFont JoinTeams-symbol",
    ChangeManager: "symbolFont ChangeManager-symbol",
    AddMembers: "symbolFont AddMembers-symbol",
    RemoveMembers: "symbolFont RemoveMembers-symbol",
    Download: "symbolFont Download-symbol",
    SetAsDefaultView: "symbolFont SetAsDefaultView-symbol",
    Pinned: "symbolFont Pinned-symbol",
    DistributionList: "symbolFont DistributionList-symbol",
    MergeRecords: "symbolFont MergeRecords-symbol",
    AssociateChildCase: "symbolFont AssociateChildCase-symbol",
    SetAsDefault: "symbolFont SetAsDefault-symbol",
    ConvertKnowledgeArticle: "symbolFont ConvertKnowledgeArticle-symbol",
    Messenger: "symbolFont Messenger-symbol",
    AssociateCategory: "symbolFont AssociateCategory-symbol",
    OfficeWaffle: "d365Shell OfficeWaffle-symbol",
    TripleColumn: "symbolFont TripleColumn-symbol",
    Tiles: "symbolFont Tiles-symbol",
    HideVisualFilter: "symbolFont HideVisualFilter-symbol",
    InteractiveDashboard: "symbolFont InteractiveDashboard-symbol",
    Dynamics365: "symbolFont Dynamics365-symbol",
    SalesLiterature: "symbolFont SalesLiterature-symbol",
    SelectButton: "symbolFont SelectButton-symbol",
    SelectButtonRTL: "symbolFont SelectButtonRTL-symbol",
    LockPricing: "symbolFont LockPricing-symbol",
    CreateInvoice: "symbolFont CreateInvoice-symbol",
    FulfillOrder: "symbolFont FulfillOrder-symbol",
    CancelInvoice: "symbolFont CancelInvoice-symbol",
    ActivateQuote: "symbolFont ActivateQuote-symbol",
    InvoicePaid: "symbolFont InvoicePaid-symbol",
    GetProducts: "symbolFont GetProducts-symbol",
    UnlockPricing: "symbolFont UnlockPricing-symbol",
    Checkbox: "symbolFont Checkbox-symbol",
    CheckboxComposite: "symbolFont CheckboxComposite-symbol",
    RightChevron: "symbolFont RightChevron-symbol",
    LeftChevron: "symbolFont LeftChevron-symbol",
    BackToStart: "symbolFont BackToStart-symbol",
    UntrackedEmail: "symbolFont UntrackedEmail-symbol",
    OpenEmail: "symbolFont OpenEmail-symbol",
    GlobalFilterCollapsedRowRTL: "symbolFont GlobalFilterCollapsedRowRTL-symbol",
    CancelOrder: "symbolFont CancelOrder-symbol",
    URL: "symbolFont URL-symbol",
    Ticker: "symbolFont Ticker-symbol",
    UseCurrentPricing: "symbolFont UseCurrentPricing-symbol",
    Process: "symbolFont Process-symbol",
    FirstPageButton: "symbolFont FirstPageButton-symbol",
    LinkedInLogo: "symbolFont LinkedInLogo-symbol",
    Health: "symbolFont Health-symbol",
    Family: "symbolFont Family-symbol",
    Sports: "symbolFont Sports-symbol",
    Entertainment: "symbolFont Entertainment-symbol",
    OOF: "symbolFont OOF-symbol",
    CarouselView: "symbolFont CarouselView-symbol",
    HeartEmpty: "symbolFont HeartEmpty-symbol",
    HeartFilled: "symbolFont HeartFilled-symbol",
    Follow: "symbolFont Follow-symbol",
    RunQuery: "symbolFont RunQuery-symbol",
    GroupAnd: "symbolFont GroupAnd-symbol",
    GroupOr: "symbolFont GroupOr-symbol",
    Ungroup: "symbolFont Ungroup-symbol",
    HideInSimpleMode: "symbolFont HideInSimpleMode-symbol",
    ShowInSimpleMode: "symbolFont ShowInSimpleMode-symbol",
    PinnedSolid: "symbolFont PinnedSolid-symbol",
    FilterSolid: "symbolFont FilterSolid-symbol",
    Bot: "symbolFont Bot-symbol",
    SystemDocumentTemplates: "symbolFont SystemDocumentTemplates-symbol",
    MyDocumentTemplates: "symbolFont MyDocumentTemplates-symbol",
    ViewAllMyDocumentTemplates: "symbolFont ViewAllMyDocumentTemplates-symbol",
    EnableSecurityRoles: "symbolFont EnableSecurityRoles-symbol",
    DocumentTemplateUpload: "symbolFont DocumentTemplateUpload-symbol",
    DocumentTemplateEdit: "symbolFont DocumentTemplateEdit-symbol",
    DocumentTemplateActivate: "symbolFont DocumentTemplateActivate-symbol",
    DocumentTemplateDeactivate: "symbolFont DocumentTemplateDeactivate-symbol",
    YammerIcon: "symbolFont YammerIcon-symbol",
    StopIcon: "symbolFont StopIcon-symbol",
    ReplaceContentIcon: "symbolFont ReplaceContentIcon-symbol",
    CloseDateComingSoon: "symbolFont CloseDateComingSoon-symbol",
    NearbyCustomers: "symbolFont NearbyCustomers-symbol",
    RelevantNews: "symbolFont RelevantNews-symbol",
    UpcomingMeeting: "symbolFont UpcomingMeeting-symbol",
    RecentMeeting: "symbolFont RecentMeeting-symbol",
    ReminderWithCall: "symbolFont ReminderWithCall-symbol",
    CardsTask: "symbolFont CardsTask-symbol",
    CardsQuote: "symbolFont CardsQuote-symbol",
    CardsOpportunity: "symbolFont CardsOpportunity-symbol",
    CardsInvoice: "symbolFont CardsInvoice-symbol",
    CardsDashboard: "symbolFont CardsDashboard-symbol",
    CardsLeads: "symbolFont CardsLeads-symbol",
    OpportunityNoActivity: "symbolFont OpportunityNoActivity-symbol",
    CaseNoActivity: "symbolFont CaseNoActivity-symbol",
    CompetitorMentioned: "symbolFont CompetitorMentioned-symbol",
    MeetingRequest: "symbolFont MeetingRequest-symbol",
    MissedCloseDate: "symbolFont MissedCloseDate-symbol",
    IssueDetection: "symbolFont IssueDetection-symbol",
    NoActivityWithAccount: "symbolFont NoActivityWithAccount-symbol",
    YesNo: "symbolFont YesNo-symbol",
    AgendaActivityServiceAppointment: "symbolFont AgendaActivityServiceAppointment-symbol",
    AgendaActivityFax: "symbolFont AgendaActivityFax-symbol",
    UpcomingFlight: "symbolFont UpcomingFlight-symbol",
    OpportunityAtRiskSentiment: "symbolFont OpportunityAtRiskSentiment-symbol",
    IconDue: "symbolFont IconDue-symbol",
    AddProductFamily: "symbolFont AddProductFamily-symbol",
    AddProductBundle: "symbolFont AddProductBundle-symbol",
    ProductPublish: "symbolFont ProductPublish-symbol",
    CloneProduct: "symbolFont CloneProduct-symbol",
    CloseGoal: "symbolFont CloseGoal-symbol",
    AlignWithFiscalPeriod: "symbolFont AlignWithFiscalPeriod-symbol",
    Connection: "symbolFont Connection-symbol",
    ConnectionToMe: "symbolFont ConnectionToMe-symbol",
    ConnectionToOther: "symbolFont ConnectionToOther-symbol",
    ProductUpsell: "symbolFont ProductUpsell-symbol",
    SubscriptionAdd: "symbolFont SubscriptionAdd-symbol",
    RefreshDevice: "symbolFont RefreshDevice-symbol",
    BulletListRemove: "symbolFont BulletListRemove-symbol",
    BulletListAdd: "symbolFont BulletListAdd-symbol",
    BulletListDownArrow: "symbolFont BulletListDownArrow-symbol",
    ScatterChart: "symbolFont ScatterChart-symbol",
    BarChartHorizontal: "symbolFont BarChartHorizontal-symbol",
    BarChartVertical: "symbolFont BarChartVertical-symbol",
    FunnelChart: "symbolFont FunnelChart-symbol",
    PieDouble: "symbolFont PieDouble-symbol",
    People: "symbolFont People-symbol",
    PeopleBlock: "symbolFont PeopleBlock-symbol",
    CreateQuickCampaign: "symbolFont CreateQuickCampaign-symbol",
    PageSolid: "symbolFont PageSolid-symbol",
    Page: "symbolFont Page-symbol",
    OpportunitiesList: "symbolFont OpportunitiesList-symbol",
    BrowseCards: "symbolFont BrowseCards-symbol",
    AALinkedInLogo: "symbolFont AALinkedInLogo-symbol",
    SendAndClose: "symbolFont SendAndClose-symbol",
    AdvFind: "symbolFont AdvFind-symbol",
    DoubleChevronLeft: "symbolFont DoubleChevronLeft-symbol",
    DoubleChevronRight: "symbolFont DoubleChevronRight-symbol",
    AreaChart: "symbolFont AreaChart-symbol",
    DonutChart: "symbolFont DonutChart-symbol",
    TagChart: "symbolFont TagChart-symbol",
    Teaser: "symbolFont Teaser-symbol",
    Clone: "symbolFont Clone-symbol",
    AreaChartMirrored: "symbolFont AreaChartMirrored-symbol",
    BarChartHorizontalMirrored: "symbolFont BarChartHorizontalMirrored-symbol",
    BarChartVerticalMirrored: "symbolFont BarChartVerticalMirrored-symbol",
    Recent: "symbolFont Recent-symbol",
    SharePointIcon: "symbolFont SharePointIcon-symbol",
    OneDriveIcon: "symbolFont OneDriveIcon-symbol",
    FolderSharedIcon: "symbolFont FolderSharedIcon-symbol",
    MSTeamsIcon: "symbolFont MSTeamsIcon-symbol",
    ScrollUpDown: "symbolFont AreaSwitcher-symbol",
    SendToCTI: "symbolFont SendToCTI-symbol",
    Letter: "symbolFont Letter-symbol",
    Fax: "symbolFont Fax-symbol",
    NewLetter: "symbolFont NewLetter-symbol",
    NewFax: "symbolFont NewFax-symbol",
    LetterIncoming: "symbolFont LetterIncoming-symbol",
    LetterOutgoing: "symbolFont LetterOutgoing-symbol",
    FaxIncoming: "symbolFont FaxIncoming-symbol",
    FaxOutgoing: "symbolFont FaxOutgoing-symbol",
    CreatePersonalView: "symbolFont CreatePersonalView-symbol",
    SaveFilterToCurrentPersonalView: "symbolFont SaveFilterToCurrentPersonalView-symbol",
    SaveFilterToNewPersonalView: "symbolFont SaveFilterToNewPersonalView-symbol",
    ViewHierarchy: "symbolFont ViewHierarchy-symbol",
    ProductPreview: "symbolFont ProductPreview-symbol",
    AddTerritoryMember: "symbolFont AddTerritoryMember-symbol",
    RemoveTerritoryMember: "symbolFont RemoveTerritoryMember-symbol",
    Report: "symbolFont Report-symbol",
    NewServiceActivity: "symbolFont NewServiceActivity-symbol",
    Recurrence: "symbolFont Recurrence-symbol",
    EditSeries: "symbolFont EditSeries-symbol",
    EndSeries: "symbolFont EndSeries-symbol",
    EditDefaultFilter: "symbolFont EditDefaultFilter-symbol",
    QueueItemDetail: "symbolFont QueueItemPick-symbol",
    ThumbsUp: "symbolFont ThumbsUp-symbol",
    ThumbsDown: "symbolFont ThumbsDown-symbol",
    Lead: "symbolFont Lead-symbol",
    TableLink: "symbolFont TableLink-symbol",
    TableGroup: "symbolFont TableGroup-symbol",
    ClearDefault: "symbolFont ClearDefault-symbol",
    SetDefault: "symbolFont SetDefault-symbol",
    Expand: "symbolFont Expand-symbol",
    ChromeMinimize: "symbolFont ChromeMinimize-symbol",
    ChromeMaximize: "symbolFont ChromeMaximize-symbol",
};
function getSymbolMapping(type) {
    return MicrosoftIconSymbolMapping[MicrosoftIconSymbol[type]];
}
exports.getSymbolMapping = getSymbolMapping;

},{}],12:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var IFlexboxContainerStyle_1 = require("./IFlexboxContainerStyle");
var ComponentBase_1 = require("./ComponentBase");
var AttributeName = require("../Supplementary/Accessibility/Attributes/AttributeName");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * A clickable Button control.
 */
var InnerButton = /** @class */ (function (_super) {
    __extends(InnerButton, _super);
    function InnerButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerButton.prototype.getElementName = function () {
        return "button";
    };
    /**
     * Returns the specific element props.
     */
    InnerButton.prototype.getElementProps = function () {
        var props = {
            type: "button",
        };
        props[AttributeName.ACCESS_KEY] = this.props.accessKey;
        if (this.props.disabled) {
            props[AttributeName.DISABLED] = true;
        }
        return props;
    };
    /**
     * Returns the class name for the underlying element.
     */
    InnerButton.prototype.getElementClassName = function () {
        var className = _super.prototype.getElementClassName.call(this);
        if (this.props && this.props.className) {
            className += " " + this.props.className;
        }
        return className;
    };
    /**
     * Returns the class name for the underlying element.
     * @param style the style to be applied to the underlying component, used for readout here.
     */
    InnerButton.prototype.getFlexClassName = function (style) {
        return IFlexboxContainerStyle_1.getCssClassName(style ? style.display : null);
    };
    /**
     * Returns the specific style for the underlying element.
     */
    InnerButton.prototype.getElementStyle = function () {
        if (this.props.style) {
            return Object.assign({}, IFlexboxContainerStyle_1.applyIFlexboxContainerProp(this.props.style));
        }
    };
    /**
     * Display name for React dev tools
     */
    InnerButton.displayName = "Button";
    return InnerButton;
}(ComponentBase_1.ComponentBase));
exports.InnerButton = InnerButton;
var Button = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerButton);
exports.Button = Button;

},{"../Supplementary/Accessibility/Attributes/AttributeName":57,"./ComponentBase":15,"./FelaConnectHelper":17,"./IFlexboxContainerStyle":25,"react-fela":undefined}],13:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");
var AttributeName = require("../Supplementary/Accessibility/Attributes/AttributeName");
var AccessibilityRole = require("../Supplementary/Accessibility/Attributes/Role");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * Checkvox component
 */
var InnerCheckbox = /** @class */ (function (_super) {
    __extends(InnerCheckbox, _super);
    function InnerCheckbox(props) {
        var _this = _super.call(this, props) || this;
        _this._onCheckboxChange = _this._onCheckboxChange.bind(_this);
        return _this;
    }
    /**
     * Handler for onChange event of checkbox element
     * @param e
     * @private
     */
    InnerCheckbox.prototype._onCheckboxChange = function (e) {
        var checkboxValue = e.target.checked;
        this.props.onChange(checkboxValue);
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerCheckbox.prototype.getElementName = function () {
        return "input";
    };
    /**
     * Returns the specific element props.
     */
    InnerCheckbox.prototype.getElementProps = function () {
        var _a;
        var props = (_a = {
                tabIndex: this.props.tabIndex ? this.props.tabIndex : 0,
                disabled: this.props.disabled,
                key: this.props.key,
                id: this.props.id ? this.props.id : this.props.key,
                onChange: this._onCheckboxChange,
                role: this.props.accessibilityRole ? this.props.accessibilityRole : AccessibilityRole.CHECKBOX,
                type: "checkbox",
                name: this.props.name ? this.props.name : null
            },
            _a[AttributeName.ARIA_CHECKED] = this.props.checked,
            _a.checked = this.props.checked,
            _a.testhooks = this.props.testhooks,
            _a);
        return props;
    };
    /**
     * Component name for React Dev Tools
     */
    InnerCheckbox.displayName = "Checkbox";
    return InnerCheckbox;
}(ComponentBase_1.ComponentBase));
var Checkbox = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerCheckbox);
exports.Checkbox = Checkbox;

},{"../Supplementary/Accessibility/Attributes/AttributeName":57,"../Supplementary/Accessibility/Attributes/Role":58,"./ComponentBase":15,"./FelaConnectHelper":17,"react-fela":undefined}],14:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/* tslint:disable:crm-prohibit-standard-react-element */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });



var GuidHelper_1 = require("../../CustomControls/Utilities/GuidHelper");
var roles = require("../Supplementary/Accessibility/Attributes/Role");
var KeyCode_1 = require("../Supplementary/Accessibility/KeyCode");
var ComponentBase_1 = require("./ComponentBase");
var FelaConnectHelper_1 = require("./FelaConnectHelper");
var Flyout_1 = require("./Flyout");
var List_1 = require("./List");
var ListItem_1 = require("./ListItem");
var ScrollView_1 = require("./ScrollView");
var Text_1 = require("./Text");
var TextInput_1 = require("./TextInput");
var View_1 = require("./View");
/**
 * Component representing an combobox base control
 */
var InnerComboBox = /** @class */ (function (_super) {
    __extends(InnerComboBox, _super);
    function InnerComboBox(props, context) {
        var _this = _super.call(this, props, context) || this;
        /**
         * Whether this combobx has already attempted a focus on an inner requested element
         */
        _this._wasInnerFocusRequested = false;
        /**
         *  boolean to track if the mouse click was outsode the flyout
        .*. Need for IE 11 as scroll bar click triggers OnBlur event
         */
        _this.clickedOutside = false;
        /**
         *  boolean to track if the mouse click was outsode the flyout
        .*. Need for IE 11 as scroll bar click triggers OnBlur event
         */
        _this.keyboardScrolling = false;
        _this.setFocusToItem = function (elementId) {
            if (_this.props.freeTextMode && _this.state.hasFocus) {
                return;
            }
            if (!elementId || elementId === null) {
                return;
            }
            var element = document.getElementById(elementId);
            if (!element || element === null) {
                return;
            }
            element.focus();
        };
        _this.keyboardNavigation = function (event) {
            if (InnerComboBox.supportedKeys.indexOf(event.keyCode) === -1) {
                return;
            }
            switch (event.keyCode) {
                case KeyCode_1.KeyCode.UpArrow:
                    _this._handleMove(-1);
                    break;
                case KeyCode_1.KeyCode.DownArrow:
                    _this._handleMove(1);
                    break;
                case KeyCode_1.KeyCode.PageUp:
                    _this._handleMove(-1 * _this.getPageSize());
                    break;
                case KeyCode_1.KeyCode.PageDown:
                    _this._handleMove(1 * _this.getPageSize());
                    break;
                case KeyCode_1.KeyCode.Enter:
                    _this.handleEnterKey(event);
                    break;
                case KeyCode_1.KeyCode.Space:
                    if (!_this.props.freeTextMode) {
                        _this.handleEnterKey(event);
                    }
                    break;
                case KeyCode_1.KeyCode.Escape:
                    _this.setIsExpanded(false);
                    break;
                case KeyCode_1.KeyCode.Tab:
                    _this.handleTabKey(event);
                    break;
            }
            event.preventDefault();
            event.stopPropagation();
        };
        _this._handleMove = _this._handleMove.bind(_this);
        _this._handleButtonClick = _this._handleButtonClick.bind(_this);
        _this._handleTextInputChange = _this._handleTextInputChange.bind(_this);
        _this._saveTextInputRef = _this._saveTextInputRef.bind(_this);
        _this.saveContainerRef = _this.saveContainerRef.bind(_this);
        _this.saveItemRef = _this.saveItemRef.bind(_this);
        _this.saveTextRef = _this.saveTextRef.bind(_this);
        _this.handleValueChange = _this.handleValueChange.bind(_this);
        _this.handleItemSelected = _this.handleItemSelected.bind(_this);
        _this.handleItemPointerDown = _this.handleItemPointerDown.bind(_this);
        _this.handleItemHover = _this.handleItemHover.bind(_this);
        _this.handleTextPointerDown = _this.handleTextPointerDown.bind(_this);
        _this.handleBlur = _this.handleBlur.bind(_this);
        _this.handleEnterKey = _this.handleEnterKey.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this.handleKeyboardExpandRequest = _this.handleKeyboardExpandRequest.bind(_this);
        _this.handleFlyoutOutsideClick = _this.handleFlyoutOutsideClick.bind(_this);
        _this.handleInnerControlFocus = _this.handleInnerControlFocus.bind(_this);
        _this.handleInnerControlBlur = _this.handleInnerControlBlur.bind(_this);
        _this.handleRelativeToElementSelector = _this.handleRelativeToElementSelector.bind(_this);
        var visibleOptions = _this.getVisibleOptions();
        var initialOption = _this._getInitialStateOption(props);
        _this.keyboardScrolling = false;
        _this._internalIdAppendix = props.hideInternalId ? undefined : GuidHelper_1.guidV4String();
        _this.selectedIndex = visibleOptions.indexOf(initialOption);
        _this.state = {
            option: initialOption,
            isExpanded: false,
            freeTextValue: props && props.freeTextMode ? props.value || props.defaultValue : initialOption && initialOption.text,
            isAutoCompleting: false,
        };
        return _this;
    }
    Object.defineProperty(InnerComboBox.prototype, "focusableControlId", {
        get: function () {
            return this.getInternalId() + "_text" + (this.props.freeTextMode ? "Input" : "");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the unique ID for the internal container.
     * @param sourceId the initial ID of the component set by the consumer.
     * @param internalIdAppendix the appendix to the ID that makes it unique
     */
    InnerComboBox.prototype.getInternalId = function (sourceId, internalIdAppendix) {
        if (sourceId === void 0) { sourceId = this.props.id; }
        if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
        return sourceId + (internalIdAppendix ? "_" + internalIdAppendix : "");
    };
    /**
     * Returns the ID for the internal List component.
     * @param sourceId the initial ID of the component set by the consumer.
     * @param internalIdAppendix the appendix to the ID that makes it unique
     */
    InnerComboBox.prototype.getListId = function (sourceId, internalIdAppendix) {
        if (sourceId === void 0) { sourceId = this.props.id; }
        if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
        return this.getInternalId(sourceId, internalIdAppendix) + "_list";
    };
    Object.defineProperty(InnerComboBox.prototype, "getEmptyListId", {
        /**
         * Returns the ID for the internal empty List component.
         */
        get: function () {
            return this.getListId() + "_empty";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the ID of a list-item DOM element.
     * @param option
     */
    InnerComboBox.prototype.getListItemId = function (option) {
        return this.getListId() + (option ? option.id || option.value : "");
    };
    /**
     * Returns the ID for the internal Flyout component.
     * @param sourceId the initial ID of the component set by the consumer.
     * @param internalIdAppendix the appendix to the ID that makes it unique
     */
    InnerComboBox.prototype.getFlyoutId = function (sourceId, internalIdAppendix) {
        if (sourceId === void 0) { sourceId = this.props.id; }
        if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
        return this.getInternalId(sourceId, internalIdAppendix) + "_flyout";
    };
    /**
     * Returns the unique ID for the Button component.
     * @param sourceId the initial ID of the component set by the consumer.
     * @param internalIdAppendix the appendix to the ID that makes it unique
     */
    InnerComboBox.prototype.getButtonId = function (sourceId, internalIdAppendix) {
        if (sourceId === void 0) { sourceId = this.props.id; }
        if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
        return this.getInternalId(sourceId, internalIdAppendix) + "_button";
    };
    /**
     * Specifies the call back for handling onScroll event of the flyout.
     */
    InnerComboBox.prototype.onFlyoutScroll = function () {
        // This is not exposed to outside as a public prop for now. It can only be overriden in descendants.
    };
    /**
     * Returns the ID of the currently selected active list item.
     */
    InnerComboBox.prototype.getActiveDescendantId = function () {
        if (~this.selectedIndex) {
            var currentOption = this.getVisibleOptions()[this.selectedIndex];
            if (currentOption) {
                return this.getListItemId(currentOption);
            }
        }
        return "";
    };
    /**
     * Returns the current drop-down size.
     */
    InnerComboBox.prototype.getPageSize = function () {
        return this.props.pageSize || InnerComboBox.DEFAULT_PAGE_SIZE;
    };
    /**
     * Returns options that should be selected after initialization
     * @param props - ComboBox props
     */
    InnerComboBox.prototype._getInitialStateOption = function (props) {
        var option = props.defaultValue
            ? this.getOptionByValue(props.options, props.defaultValue)
            : this.getOptionByValue(props.options, props.value);
        if (!option && props.options && props.options.length > 0 && !props.freeTextMode) {
            option = props.options[0];
        }
        return option;
    };
    /**
     * Returns IComboBoxOption from options collection by value
     * Returns undefined if there are two or more options with same value
     * @param options - options collection
     * @param value - value to search
     */
    InnerComboBox.prototype.getOptionByValue = function (options, value) {
        if (options) {
            var filteredOpts = options.filter(function (op) { return op.value === value; });
            if (filteredOpts.length > 0) {
                return filteredOpts[0];
            }
        }
        return undefined;
    };
    /**
     * Invoked when the component receiving new props
     * @param nextProps
     */
    InnerComboBox.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps && !nextProps.defaultValue) {
            // if we got here, it means the controlled approach used,
            // thus we should update the control value based on the new props
            if (nextProps.value !== this.props.value) {
                var stateNew = void 0;
                if (nextProps.freeTextMode) {
                    stateNew = {
                        freeTextValue: (this.state.hasFocus && this.state.freeTextValue) || nextProps.value,
                        freeTextOptionDisplayValue: (this.state.hasFocus && this.state.freeTextValue) || nextProps.value,
                    };
                }
                else {
                    var option = this.getOptionByValue(nextProps.options, nextProps.value);
                    this.selectedIndex = nextProps.options && nextProps.options.indexOf(option);
                    stateNew = {
                        option: option,
                        freeTextValue: option && option.text,
                        freeTextOptionDisplayValue: option && option.text,
                    };
                }
                this.setState(stateNew);
            }
        }
        // This code should fire up for uncontrolled approach only
        // and it should cover the case when the options were not
        // available to the control from the very beginning.
        // Perhaps the whole approach needs revisiting, but this code
        // is currently here to cover some real-life situations.
        if (nextProps &&
            nextProps.defaultValue &&
            (!this.state.option || !this.state.option.value) &&
            nextProps.options !== this.props.options) {
            if (!nextProps.freeTextMode) {
                var option = this.getOptionByValue(nextProps.options, nextProps.defaultValue);
                this.selectedIndex = nextProps.options && nextProps.options.indexOf(option);
                var stateNew = { option: option, freeTextValue: option && option.text };
                this.setState(stateNew);
            }
        }
    };
    /**
     * Returns true if the given value differs from the current one.
     */
    InnerComboBox.prototype._getIfValueChanged = function (valueNew) {
        var hasChanged = false;
        if (this.props.freeTextMode) {
            hasChanged = valueNew !== this.state.freeTextValue;
        }
        else {
            hasChanged = valueNew !== this.getSelectedOptionValue();
        }
        return hasChanged;
    };
    /**
     * Returns the specific element props.
     */
    InnerComboBox.prototype.getElementProps = function () {
        var props = {
            name: this.props.name,
        };
        return props;
    };
    /**
     * Returns the children of the element.
     */
    InnerComboBox.prototype.getElementChildren = function () {
        return undefined;
    };
    /**
     * A shorthand for setting the expanded state.
     * @param isExpanded
     */
    InnerComboBox.prototype.setIsExpanded = function (isExpanded) {
        if (isExpanded) {
            this._updateContainerWidth();
            this._wasInnerFocusRequested = false;
        }
        else {
            if (!this._wasInnerFocusRequested) {
                this.setFocusToItem(this.focusableControlId);
                this._wasInnerFocusRequested = true;
            }
        }
        if (!this.state.isExpanded) {
            //This is not to scroll based on keyboard interaction
            this.keyboardScrolling = false;
        }
        this.setState({ isExpanded: isExpanded });
    };
    /**
     * A shorthand for toggling the expanded state.
     */
    InnerComboBox.prototype._toggleIsExpanded = function () {
        this.setIsExpanded(!this.state.isExpanded);
    };
    /**
     * Sets the focus to the control.
     */
    InnerComboBox.prototype.setFocus = function () {
        if (this.props.freeTextMode) {
            if (this._textInput) {
                var textInputDom = ReactDOM.findDOMNode(this._textInput);
                textInputDom && textInputDom.focus();
            }
        }
        else {
            if (this._text) {
                var textDom = ReactDOM.findDOMNode(this._text);
                textDom && textDom.focus();
            }
        }
    };
    /**
     * Resets the selected index to the one that corresponds to the current value.
     */
    InnerComboBox.prototype._resetSelectedIndex = function () {
        if (this.props.defaultValue) {
            // The uncontrolled approach is used, thus state has the priority.
            var stateValue = this.getSelectedOptionValue();
            var option = this.getOptionByValue(this.props.options, stateValue);
            this.selectedIndex = this.getVisibleOptions().indexOf(option);
        }
        else {
            // The controlled approach is used, thus the props have the priority.
            var defaultSelectedValue = this.props.value || this.props.options[0].value;
            var value = this.props.freeTextMode ? this.state.freeTextValue || defaultSelectedValue : defaultSelectedValue;
            var option = this.getOptionByValue(this.props.options, value);
            this.selectedIndex = this.getVisibleOptions().indexOf(option);
        }
    };
    /**
     * Sets the current control values and state in accordance to the given value.
     */
    InnerComboBox.prototype.setCurrentItemByValue = function (value, changeValue) {
        if (changeValue === void 0) { changeValue = true; }
        var option = this.getOptionByValue(this.props.options, value);
        var stateNew = {
            freeTextOptionDisplayValue: option && option.text,
        };
        if (option && this.props.onOptionSelected) {
            this.props.onOptionSelected(option);
        }
        this.selectedIndex = this.getVisibleOptions().indexOf(option);
        this.setState(stateNew);
        if (changeValue) {
            this.handleValueChange(option && option.value);
            this.setState({
                freeTextValue: option && option.text,
                option: option,
            });
        }
    };
    /**
     * Sets the current control values and state in accordance to the given item index.
     */
    InnerComboBox.prototype._setCurrentItemByVisibleIndex = function (index, changeValue) {
        if (changeValue === void 0) { changeValue = true; }
        var options = this.getVisibleOptions();
        if (~index && index < options.length) {
            this.setCurrentItemByValue(options[index].value, changeValue);
        }
    };
    InnerComboBox.prototype.handleKeyDown = function (event) {
        if (InnerComboBox.supportedKeys.indexOf(event.keyCode) === -1) {
            return;
        }
        switch (event.keyCode) {
            case KeyCode_1.KeyCode.UpArrow:
                event.altKey ? this.setIsExpanded(false) : this.handleArrowUp(-1);
                break;
            case KeyCode_1.KeyCode.DownArrow:
                event.altKey ? this.handleKeyboardExpandRequest() : this.handleArrowDown(event, 1);
                break;
            case KeyCode_1.KeyCode.Enter:
                this.handleEnterKey(event);
                break;
            case KeyCode_1.KeyCode.Space:
                if (!this.props.freeTextMode) {
                    this.handleEnterKey(event);
                }
                break;
            case KeyCode_1.KeyCode.Escape:
                this.setIsExpanded(false);
                break;
            case KeyCode_1.KeyCode.Tab:
                this.handleTabKey(event);
                break;
        }
    };
    /**
     * Returns the array of items which are currently visible and selectable via the drop-down.
     */
    InnerComboBox.prototype.getVisibleOptions = function (state, options) {
        if (state === void 0) { state = this.state; }
        if (options === void 0) { options = this.props.options; }
        if (options) {
            if (state && state.isAutoCompleting && state.freeTextValue) {
                options = options.filter(function (x) { return x.text && x.text.toLocaleUpperCase().startsWith(state.freeTextValue.toLocaleUpperCase()); });
            }
        }
        return options;
    };
    /**
     * Returns an array of items with text that is the exact match to the given one.
     */
    InnerComboBox.prototype._searchOptions = function (text) {
        return this.props.options.filter(function (x) { return x.text && x.text === text; });
    };
    /**
     * Reacts on the container instance creation.
     */
    InnerComboBox.prototype.saveContainerRef = function (ref) {
        this._container = ref;
        this._updateContainerWidth();
    };
    /**
     * Handles the event of mounting a list-item within the dropdown.
     * @param component list item mounted
     */
    InnerComboBox.prototype.saveItemRef = function (item) {
        if (item && item.props && item.props.isSelected) {
            this.selectedListItem = item;
        }
    };
    /**
     * Saves the instance of the internal Text Input.
     */
    InnerComboBox.prototype._saveTextInputRef = function (ref) {
        this._textInput = ref;
    };
    /**
     * Saves the instance of the internal Text readable element.
     */
    InnerComboBox.prototype.saveTextRef = function (ref) {
        this._text = ref;
    };
    /**
     * Updates the cached width of the container.
     */
    InnerComboBox.prototype._updateContainerWidth = function () {
        var containerDom = this._container && ReactDOM.findDOMNode(this._container);
        this._containerWidth = containerDom && containerDom.offsetWidth;
    };
    /**
     * ComboBox.onChange event handler
     * @param e Synthetic React event
     */
    InnerComboBox.prototype.handleValueChange = function (valueNew) {
        if (this.props.onChange) {
            this.props.onChange(valueNew);
        }
    };
    /**
     * Handles the event of selecting an item in a drop-down.
     * @param item the item being selected
     */
    InnerComboBox.prototype.handleItemSelected = function (item) {
        this.selectedListItem = item;
    };
    /**
     * Invoked on a drop-down item click.
     */
    InnerComboBox.prototype.handleItemPointerDown = function (e) {
        if (e.button === 0) {
            var listItem = e.currentTarget;
            var value = listItem.dataset.value;
            this.setCurrentItemByValue(value);
            this.setState({ isAutoCompleting: false, isExpanded: false });
        }
    };
    /**
     * Invoked on mouse hover over a drop-down item.
     * @param e
     */
    InnerComboBox.prototype.handleItemHover = function (e) {
        var listItem = e.currentTarget;
        var value = listItem.dataset.value;
        var option = this.getOptionByValue(this.props.options, value ? value : "");
        this.selectedIndex = this.getVisibleOptions().indexOf(option);
    };
    /**
     * Invoked when user changes the content of the text input.
     */
    InnerComboBox.prototype._handleTextInputChange = function (valueNew) {
        var stateNew = {
            freeTextValue: valueNew,
            freeTextOptionDisplayValue: null,
            isAutoCompleting: true,
            option: null,
        };
        this._resetSelectedIndex();
        if (valueNew || valueNew === "") {
            var applicableOptions = this._searchOptions(valueNew);
            stateNew.option = applicableOptions.length ? applicableOptions[0] : undefined;
        }
        stateNew.isExpanded = !!this.getVisibleOptions(stateNew).length;
        if (this._getIfValueChanged(valueNew)) {
            this.setState(stateNew);
            if (!this.props.suppressFreeTextChangeCallback) {
                this.handleValueChange(stateNew.freeTextValue);
            }
        }
        // reset the selected list item
        this._resetSelectedListItem();
    };
    /**
     * Invoked when user clicks the readonly text control in the main area.
     */
    InnerComboBox.prototype.handleTextPointerDown = function (e) {
        if (e.button === 0) {
            this.props.freeTextMode && this.setFocus();
            this._toggleIsExpanded();
        }
    };
    /**
     * Invoked when user clicks the drop-button in the main area.
     * @param e
     */
    InnerComboBox.prototype._handleButtonClick = function (e) {
        if (e.button === 0) {
            this._resetSelectedIndex();
            this.setState({ isAutoCompleting: false });
            if (this.state.isExpanded) {
                this.setFocusToItem(this.getButtonId());
                this._wasInnerFocusRequested = true;
            }
            this._toggleIsExpanded();
        }
    };
    /**
     * Handle arrow up key
     * @param amount pages
     */
    InnerComboBox.prototype.handleArrowUp = function (amount) {
        this._handleMove(amount);
    };
    /**
     * Handle arrow down key
     * @param _e The keyboard event
     * @param amount pages
     */
    InnerComboBox.prototype.handleArrowDown = function (_e, amount) {
        this._handleMove(amount);
    };
    InnerComboBox.prototype._handleMove = function (amount) {
        //Toggle the status of whether scrollView needs to scroll based on keyboard interaction
        this.keyboardScrolling = true;
        var visibleOptions = this.getVisibleOptions();
        // using modulo not remainder to make bounding easier
        function mod(x, m) {
            // For x > 0, x%m is enough.
            // For x < 0 , we need special handling like below which works for the x > 0 case as well.
            return ((x % m) + m) % m;
        }
        var selectedIndexNew = mod(this.selectedIndex + amount, visibleOptions.length);
        this._setCurrentItemByVisibleIndex(selectedIndexNew, !!this.props.freeTextMode); // don't change the props bag unless freetype is specified
        this.setFocusToItem(this.getListItemId(visibleOptions[selectedIndexNew]));
    };
    /**
     * set focus to item
     * @param elementId
     */
    InnerComboBox.prototype.selectItem = function (elementId) {
        !this.props.freeTextMode && this.setFocusToItem(elementId);
    };
    /**
     * TextInput.onBlur event handler
     * @param e Synthetic React event
     */
    InnerComboBox.prototype.handleBlur = function (e) {
        if (this.clickedOutside) {
            this.clickedOutside = false;
            this.setIsExpanded(false);
            this.props.freeTextMode && this.setFocus();
            this.props.onBlur && this.props.onBlur(e);
        }
    };
    /**
     * Invoked when user presses the Enter key.
     */
    InnerComboBox.prototype.handleEnterKey = function (e) {
        if (!this.state.isExpanded) {
            this.handleKeyboardExpandRequest();
            e.stopPropagation();
            e.preventDefault();
            return;
        }
        if (this.selectedIndex > -1) {
            var options = this.getVisibleOptions();
            this.setState({
                isAutoCompleting: false,
                isExpanded: false,
                option: options[this.selectedIndex],
                freeTextValue: this.props.freeTextMode ? options[this.selectedIndex].text : null,
                freeTextOptionDisplayValue: this.props.freeTextMode ? options[this.selectedIndex].text : null,
            });
            this.setFocus();
            this.handleValueChange(options[this.selectedIndex].value);
        }
    };
    InnerComboBox.prototype.handleTabKey = function (e) {
        // once the cbox is open simply trap tabbing (press escape to close cbox)
        if (this.state.isExpanded) {
            e.stopPropagation();
            e.preventDefault();
        }
    };
    /**
     * Invoked when user requests expanding the drop-down with the keyboard.
     */
    InnerComboBox.prototype.handleKeyboardExpandRequest = function () {
        if (!this.state.isExpanded) {
            this._resetSelectedIndex();
            this.setIsExpanded(true);
        }
        else {
            this.setState({ isAutoCompleting: false });
        }
    };
    /**
     * Handles the event of a click outside a flyout.
     */
    InnerComboBox.prototype.handleFlyoutOutsideClick = function (e) {
        var targetElement = e.target;
        // collapse dropdown if click is outside combobox flyout.
        // If click is outside combobox but on dropdown button then let dropdown button click handle the flyout collapse
        if (targetElement.id !== this.getButtonId()) {
            this.setIsExpanded(false);
        }
        this.setFocus();
        this.clickedOutside = true;
    };
    /**
     * Invoked when the control receives focus.
     */
    InnerComboBox.prototype.handleInnerControlFocus = function () {
        this.setState({ hasFocus: true });
        // IE doesn't support outline-offset, so we'll add a border instead
        if (this.isIE) {
            var element = document.getElementById(this.focusableControlId);
            if (!element || element === null) {
                return;
            }
            element.setAttribute("style", "border: 1px dotted;");
        }
    };
    /**
     * Invoked when the control loses focus.
     */
    InnerComboBox.prototype.handleInnerControlBlur = function () {
        this._resetSelectedIndex();
        this.setState({ hasFocus: false });
        // IE doesn't support outline-offset, so we need to remove that border we added
        if (this.isIE) {
            var element = document.getElementById(this.focusableControlId);
            if (!element || element === null) {
                return;
            }
            element.setAttribute("style", "null");
        }
    };
    InnerComboBox.prototype._resetSelectedListItem = function () {
        this.selectedListItem = undefined;
        if (this.props.onOptionSelected) {
            this.props.onOptionSelected(null);
        }
    };
    /**
     * A helper selector used to get the proper container for the flyout to be
     * relative to.
     */
    InnerComboBox.prototype.handleRelativeToElementSelector = function (element) {
        return element.parentElement;
    };
    /**
     * Performs options props array to React.Component mapping
     * @param optionsProps options props array
     */
    InnerComboBox.prototype.renderOptionsList = function (options) {
        var _this = this;
        if (options) {
            if (options.length) {
                var selectedStyle_1 = this.props.selectedItemStyle || InnerComboBox.getSelectedItemStyle();
                var optionsRendered = options.map(function (option, i) {
                    var itemId = _this.getListItemId(option);
                    return (React.createElement(ListItem_1.ListItem, { key: i, id: itemId, tabIndex: 0, role: roles.OPTION, dataText: option.text, dataValue: option.value, onSelected: _this.handleItemSelected, isSelected: _this.selectedIndex === i, style: InnerComboBox.getListItemStyle(), selectedStyle: selectedStyle_1, ref: _this.saveItemRef, onClick: _this.handleItemPointerDown }, option.text || "\u00a0"));
                });
                var visibleItemsAmount = this.getPageSize();
                var scrollViewId = this.getListId() + "_scrollView";
                var showScroll = visibleItemsAmount < optionsRendered.length;
                var assumedItemHeight = 2.35;
                var scrollStyle = {
                    height: showScroll ? visibleItemsAmount * assumedItemHeight + "em" : undefined,
                    overflowY: showScroll ? "scroll" : "hidden",
                    overflowX: "hidden",
                    flex: "1 1 auto",
                    flexDirection: "column",
                };
                var listStyle = {
                    listStyleType: "none",
                    width: "100%",
                };
                //This is to handle scenario where user use keyboard to navigate
                var handleOption = options[this.selectedIndex];
                var scrollToElementId = this.keyboardScrolling || handleOption
                    ? this.getListItemId(handleOption)
                    : this.selectedListItem && this.selectedListItem.props.id
                        ? this.selectedListItem.props.id
                        : undefined;
                return (React.createElement(List_1.List, { id: this.getListId(), key: this.getListId(), role: roles.LISTBOX, style: listStyle, tabIndex: 0, onKeyDown: this.keyboardNavigation },
                    React.createElement(ScrollView_1.ScrollView, { id: scrollViewId, scrollToId: scrollToElementId, horizontal: false, role: roles.PRESENTATION, onScroll: this.onFlyoutScroll, style: scrollStyle }, optionsRendered)));
            }
        }
        return undefined;
    };
    /**
     * Renders the flyout.
     */
    InnerComboBox.prototype.renderFlyout = function (isRTL) {
        if (isRTL === void 0) { isRTL = document.body.dir === "rtl"; }
        var flyout = undefined;
        var testhooks = undefined;
        /*
         * Create testhooks for flyout
         */
        if (this.props.testhooks) {
            testhooks = Object.assign({}, this.props.testhooks);
            for (var i in testhooks) {
                testhooks[i] += "-flyout";
            }
        }
        if (!this.props.readOnly && this.state.isExpanded) {
            var optionsRendered = this.renderOptionsList(this.getVisibleOptions());
            var itemFocusId = this.getActiveDescendantId();
            if (optionsRendered) {
                var flyoutStyle = {
                    borderWidth: "0.1em",
                    borderStyle: "solid",
                    borderColor: "#666666",
                    backgroundColor: "white",
                    width: this.calculateWidth(),
                    boxShadow: InnerComboBox.SHADOWS.Shadow01,
                };
                flyout = (React.createElement(Flyout_1.Flyout, { id: this.getFlyoutId(), key: this.getFlyoutId(), focusElementId: itemFocusId, testhooks: testhooks, focusCallback: this.setFocusToItem, flyoutDirection: isRTL ? Flyout_1.FlyoutDirection.down : Flyout_1.FlyoutDirection.downleft, flyoutStyle: flyoutStyle, positionType: "relative", relativeToElementId: this.props.relativeToElementId ? this.props.relativeToElementId : this.getButtonId(), relativeToElementIdSelector: this.handleRelativeToElementSelector, onOutsideClick: this.handleFlyoutOutsideClick, parentCustomControlId: this.props.parentCustomControlId, parentFlyoutRoot: this.props.parentFlyoutRoot, rootZIndex: this.props.rootZIndex, enableTrackOnScroll: true, dismissOnScroll: !this.props.keepFlyoutOpenOnScroll }, optionsRendered));
            }
        }
        return flyout;
    };
    /**
     * Renders the text input with the given ID.
     */
    InnerComboBox.prototype._renderTextInput = function (controlId, testHooks) {
        var textInputStyle = this.props.textInputStyle
            ? this.props.textInputStyle
            : {
                borderWidth: 0,
                flex: "1 1 auto",
                backgroundColor: "transparent",
                padding: "0.5em 0.5em",
                width: "100%",
                fontSize: "1rem",
                fontWeight: this.state.hasFocus ? "normal" : "600",
                ":hover": {
                    fontWeight: "normal",
                },
            };
        return (React.createElement(TextInput_1.TextInput, { id: controlId, key: controlId, testhooks: testHooks, readOnly: this.props.readOnly, accessibilityHasPopup: true, accessibilityExpanded: this.state.isExpanded, accessibilityRequired: this.props.accessibilityRequired, describedByElementId: this.props.describedByElementId, role: roles.COMBOBOX, ref: this._saveTextInputRef, onFocus: this.handleInnerControlFocus, onBlur: this.handleInnerControlBlur, onKeyDown: this.handleKeyDown, onChangeText: this._handleTextInputChange, value: this.props.freeTextMode
                ? this.state.freeTextOptionDisplayValue || this.state.freeTextValue
                : this.state.option && this.state.option.text, accessibilityLabel: this.props.accessibilityLabel ? this.props.accessibilityLabel : this.props.placeholder, activeDescendantId: this.state.isExpanded ? this.getActiveDescendantId() : null, ownsElementId: this.state.isExpanded ? this.getListId() : null, controlsElementId: this.state.isExpanded ? this.getListId() : null, style: textInputStyle, placeholder: this.props.placeholder }));
    };
    /**
     * Gets styles for text only component
     */
    InnerComboBox.prototype.getTextOnlyStyle = function () {
        return this.props.textStyle
            ? this.props.textStyle
            : {
                borderWidth: 0,
                flex: "1 1 auto",
                outline: "none",
                cursor: "default",
            };
    };
    /**
     * Gets empty list component
     */
    InnerComboBox.prototype._getEmptyList = function () {
        return this.state.isExpanded ? null : (React.createElement("div", { role: roles.LISTBOX, id: this.getEmptyListId, style: { display: "none" } }, " "));
    };
    /**
     * Gets ineer component for TextOnly component
     */
    InnerComboBox.prototype.getTextOnlyInnerComponent = function (valueId) {
        return React.createElement(Text_1.Text, { id: valueId }, this.getSelectedOptionText());
    };
    /**
     * Renders the read-only text holder with the given ID.
     */
    InnerComboBox.prototype.renderTextOnly = function (controlId, testHooks) {
        var textStyle = this.getTextOnlyStyle();
        var elementProps = this.state.isExpanded
            ? {
                ownsElementId: this.getListId(),
                controlsElementId: this.getListId(),
                activeDescendantId: this.getActiveDescendantId(),
            }
            : {
                ownsElementId: this.getEmptyListId,
                controlsElementId: this.getEmptyListId,
            };
        var valueId = controlId + "-value";
        return (React.createElement(Text_1.Text, __assign({ id: controlId, key: controlId, testhooks: testHooks, accessibilityHasPopup: true, accessibilityExpanded: this.state.isExpanded, accessibilityRequired: this.props.accessibilityRequired, accessibilityLabel: this.props.accessibilityLabel ? this.props.accessibilityLabel : this.getSelectedOptionText(), title: this.props.title, describedByElementId: this.props.describedByElementId ? this.props.describedByElementId : valueId, ref: this.saveTextRef, role: roles.BUTTON, onFocus: this.handleInnerControlFocus, onBlur: this.handleInnerControlBlur, onKeyDown: this.handleKeyDown, onPointerDown: this.handleTextPointerDown, tabIndex: this.props.readOnly ? -1 : 0, semanticTag: this.props.useHeader ? "h1" : null, style: textStyle }, elementProps),
            this.getTextOnlyInnerComponent(valueId),
            this._getEmptyList()));
    };
    /**
     * Returns text of selected option
     */
    InnerComboBox.prototype.getSelectedOptionText = function () {
        // \u00a0 - non-breaking space (see https://en.wikipedia.org/wiki/Non-breaking_space)
        return (this.state.option && this.state.option.text) || "\u00a0";
    };
    /**
     * Returns value of selected option
     */
    InnerComboBox.prototype.getSelectedOptionValue = function () {
        return this.state.option && this.state.option.value;
    };
    /**
     * Renders the drop-down button.
     */
    InnerComboBox.prototype._renderDropDownButton = function () {
        var buttonStyle = {
            backgroundColor: "transparent",
            borderColor: "transparent",
            borderStyle: "solid",
            borderWidth: "0 0 0 0.1em",
            flexDirection: "row",
            padding: "0 0.75em",
            justifyContent: "center",
            ":hover": {
                borderColor: InnerComboBox.COLORS.Grey5,
            },
        };
        var arrowStyle = {
            width: "0.6em",
            height: "0.6em",
            marginTop: "-0.4em",
            borderColor: InnerComboBox.COLORS.Grey7,
            borderWidth: "0em",
            borderRightWidth: "0.1em",
            borderBottomWidth: "0.1em",
            borderStyle: "solid",
            transform: "rotate(45deg)",
            content: "",
            display: this.props.hideArrow ? "none" : "flex",
            alignSelf: "center",
        };
        return (React.createElement(View_1.View, { id: this.getButtonId(), key: "dropButton", role: roles.BUTTON, accessibilityLabel: this.props.accessibilityLabel, accessibilityExpanded: this.state.isExpanded, accessibilityHasPopup: true, tabIndex: -1, style: buttonStyle, onKeyDown: this.handleKeyDown, onClick: this._handleButtonClick },
            React.createElement("div", { style: arrowStyle })));
    };
    /**
     * React control render method.
     */
    InnerComboBox.prototype.render = function () {
        var props = this.getElementPropsInternal();
        // Add some defaults to the props.style
        Object.assign(props.style, {
            backgroundColor: "white",
            display: "flex",
            flex: "1 1 auto",
            borderWidth: "0.1em",
            borderStyle: "solid",
            borderColor: "#666666",
        }, this.props.style);
        if (this.props.testhooks) {
            props.testhooks = this.props.testhooks;
        }
        var testhooks = undefined;
        /*
         * Create testhooks for text input
         */
        if (this.props.testhooks) {
            testhooks = Object.assign({}, this.props.testhooks);
            for (var i in testhooks) {
                testhooks[i] += "-text";
            }
        }
        var containerStyle = {
            display: "flex",
            flex: "1 1 auto",
        };
        // We use outer and inner containers here just for the sake of keeping the original ID in the root element of the component.
        // The uniquity of the original ID is not guaranteed and depends on the consumer, not the component.
        //
        // The internal container has a different (100% unique) ID, so that the drop-down flyout positions itself properly relative to it.
        var control = (React.createElement(View_1.View, __assign({}, props, { ref: this.saveContainerRef }),
            React.createElement(View_1.View, { style: containerStyle, id: this.getInternalId() + "_wrapper" },
                this.props.freeTextMode
                    ? this._renderTextInput(this.focusableControlId, testhooks)
                    : this.renderTextOnly(this.focusableControlId, testhooks),
                !this.props.readOnly && this._renderDropDownButton(),
                !this.props.readOnly && this.renderFlyout())));
        return control;
    };
    InnerComboBox.prototype.calculateWidth = function () {
        var width = "50px";
        if (this.props.style && this.props.style.width && this.props.style.width !== "100%") {
            width = this.props.style.width.toString();
        }
        else if (this._containerWidth) {
            width = this._containerWidth.toString();
        }
        if (width.indexOf("px") === -1 && width.indexOf("%") === -1) {
            width = width + "px";
        }
        return width;
    };
    InnerComboBox.getListItemStyle = function () {
        return {
            flex: "0 1 auto",
            cursor: "pointer",
            padding: "0.5em 0.5em",
            ":hover": {
                backgroundColor: InnerComboBox.COLORS.Grey1,
                color: InnerComboBox.COLORS.Grey7,
            },
        };
    };
    InnerComboBox.getSelectedItemStyle = function () {
        return {
            backgroundColor: InnerComboBox.COLORS.Grey3,
            color: "black",
        };
    };
    InnerComboBox.supportedKeys = [
        KeyCode_1.KeyCode.Alt,
        KeyCode_1.KeyCode.UpArrow,
        KeyCode_1.KeyCode.DownArrow,
        KeyCode_1.KeyCode.Enter,
        KeyCode_1.KeyCode.PageDown,
        KeyCode_1.KeyCode.PageUp,
        KeyCode_1.KeyCode.Escape,
        KeyCode_1.KeyCode.Tab,
        KeyCode_1.KeyCode.Space,
    ];
    /**
     * Display name for React dev tools
     */
    InnerComboBox.displayName = "ComboBox";
    /**
     * The default amount of items visible within drop-down viewport at once.
     */
    InnerComboBox.DEFAULT_PAGE_SIZE = 7;
    /**
     * Colors
     * For color names see UCI repo src/features/themes/src/themes/BaseColorTheme.ts -> baseColorTheme
     * @type {{Grey1: string; Grey2: string; Grey7: string}}
     */
    InnerComboBox.COLORS = {
        Grey1: "#efefef",
        Grey2: "#e2e2e2",
        Grey3: "#d8d8d8",
        Grey5: "#666666",
        Grey7: "#333333",
    };
    InnerComboBox.SHADOWS = {
        Shadow01: "0px 2px 4px 0px rgba(0, 0, 0, 0.5);",
    };
    return InnerComboBox;
}(ComponentBase_1.ComponentBase));
exports.InnerComboBox = InnerComboBox;
var ComboBox = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerComboBox);
exports.ComboBox = ComboBox;

},{"../../CustomControls/Utilities/GuidHelper":101,"../Supplementary/Accessibility/Attributes/Role":58,"../Supplementary/Accessibility/KeyCode":59,"./ComponentBase":15,"./FelaConnectHelper":17,"./Flyout":20,"./List":29,"./ListItem":30,"./ScrollView":39,"./Text":53,"./TextInput":54,"./View":55,"react":undefined,"react-dom":undefined,"react-fela":undefined}],15:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AttributeName = require("../Supplementary/Accessibility/Attributes/AttributeName");
var CustomControlConstants_1 = require("../../CustomControls/Utilities/CustomControlConstants");
var IS_IE = !!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident");
var IS_EDGE = !!window.navigator.userAgent.match("Edge");
/**
 * Base component for all the primitive controls used
 */
var ComponentBase = /** @class */ (function (_super) {
    __extends(ComponentBase, _super);
    function ComponentBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     * If nothing provided, the default tag name is to be used.
     */
    ComponentBase.prototype.getElementName = function () {
        return "div";
    };
    /**
     * Returns the specific element props.
     * Note, some of the props still get assigned automatically, like "id", "style", "className", "children" etc.
     */
    ComponentBase.prototype.getElementProps = function () {
        return null;
    };
    /**
     * Whether this comonent has an aria property
     */
    ComponentBase.prototype.hasAriaProperty = function () {
        return (!!this.props.accessibilityLabel ||
            !!this.props.accessibilityChecked ||
            !!this.props.accessibilityLive ||
            !!this.props.accessibilityRelevant ||
            !!this.props.accessibilityAtomic ||
            !!this.props.labelledByElementId ||
            !!this.props.describedByElementId ||
            !!this.props.controlsElementId ||
            !!this.props.ownsElementId ||
            !!this.props.accessibilityRequired ||
            typeof this.props.accessibilityExpanded === "boolean" ||
            typeof this.props.accessibilityHasPopup === "boolean" ||
            typeof this.props.accessibilityReadOnly === "boolean" ||
            typeof this.props.accessibilityDisabled === "boolean" ||
            typeof this.props.accessibilityLevel === "number" ||
            typeof this.props.accessibilityHidden === "boolean" ||
            typeof this.props.isSelected === "boolean" ||
            !!this.props.activeDescendantId ||
            !!this.props.accessibilityCurrent ||
            typeof this.props.accessibilityValueMin === "number" ||
            typeof this.props.accessibilityValueMax === "number" ||
            typeof this.props.accessibilityValueNow === "number" ||
            typeof this.props.accessibilityModal === "boolean" ||
            !!this.props.accessibilityValueText ||
            !!this.props.role ||
            !!this.props.accessibilityAriaOrientation);
    };
    /**
     * Returns the full set of props for the underlying component, internal use only.
     */
    ComponentBase.prototype.getElementPropsInternal = function () {
        //const props: React.HTMLAttributes & { ref?: (r: any) => void } = {};
        var props = {};
        props.id = this.props.id;
        if (this.props.hidden) {
            props[AttributeName.HIDDEN] = true;
        }
        if (this.props.accessibilityLabel) {
            props[AttributeName.ARIA_LABEL] = this.props.accessibilityLabel;
        }
        if (this.props.accessibilityChecked) {
            props[AttributeName.ARIA_CHECKED] = this.props.accessibilityChecked;
        }
        if (this.props.accessibilityLive) {
            props[AttributeName.ARIA_LIVE] = this.props.accessibilityLive;
        }
        if (this.props.accessibilityRelevant) {
            props[AttributeName.ARIA_RELEVANT] = this.props.accessibilityRelevant;
        }
        if (this.props.accessibilityAtomic) {
            props[AttributeName.ARIA_ATOMIC] = this.props.accessibilityAtomic;
        }
        if (this.props.labelledByElementId) {
            props[AttributeName.ARIA_LABELLED_BY] = this.props.labelledByElementId;
        }
        if (this.props.describedByElementId) {
            props[AttributeName.ARIA_DESCRIBED_BY] = this.props.describedByElementId;
        }
        if (this.props.controlsElementId) {
            props[AttributeName.ARIA_CONTROLS] = this.props.controlsElementId;
        }
        if (this.props.ownsElementId) {
            props[AttributeName.ARIA_OWNS] = this.props.ownsElementId;
        }
        if (this.props.accessibilityRequired) {
            props[AttributeName.ARIA_REQUIRED] = this.props.accessibilityRequired;
        }
        if (typeof this.props.accessibilityExpanded === "boolean") {
            props[AttributeName.ARIA_EXPANDED] = this.props.accessibilityExpanded;
        }
        if (typeof this.props.accessibilityHasPopup === "boolean") {
            props[AttributeName.ARIA_HAS_POPUP] = this.props.accessibilityHasPopup;
        }
        if (typeof this.props.accessibilityReadOnly === "boolean") {
            props[AttributeName.ARIA_READONLY] = this.props.accessibilityReadOnly;
        }
        if (typeof this.props.accessibilityDisabled === "boolean") {
            props[AttributeName.ARIA_DISABLED] = this.props.accessibilityDisabled;
        }
        if (typeof this.props.accessibilityLevel === "number") {
            props[AttributeName.ARIA_LEVEL] = this.props.accessibilityLevel;
        }
        if (typeof this.props.accessibilityHidden === "boolean") {
            props[AttributeName.ARIA_HIDDEN] = this.props.accessibilityHidden;
        }
        if (typeof this.props.isSelected === "boolean") {
            props[AttributeName.ARIA_SELECTED] = this.props.isSelected;
        }
        if (this.props.activeDescendantId) {
            props[AttributeName.ARIA_ACTIVE_DESCENDANT] = this.props.activeDescendantId;
        }
        if (this.props.accessibilityCurrent) {
            props[AttributeName.ARIA_CURRENT] = this.props.accessibilityCurrent;
        }
        if (typeof this.props.accessibilityValueMin === "number") {
            props[AttributeName.ARIA_VALUE_MIN] = this.props.accessibilityValueMin;
        }
        if (typeof this.props.accessibilityValueMax === "number") {
            props[AttributeName.ARIA_VALUE_MAX] = this.props.accessibilityValueMax;
        }
        if (typeof this.props.accessibilityValueNow === "number") {
            props[AttributeName.ARIA_VALUE_NOW] = this.props.accessibilityValueNow;
        }
        if (typeof this.props.accessibilityModal === "boolean") {
            props[AttributeName.ARIA_MODAL] = this.props.accessibilityModal;
        }
        if (this.props.accessibilityValueText) {
            props[AttributeName.ARIA_VALUE_TEXT] = this.props.accessibilityValueText;
        }
        if (this.props.role) {
            props[AttributeName.ROLE] = this.props.role;
        }
        if (this.props.title) {
            props[AttributeName.TITLE] = this.props.title;
        }
        if (this.props.accessibilityAriaOrientation) {
            props[AttributeName.ARIA_ORIENTATION] = this.props.accessibilityAriaOrientation;
        }
        if (typeof this.props.tabIndex === "number") {
            props.tabIndex = this.props.tabIndex;
        }
        var learningPathId = this.props[CustomControlConstants_1.CustomControlConstants.LearningPathAttributeName];
        if (learningPathId) {
            props[CustomControlConstants_1.CustomControlConstants.LearningPathAttributeName] = learningPathId;
        }
        if (this.props.testhooks) {
            var testhooks = this.props.testhooks;
            for (var key in testhooks) {
                props["data-" + key] = testhooks[key];
            }
        }
        if (this.props.onClick != null)
            props.onClick = this.props.onClick;
        if (this.props.onDoubleClick != null)
            props.onDoubleClick = this.props.onDoubleClick;
        if (this.props.onDrag != null)
            props.onDrag = this.props.onDrag;
        if (this.props.onDragEnd != null)
            props.onDragEnd = this.props.onDragEnd;
        if (this.props.onDragEnter != null)
            props.onDragEnter = this.props.onDragEnter;
        if (this.props.onDragExit != null)
            props.onDragExit = this.props.onDragExit;
        if (this.props.onDragLeave != null)
            props.onDragLeave = this.props.onDragLeave;
        if (this.props.onDragOver != null)
            props.onDragOver = this.props.onDragOver;
        if (this.props.onDragStart != null)
            props.onDragStart = this.props.onDragStart;
        if (this.props.onDrop != null)
            props.onDrop = this.props.onDrop;
        if (this.props.onClickCapture != null)
            props.onClickCapture = this.props.onClickCapture;
        if (this.props.onPointerOver != null)
            props.onPointerOver = this.props.onPointerOver;
        if (this.props.onPointerOut != null)
            props.onPointerOut = this.props.onPointerOut;
        if (this.props.onPointerUp != null)
            props.onPointerUp = this.props.onPointerUp;
        if (this.props.onPointerDown != null)
            props.onPointerDown = this.props.onPointerDown;
        if (this.props.onPointerEnter != null)
            props.onPointerEnter = this.props.onPointerEnter;
        if (this.props.onPointerLeave != null)
            props.onPointerLeave = this.props.onPointerLeave;
        if (this.props.onPointerMove != null)
            props.onPointerMove = this.props.onPointerMove;
        if (this.props.onPointerCancel != null)
            props.onPointerCancel = this.props.onPointerCancel;
        if (this.props.onBlur != null)
            props.onBlur = this.props.onBlur;
        if (this.props.onFocus != null)
            props.onFocus = this.props.onFocus;
        if (this.props.onMouseEnter != null)
            props.onMouseEnter = this.props.onMouseEnter;
        if (this.props.onMouseLeave != null)
            props.onMouseLeave = this.props.onMouseLeave;
        if (this.props.onKeyDown != null)
            props.onKeyDown = this.props.onKeyDown;
        if (this.props.onKeyUp != null)
            props.onKeyUp = this.props.onKeyUp;
        if (this.props.onScroll != null)
            props.onScroll = this.props.onScroll;
        Object.assign(props, this.getElementProps());
        props.children = null;
        props.style = this.getElementStyle();
        var className = this.getElementClassName() + " " + this.getFlexClassName(props.style);
        if (className.length > 0) {
            props.className = className;
            props.style = {};
        }
        return props;
    };
    /**
     * Returns the specific style for the underlying element.
     */
    ComponentBase.prototype.getElementStyle = function () {
        // By default, pass the original styles to the underlying element.
        return this.props.style;
    };
    /**
     * Returns the class name for the underlying element.
     * @param style the style to be applied to the underlying component, used for readout here.
     */
    ComponentBase.prototype.getElementClassName = function () {
        return ((this.props.styles ? this.props.styles : "") + (this.props.explicitStyles ? " " + this.props.explicitStyles : ""));
    };
    ComponentBase.prototype.getFlexClassName = function (_style) {
        return "";
    };
    /**
     * Returns the children of the element.
     */
    ComponentBase.prototype.getElementChildren = function () {
        var children = this.props.children;
        if (Array.isArray(children)) {
            if (children.length === 0) {
                return null;
            }
            else if (children.length > 1 && window.DEBUG) {
                //check for key duplicates, show a warning if a duplicate is found, provide some additional debug info.
                //TODO: make use of some kind of a pre-processing so that this code is not executed in Retail build.
                var validChildren = children.filter(function (x) { return React.isValidElement(x); });
                if (validChildren.length > 1) {
                    var previousNames = {};
                    for (var i = 0; i < validChildren.length; i++) {
                        var child = validChildren[i];
                        if (!child.key) {
                            var key = child.key || child.type.name;
                            if (previousNames[key])
                                console.warn("The React child should have a unique key within the parent's scope:", key, ", current element id/key =", this.props.id, ", this element type:", this.constructor.name);
                            previousNames[key] = key;
                        }
                    }
                }
            }
        }
        if (typeof children === "string" && children.length === 0) {
            return null;
        }
        return children;
    };
    /**
     * Returns true if element has horizontal or vertical scroll
     * @param style
     */
    ComponentBase.isElementScrollable = function (style) {
        return (style.overflow === "auto" ||
            style.overflowX === "auto" ||
            style.overflowY === "auto" ||
            style.overflow === "scroll" ||
            style.overflowX === "scroll" ||
            style.overflowY === "scroll");
    };
    /**
     * Renders the component to the virtual DOM.
     */
    ComponentBase.prototype.render = function () {
        return React.createElement(this.getElementName(), this.getElementPropsInternal(), this.getElementChildren());
    };
    Object.defineProperty(ComponentBase.prototype, "isIE", {
        /**
         * Check if the browser is Internet Explorer
         */
        get: function () {
            return IS_IE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentBase.prototype, "isEdge", {
        /**
         * Check if the browser is Edge
         */
        get: function () {
            return IS_EDGE;
        },
        enumerable: true,
        configurable: true
    });
    return ComponentBase;
}(React.Component));
exports.ComponentBase = ComponentBase;
exports.default = ComponentBase;

},{"../../CustomControls/Utilities/CustomControlConstants":98,"../Supplementary/Accessibility/Attributes/AttributeName":57,"react":undefined}],16:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });

var ComponentBase_1 = require("./ComponentBase");
var View_1 = require("./View");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
var PresenceIndicator_1 = require("./PresenceIndicator");
var GuidHelper_1 = require("../../CustomControls/Utilities/GuidHelper");
var EntityIcon_1 = require("../FontIcon/EntityIcon");
var Svg_1 = require("./Svg");
var Image_1 = require("./Image");
/**
 * Enum for component inner mode values
 * @readonly
 */
var Mode;
(function (Mode) {
    Mode[Mode["CustomImage"] = 0] = "CustomImage";
    Mode[Mode["Initials"] = 1] = "Initials";
    Mode[Mode["CustomEntityIcon"] = 2] = "CustomEntityIcon";
    Mode[Mode["DefaultEntityIcon"] = 3] = "DefaultEntityIcon";
})(Mode || (Mode = {}));
exports.EntityImageMode = Mode;
/**
 * Control which renders default entity icon for the given entity.
 * It also has a configurable property to render image or initials of the name
 */
var InnerEntityImage = /** @class */ (function (_super) {
    __extends(InnerEntityImage, _super);
    function InnerEntityImage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Determines internal component mode based on input props
     * @returns {Mode}
     * @private
     */
    InnerEntityImage.getMode = function (props) {
        if (props.hasPrimaryImageField && props.imageSrc)
            return Mode.CustomImage;
        if (props.hasPrimaryImageField && props.entityPrimaryField)
            return Mode.Initials;
        if (props.customEntityIcon)
            return Mode.CustomEntityIcon;
        if (props.entityReference && props.entityReference.entityName)
            return Mode.DefaultEntityIcon;
    };
    Object.defineProperty(InnerEntityImage.prototype, "_isCustomImageMode", {
        /**
         * @returns {boolean} true when component in CustomImage mode
         * @private
         */
        get: function () {
            return InnerEntityImage.getMode(this.props) === Mode.CustomImage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InnerEntityImage.prototype, "_isInitialsMode", {
        /**
         * @returns {boolean} true when component in Initials mode
         * @private
         */
        get: function () {
            return InnerEntityImage.getMode(this.props) === Mode.Initials;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InnerEntityImage.prototype, "_isCustomEntityIconMode", {
        /**
         * @returns {boolean} true when component in CustomEntityIcon mode
         * @private
         */
        get: function () {
            return InnerEntityImage.getMode(this.props) === Mode.CustomEntityIcon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InnerEntityImage.prototype, "_isDefaultEntityIconMode", {
        /**
         * @returns {boolean} true when component in DefaultEntityIcon mode
         * @private
         */
        get: function () {
            return InnerEntityImage.getMode(this.props) === Mode.DefaultEntityIcon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InnerEntityImage, "_isBrowserIE", {
        /**
         * Returns true if current browser is IE
         * @private
         */
        get: function () {
            return !!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns first letters of first two words (or two letters of one word)
     */
    InnerEntityImage._getInitials = function (fullname) {
        var initials = "";
        if (fullname) {
            for (var nameParts = fullname.split(" "), i = 0; i < nameParts.length && initials.length < 2; i++) {
                if (nameParts[i].length > 0) {
                    var chr = nameParts[i].charCodeAt(0);
                    // Restrict to Latin characters only (because we don't know if such initials format is correct for non-English names)
                    if ((chr >= 97 && chr <= 122) || (chr >= 65 && chr <= 90)) {
                        initials += nameParts[i].charAt(0);
                    }
                    else {
                        // In case of non-English name return only the first character of the string
                        // TODO: Get a spec for the general case. VSO Task#271064
                        initials += nameParts[i].charAt(0);
                        break;
                    }
                }
            }
            if (initials.length <= 1) {
                initials = "";
                for (var j = 0; j < fullname.length && initials.length < 2; j++) {
                    var char = fullname.charCodeAt(j);
                    if ((char >= 97 && char <= 122) || (char >= 65 && char <= 90)) {
                        initials += fullname.charAt(j);
                    }
                    else {
                        initials += fullname.charAt(j);
                        break;
                    }
                }
            }
        }
        return initials;
    };
    InnerEntityImage.prototype._renderHealthCircle = function (node) {
        var _this = this;
        var unit = InnerEntityImage._unitRegex.exec(this.props.style.width + "")[1];
        // We suppose, that our circle has the same width and size. So, we need to get size for render circle
        var size = parseFloat(this.props.style.width + "");
        // Convert 0-100% to 0-360deg
        var scoreDeg = (this.props.entityHealthScore * 360) / 100;
        var style = {
            width: size + unit,
            height: size + unit,
            position: "relative",
            display: "block",
        };
        var pieStyle = {
            clip: "rect(0, " + (size + unit) + ", " + (size + unit) + ", " + (size / 2 + unit) + ")",
            height: "100%",
            width: "100%",
            left: "0",
            position: "absolute",
            top: "0",
        };
        var halfCircle = {
            clip: "rect(0, " + (size / 2 + unit) + ", " + (size + unit) + ", 0)",
            transform: "rotate(" + scoreDeg + "deg)",
            height: "100%",
            width: "100%",
            border: "4px solid transparent",
            borderRadius: "50%",
            left: "0",
            position: "absolute",
            top: "0",
            borderColor: "transparent",
            boxSizing: "border-box",
        };
        // Loop for select correct circle color
        InnerEntityImage._healthRanges.forEach(function (range) {
            if (_this.props.entityHealthScore >= range.min && _this.props.entityHealthScore <= range.max) {
                halfCircle.borderColor = range.color;
            }
        });
        var leftCircle = Object.assign({}, halfCircle);
        var rightCircle = Object.assign({ display: "none" }, halfCircle);
        if (scoreDeg > 180) {
            pieStyle.clip = "rect(auto, auto, auto, auto)";
            leftCircle.transform = "rotate(180deg)";
            rightCircle.display = "block";
        }
        return (React.createElement(View_1.View, { style: style },
            node,
            React.createElement(View_1.View, { style: pieStyle },
                React.createElement(View_1.View, { style: leftCircle }),
                React.createElement(View_1.View, { style: rightCircle }))));
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerEntityImage.prototype.getElementName = function () {
        return "span";
    };
    /**
     * Returns the specific element props.
     */
    InnerEntityImage.prototype.getElementProps = function () {
        return {
            alt: this.props.alt ? this.props.alt : "",
        };
    };
    /**
     * Returns the children of the element.
     * @returns string for initials mode and EntityIcon for DefaultEntityIcon mode
     */
    InnerEntityImage.prototype.getElementChildren = function () {
        if (this._isInitialsMode) {
            return InnerEntityImage._getInitials(this.props.entityPrimaryField);
        }
        else if (this._isDefaultEntityIconMode) {
            return React.createElement(EntityIcon_1.EntityIcon, { type: this.props.entityReference.entityName, style: this.props.iconStyle });
        }
    };
    InnerEntityImage.prototype._renderEntityImageWithPresence = function (entityImage) {
        var id = "id_" + GuidHelper_1.guidV4String();
        var positionStyle = {
            position: "relative",
        };
        // Default style for presence indicator in entity Image.
        var presenceIndicatorStyle = {
            right: "0px",
            bottom: "0px",
            position: "absolute",
        };
        var presenceIndicator = (React.createElement(PresenceIndicator_1.PresenceIndicator, { key: id + "_presence", id: id + "_presence", parentControlId: id, style: presenceIndicatorStyle, entityReference: this.props.entityReference, sipUrl: this.props.sipUrl, displaySize: this.props.presenceIndicatorSize, accessibilityLabel: this.props.entityPrimaryField }));
        return (React.createElement(View_1.View, { id: id, style: positionStyle },
            entityImage,
            presenceIndicator));
    };
    /**
     * Render Entity Image component.
     */
    InnerEntityImage.prototype.render = function () {
        var entityImage;
        // Render Image primitive for CustomImage and CustomEntityIcon modes
        if (this._isCustomImageMode || this._isCustomEntityIconMode) {
            if (InnerEntityImage._isBrowserIE) {
                var svgProps = {
                    source: this._isCustomImageMode ? this.props.imageSrc : this.props.customEntityIcon,
                    style: this.props.style,
                    fallbackToImage: true,
                    altText: this.props.alt,
                    title: this.props.title,
                };
                entityImage = React.createElement(Svg_1.Svg, __assign({}, svgProps));
            }
            else {
                var imageProps = {
                    source: this._isCustomImageMode ? this.props.imageSrc : this.props.customEntityIcon,
                    style: this.props.style,
                    altText: this.props.alt,
                    title: this.props.title,
                };
                entityImage = React.createElement(Image_1.Image, __assign({}, imageProps));
            }
        }
        else {
            var elementProps = this.getElementPropsInternal();
            var props = Object.assign({}, elementProps, {
                role: elementProps.role || "img",
                "aria-label": this.props.alt || "",
            });
            entityImage = React.createElement(this.getElementName(), props, this.getElementChildren());
        }
        if (this.props.wrapperStyle) {
            entityImage = React.createElement(View_1.View, { style: this.props.wrapperStyle }, entityImage);
        }
        if (this.props.entityHealthScore) {
            entityImage = this._renderHealthCircle(entityImage);
        }
        if (this.props.entityReference || this.props.sipUrl) {
            entityImage = this._renderEntityImageWithPresence(entityImage);
        }
        return entityImage;
    };
    /**
     * Display name for React dev tools
     */
    InnerEntityImage.displayName = "EntityImage";
    /**
     * Regex to get size unit.
     */
    InnerEntityImage._unitRegex = /[0-9]*\.?[0-9]+(px|%|em|rem)?/i;
    /**
     * Health ring color is based on the health score state, which is directly related to the health score.
     */
    InnerEntityImage._healthRanges = [
        {
            min: 1,
            max: 39,
            color: "#FF0000",
        },
        {
            min: 40,
            max: 59,
            color: "#FFBB00",
        },
        {
            min: 60,
            max: 100,
            color: "#00EE00",
        },
    ];
    /**
     * CRM colors for initial thumbnails
     * @private
     */
    InnerEntityImage.backgroundColors = [
        "#005C62",
        "#358717",
        "#725A0D",
        "#A42B1A",
        "#652F4E",
        "#6A1E7A",
        "#315FA2",
    ];
    return InnerEntityImage;
}(ComponentBase_1.ComponentBase));
exports.InnerEntityImage = InnerEntityImage;
function entityImageRuleGen(props) {
    if (props && props.style) {
        // Calculate background color if it not specified by consumer for Initials and DefaultIcon modes
        if (!props.style.backgroundColor &&
            (InnerEntityImage.getMode(props) === Mode.Initials || InnerEntityImage.getMode(props) === Mode.DefaultEntityIcon)) {
            var backgroundColor = InnerEntityImage.backgroundColors[0]; // Use first color by default
            if (props.entityPrimaryField) {
                // Use generic MS algorithm based on entity name
                var s = 0;
                for (var k = props.entityPrimaryField.length - 1; k >= 0; k--) {
                    var o = props.entityPrimaryField.charCodeAt(k);
                    var e = k % 8;
                    s ^= (o << e) + (o >> (8 - e));
                }
                backgroundColor = InnerEntityImage.backgroundColors[s % InnerEntityImage.backgroundColors.length];
            }
            return Object.assign({ backgroundColor: backgroundColor }, FelaConnectHelper_1.ruleGen(props));
        }
        return Object.assign(props.style, FelaConnectHelper_1.ruleGen(props));
    }
    return {};
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(entityImageRuleGen, props); }; };
var EntityImage = ReactFela.connect(mapStylesToProps)(InnerEntityImage);
exports.EntityImage = EntityImage;

},{"../../CustomControls/Utilities/GuidHelper":101,"../FontIcon/EntityIcon":8,"./ComponentBase":15,"./FelaConnectHelper":17,"./Image":27,"./PresenceIndicator":35,"./Svg":42,"./View":55,"react":undefined,"react-fela":undefined}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function ruleGen(props) {
    if (props.style) {
        Object.assign(props.style, transformStyle(props.style));
        return props.style;
    }
    //Plugin prefixer doesn't take undefined
    return {};
}
exports.ruleGen = ruleGen;
/**
 * Function to transform React Native flex style property into React CSS flex property
 */
function transformFlex(flex) {
    var val = Number(flex);
    return isNaN(val) ? flex : val;
}
function transformStyle(style) {
    // Should stop processing input style if it is null
    if (!style) {
        return {};
    }
    var cssStyle = {};
    if (style.borderBottomWidth != null)
        cssStyle.borderBottomWidth = transformSizeProp(style.borderBottomWidth);
    if (style.borderLeftWidth != null)
        cssStyle.borderLeftWidth = transformSizeProp(style.borderLeftWidth);
    if (style.borderRightWidth != null)
        cssStyle.borderRightWidth = transformSizeProp(style.borderRightWidth);
    if (style.borderTopWidth != null)
        cssStyle.borderTopWidth = transformSizeProp(style.borderTopWidth);
    if (style.borderWidth != null)
        cssStyle.borderWidth = transformSizeProp(style.borderWidth);
    if (style.height != null)
        cssStyle.height = transformSizeProp(style.height);
    if (style.width != null)
        cssStyle.width = transformSizeProp(style.width);
    if (style.minWidth != null)
        cssStyle.minWidth = transformSizeProp(style.minWidth);
    if (style.minHeight != null)
        cssStyle.minHeight = transformSizeProp(style.minHeight);
    if (style.maxWidth != null)
        cssStyle.maxWidth = transformSizeProp(style.maxWidth);
    if (style.maxHeight != null)
        cssStyle.maxHeight = transformSizeProp(style.maxHeight);
    if (style.margin != null)
        cssStyle.margin = transformSizeProp(style.margin);
    if (style.marginBottom != null)
        cssStyle.marginBottom = transformSizeProp(style.marginBottom);
    if (style.marginLeft != null)
        cssStyle.marginLeft = transformSizeProp(style.marginLeft);
    if (style.marginRight != null)
        cssStyle.marginRight = transformSizeProp(style.marginRight);
    if (style.marginTop != null)
        cssStyle.marginTop = transformSizeProp(style.marginTop);
    if (style.padding != null)
        cssStyle.padding = transformSizeProp(style.padding);
    if (style.paddingBottom != null)
        cssStyle.paddingBottom = transformSizeProp(style.paddingBottom);
    if (style.paddingLeft != null)
        cssStyle.paddingLeft = transformSizeProp(style.paddingLeft);
    if (style.paddingRight != null)
        cssStyle.paddingRight = transformSizeProp(style.paddingRight);
    if (style.paddingTop != null)
        cssStyle.paddingTop = transformSizeProp(style.paddingTop);
    if (style.position != null)
        cssStyle.position = transformSizeProp(style.position);
    if (style.bottom != null)
        cssStyle.bottom = transformSizeProp(style.bottom);
    if (style.right != null)
        cssStyle.right = transformSizeProp(style.right);
    if (style.top != null)
        cssStyle.top = transformSizeProp(style.top);
    if (style.left != null)
        cssStyle.left = transformSizeProp(style.left);
    if (style.flex != null)
        cssStyle.flex = transformFlex(style.flex);
    if (style.animationDirection != null)
        cssStyle.animationDirection = style.animationDirection;
    // Cast to any to workaround out of date React typings. Can be fixed once TS is upgraded.
    if (style.animationDuration != null)
        cssStyle.animationDuration = style.animationDuration;
    if (style.animationFillMode != null)
        cssStyle.animationFillMode = style.animationFillMode;
    if (style.animationIterationCount != null)
        cssStyle.animationIterationCount = style.animationIterationCount;
    if (style.animationName != null)
        cssStyle.animationName = style.animationName;
    if (style.backgroundColor != null)
        cssStyle.backgroundColor = style.backgroundColor;
    return cssStyle;
}
function transformSizeProp(widthRelatedProp) {
    var newWidthProps = typeof widthRelatedProp === "number" ? widthRelatedProp.toString() + "px" : widthRelatedProp;
    return newWidthProps;
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(ruleGen, props); }; };
exports.mapStylesToProps = mapStylesToProps;

},{}],18:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PropTypes = require("prop-types");
var ComponentBase_1 = require("./ComponentBase");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * FileInput component
 *
 * @class
 */
var InnerFileInput = /** @class */ (function (_super) {
    __extends(InnerFileInput, _super);
    function InnerFileInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerFileInput.prototype.getElementName = function () {
        return "input";
    };
    /**
     * Returns the specific element props.
     */
    InnerFileInput.prototype.getElementProps = function () {
        var _this = this;
        var props = {
            type: "file",
        };
        //Enter Key press event does not open the Choose File dialog by default in Internet Explorer and Edge browsers.
        props.onKeyPress = function (e) {
            if ((_this.isEdge || _this.isIE) && e.key === "Enter") {
                var inputElement = e.target;
                inputElement.click();
            }
        };
        if (this.props.accept && this.props.accept.length) {
            props.accept = this.props.accept.join(",");
        }
        if (this.props.fileSelected) {
            props.onChange = function (e) {
                var inputElement = e.target;
                if (inputElement && inputElement.files && inputElement.files.length > 0) {
                    //Due to a bug in Ios 10 UIWebView, user can always select multiple files even though multiple attribute is not set.
                    //This is a temporary workaround for the same.
                    if (inputElement.files.length > 1 && _this.props.multipleFilesSelected) {
                        //Reset the input element
                        inputElement.type = "";
                        inputElement.type = "file";
                        //Invoke the callback
                        _this.props.multipleFilesSelected();
                    }
                    else {
                        var file_1 = inputElement.files[0];
                        var reader_1 = new FileReader();
                        reader_1.readAsDataURL(file_1);
                        reader_1.onload = function () {
                            var fileInput = _this._parseFileReaderResult(file_1, reader_1.result);
                            _this.props.fileSelected(fileInput);
                        };
                        reader_1.onerror = function () {
                            if (_this.props.onReaderError) {
                                _this.props.onReaderError("Error reading file: " + file_1.name + "\n" + reader_1.error);
                            }
                        };
                    }
                }
                else {
                    if (_this.props.fileUnselected) {
                        _this.props.fileUnselected();
                    }
                }
            };
        }
        return props;
    };
    InnerFileInput.prototype._parseFileReaderResult = function (file, result) {
        var content = null;
        var encoding = null;
        if (result) {
            var commaIndex = result.indexOf(",");
            if (commaIndex > -1) {
                content = result.substring(commaIndex + 1);
            }
            var semiColonIndex = result.indexOf(";");
            if (semiColonIndex > -1 && commaIndex > -1) {
                encoding = result.substring(semiColonIndex + 1, commaIndex);
            }
        }
        return {
            content: content,
            mimeType: file.type,
            encoding: encoding,
            name: file.name,
            size: file.size,
        };
    };
    /**
     * Display name for React dev tools
     */
    InnerFileInput.displayName = "FileInput";
    return InnerFileInput;
}(ComponentBase_1.ComponentBase));
InnerFileInput.contextTypes = {
    context: PropTypes.object,
};
var FileInput = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerFileInput);
exports.FileInput = FileInput;

},{"./ComponentBase":15,"./FelaConnectHelper":17,"prop-types":undefined,"react-fela":undefined}],19:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });


var Text_1 = require("./Text");
var View_1 = require("./View");
var ComponentBase_1 = require("./ComponentBase");
// 150 as a default, but 144 for required fields
var FIELD_LABEL_WIDTH = 144;
/*
 *  This is for text that wants to be truncated
 */
var FlexibleText = /** @class */ (function (_super) {
    __extends(FlexibleText, _super);
    function FlexibleText(props) {
        var _this = _super.call(this, props) || this;
        _this._toggleCollapseState = _this._toggleCollapseState.bind(_this);
        _this.saveItemRef = _this.saveItemRef.bind(_this);
        _this._firstRender = true;
        _this._totalLineHeight = 0;
        _this.state = {
            collapsed: true,
        };
        _this._backgroundCanvas = document.createElement("canvas");
        _this._areLinesTruncated = false;
        return _this;
    }
    FlexibleText.prototype.componentDidMount = function () {
        if (!this.props.isFieldLabel && this._firstRender && this._textRef && this.props.truncatedlines) {
            this.forceUpdate();
        }
    };
    FlexibleText.prototype._toggleCollapseState = function () {
        if (this.props.noExpandable)
            return;
        this.setState({
            collapsed: !this.state.collapsed,
        });
    };
    FlexibleText.prototype.saveItemRef = function (item) {
        this._textRef = item;
    };
    /*
     * Calculate each line height based on rendered out content
     */
    FlexibleText.prototype._calculateLineHeight = function () {
        //Height doesn't have to set specifically if it's not collapsed
        if (!this._textRef || !this.state.collapsed)
            return;
        var element = ReactDOM.findDOMNode(this._textRef);
        if (!element)
            return;
        var computedStyle = window.getComputedStyle(element);
        if (this._firstRender) {
            this._originalHeight = parseInt(computedStyle.height, 10);
            this._firstRender = false;
        }
        var lineHeight = 0;
        if (this.props.lineHeight) {
            lineHeight = this.props.lineHeight;
        }
        else {
            lineHeight = parseInt(computedStyle.lineHeight, 10);
        }
        // Almost everything returns "normal", normal is by default
        if (isNaN(lineHeight)) {
            var clone = element.cloneNode();
            clone.innerHTML = "<br>";
            element.appendChild(clone);
            var singleLineHeight = clone.offsetHeight;
            clone.innerHTML = "<br><br>";
            var doubleLineHeight = clone.offsetHeight;
            element.removeChild(clone);
            lineHeight = doubleLineHeight - singleLineHeight;
        }
        this._areLinesTruncated = this._originalHeight > lineHeight * this.props.truncatedlines;
        // if the original height is less than the truncate height, return the original
        // height as we will not be changing it
        if (!this._areLinesTruncated) {
            return this._originalHeight + "px";
        }
        if (lineHeight !== 0) {
            var totalLineHeight = lineHeight * this.props.truncatedlines;
            this._totalLineHeight = totalLineHeight;
        }
        return this._totalLineHeight + "px";
    };
    FlexibleText.prototype.render = function () {
        // take all styles from flexibletextstyle and put into textstyle
        // useful so we maintain any previously set styles
        // but also get styles set by consumer, if any
        var textStyle = Object.assign(this._getTextStyle(), this.props.flexibleTextStyle);
        // combine consumer set flexibletextcontainerstyle with default style
        var containerStyle = Object.assign({ display: "flex", flexDirection: "Column", width: "100%" }, this.props.flexibleTextContainerStyle);
        return (React.createElement(View_1.View, { style: containerStyle },
            React.createElement(Text_1.Text, __assign({}, this.props, { onClick: this._toggleCollapseState, style: textStyle, ref: this.props.isFieldLabel ? null : this.saveItemRef, id: this.props.id, className: this._returnExpandableClassName() }), this.props.children)));
    };
    FlexibleText.prototype._calculateHeight = function () {
        var calculateHeight = 0;
        //This is specifically fix for double render on label
        if (this.props.isFieldLabel) {
            var contextCanvas = this._backgroundCanvas.getContext("2d");
            contextCanvas.font =
                this.props.flexibleTextStyle && this.props.flexibleTextStyle.fontSize && this.props.flexibleTextStyle.fontFamily
                    ? this.props.flexibleTextStyle.fontSize + " " + this.props.flexibleTextStyle.fontFamily
                    : "14px Segoe UI";
            //Since field section item width for label is fixed for 150px
            //We can calculate out how many lines you need
            var potentialTextLines = contextCanvas.measureText(this.props.children.props.children).width / FIELD_LABEL_WIDTH;
            if (potentialTextLines > this.props.truncatedlines) {
                potentialTextLines = this.props.truncatedlines;
                this._areLinesTruncated = true;
            }
            calculateHeight =
                this.props.lineHeight && this._areLinesTruncated ? this.props.lineHeight * potentialTextLines : null;
        }
        return calculateHeight;
    };
    FlexibleText.prototype._getTextStyle = function () {
        // don't apply truncation styles for expanded state
        if (!this.state.collapsed)
            return {};
        return this.props.truncatedlines === 1
            ? {
                whiteSpace: "nowrap",
                overflow: "hidden",
                textOverflow: "ellipsis",
                direction: this.props.isRTL ? "rtl" : "ltr",
            }
            : {
                overflow: "hidden",
                /* for set '...' in absolute position */
                position: "relative",
                height: this.props.isFieldLabel ? this._calculateHeight() : this._calculateLineHeight(),
                display: "inline-block",
                /* fix problem when last visible word doesn't adjoin right side  */
                textAlign: "justify",
                ":after": this._areLinesTruncated
                    ? { background: this.props.maskingColor ? this.props.maskingColor : "#F8F7F6" }
                    : "",
                paddingLeft: this.props.isRTL ? "0.75rem" : undefined,
                paddingRight: this.props.isRTL ? undefined : "0.75rem",
            };
    };
    /*
     * returns a class name depending on whether or not the element should be expandable
     */
    FlexibleText.prototype._returnExpandableClassName = function () {
        // if the lines are truncate we set the class name
        // so that '...' will be displayed
        if (this._areLinesTruncated) {
            return this.props.isRTL ? "block-with-text-noexpansion-rtl" : "block-with-text-noexpansion";
        }
        // otherwise we set no class name so that
        // no ellipsis will be displayed
        else
            return "";
    };
    return FlexibleText;
}(ComponentBase_1.ComponentBase));
exports.FlexibleText = FlexibleText;

},{"./ComponentBase":15,"./Text":53,"./View":55,"react":undefined,"react-dom":undefined}],20:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/* tslint:disable:crm-prohibit-react-dom-render */
/* tslint:disable:crm-prohibit-standard-react-element */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });



var FlyoutDirection_1 = require("./Flyout/FlyoutDirection");
exports.FlyoutDirection = FlyoutDirection_1.default;
var FlyoutUtils = require("./Flyout/Utils");
var FelaConnectHelper_1 = require("./FelaConnectHelper");
var View_1 = require("./View");
var MeasuringHandler_1 = require("../Common/MeasuringHandler/MeasuringHandler");
var CustomControlFlyoutParentHelper_1 = require("../../CustomControls/Components/Helpers/CustomControlFlyoutParentHelper");
var CustomControlSeeMoreStyleHelper_1 = require("../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper");
var XrmProxy_1 = require("../../CustomControls/Utilities/XrmProxy");
var TelemetryManager_1 = require("../../CustomControls/Utilities/TelemetryManager");
var FlyoutPopupManager_1 = require("../Common/FlyoutPopupManager/FlyoutPopupManager");
var IFlyoutPopupManagerSubscriber_1 = require("../Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber");
var FLYOUT_ROOT_NODE_ID = "__flyoutRootNode";
exports.FLYOUT_ROOT_NODE_ID = FLYOUT_ROOT_NODE_ID;
var PRIMITIVE_COMPONENT_NAME = TelemetryManager_1.COMPONENT_NAME + ".Primitive.Flyout";
/**
 * Flyout control that includes an anchor element (which triggers the flyout)
 * and rendering of the flyout itself as well.
 */
var InnerFlyout = /** @class */ (function (_super) {
    __extends(InnerFlyout, _super);
    function InnerFlyout(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Whether this flyout has already attempted a focus on an inner requested element
         */
        _this._wasInnerFocusRequested = false;
        /**
         * Indicates how many popups are currently shown
         */
        _this._seeMorePopupCount = null;
        /**
         * Handles the event of resizing the ancestor of the relative-dependency element.
         * @param e
         */
        _this._resizeHandler = _this.debouncingFlyoutEvent(function () {
            if (_this._flyoutElement && _this._flyoutElement.offsetHeight > 0) {
                _this.updateDom();
            }
        });
        /**
         * Handles the event of scrolling the ancestor of the relative-dependency element.
         * @param e
         */
        _this._scrollHandler = _this.debouncingFlyoutEvent(function () {
            _this._isOutOfRange = false;
            for (var i in _this._scrollableAncestors) {
                if (FlyoutUtils.isOutOfRange(_this._flyoutElement, _this._scrollableAncestors[i])) {
                    _this._isOutOfRange = true;
                    break;
                }
            }
            _this.updateDom();
        }, 100);
        _this.debouncingFlyoutEvent = _this.debouncingFlyoutEvent.bind(_this);
        _this.handleMeasuring = _this.handleMeasuring.bind(_this);
        _this.setFlyoutRef = _this.setFlyoutRef.bind(_this);
        _this.handlePointerDown = _this.handlePointerDown.bind(_this);
        _this.handleOnScroll = _this.props.enableTrackOnScroll ? _this.handleOnScroll.bind(_this) : null;
        _this.handleWindowBlur = _this.handleWindowBlur.bind(_this);
        _this._isClickInsideFlyout = _this._isClickInsideFlyout.bind(_this);
        return _this;
    }
    Object.defineProperty(InnerFlyout.prototype, "flyoutElement", {
        // TODO: get rid of this getter when we get the "readonly" keyword implemented in TypeScript.
        /**
         * Returns the flyout element if rendered. Needed for unit-testing purposes only.
         */
        get: function () {
            return this._flyoutElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the composite identifier for the root container of the flyout group.
     */
    InnerFlyout.prototype.getFlyoutRootId = function () {
        if (this.props.isPortalToElement && this.props.portalContainerId) {
            return this.props.portalContainerId;
        }
        return InnerFlyout.generateFlyoutId(this.props.parentCustomControlId, this.props.groupId);
    };
    /**
     * React life-cycle method, get called once right after the component is added to the virtual DOM.
     */
    InnerFlyout.prototype.componentDidMount = function () {
        var _this = this;
        if (this.props.hasDynamicContent) {
            this._measuringSubscriber = {
                onMeasure: this.handleMeasuring,
                getComponent: function () {
                    return _this._flyoutElement;
                },
            };
            MeasuringHandler_1.MeasuringHandler.getInstance().addMeasuringSubscribers(this._measuringSubscriber);
        }
        this.updateDom();
        this._subscribeFlyoutPopupManager();
    };
    /**
     * Generates the flyout Id
     */
    InnerFlyout.generateFlyoutId = function (parentCustomControlId, groupId) {
        return ((parentCustomControlId ? parentCustomControlId + "|" : "") +
            (groupId ? FLYOUT_ROOT_NODE_ID + "_" + groupId : FLYOUT_ROOT_NODE_ID));
    };
    InnerFlyout.prototype.componentDidUpdate = function () {
        this.updateDom();
    };
    /**
     * Component will unmount lifecycle method. Cleaning everything from DOM that we might have left.
     */
    InnerFlyout.prototype.componentWillUnmount = function () {
        this.removeFromDom();
        this.resetFocus();
        if (this.props.hasDynamicContent) {
            MeasuringHandler_1.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._measuringSubscriber);
        }
        FlyoutPopupManager_1.FlyoutPopupManager.getInstance().removeSubscribers(this._managerSubscriber);
    };
    /**
     * Returns the element the flyout must be relative to.
     */
    InnerFlyout.prototype._getRelativeElement = function () {
        var relativeToElement = document.getElementById(this.props.relativeToElementId);
        if (relativeToElement && this.props.relativeToElementIdSelector)
            relativeToElement = this.props.relativeToElementIdSelector(relativeToElement);
        return relativeToElement;
    };
    /**
     * Calculates the position-related styles for the flyout element.
     */
    InnerFlyout.prototype.calculatePosition = function () {
        var style = {
            position: "absolute",
            visibility: this._isOutOfRange ? "hidden" : "visible",
            overflow: "auto",
        };
        var sizeToEnforce = Object.assign({}, this.props.size);
        var positionToSet;
        if (this.getIsAbsolute()) {
            positionToSet = this.props.position;
        }
        else if (this.getIsRelative()) {
            var relativeToElement = this._getRelativeElement();
            if (!relativeToElement) {
                // Hide flyout when relative element isn't found on page
                style.visibility = "hidden";
                return style;
            }
            this._updateActualSize();
            // Check to see if the child ReactNode element has maxWidth or maxHeight set anywhere and use it if it does
            // If the maxHeight/maxWidth values are set then the Flyout uses it by default during rendering,
            //  so we should use it during our calculations for best placement
            var childElement = this.props.children;
            if (childElement && childElement.props && childElement.props.style) {
                var sizeRegex = new RegExp("^(\\d+)\\s*px$");
                var propStyle = childElement.props.style;
                var matches = void 0;
                if (!sizeToEnforce.maxHeight && propStyle.maxHeight && (matches = sizeRegex.exec(propStyle.maxHeight))) {
                    sizeToEnforce.maxHeight = parseInt(matches[1], 10);
                }
                if (!sizeToEnforce.maxWidth && propStyle.maxWidth && (matches = sizeRegex.exec(propStyle.maxWidth))) {
                    sizeToEnforce.maxWidth = parseInt(matches[1], 10);
                }
            }
            var sizeForCalc = {
                width: sizeToEnforce.width || (this._actualSize && this._actualSize.width),
                maxWidth: sizeToEnforce.maxWidth || (this._actualSize && this._actualSize.maxWidth),
                height: sizeToEnforce.height || (this._actualSize && this._actualSize.height),
                maxHeight: sizeToEnforce.maxHeight || (this._actualSize && this._actualSize.maxHeight),
            };
            var direction = this.props.flyoutDirection === null || this.props.flyoutDirection === undefined
                ? FlyoutDirection_1.default.right
                : this.props.flyoutDirection;
            var secondaryDirection = null;
            if (this._lastDirection !== null && this._lastDirection !== undefined) {
                secondaryDirection = direction;
                direction = this._lastDirection;
            }
            if (this.props.enforceDirection) {
                positionToSet = FlyoutUtils.calculateFlyoutPosition(sizeForCalc, direction, relativeToElement);
                this._lastDirection = direction;
            }
            else {
                var calculatedInfo = FlyoutUtils.calculateFlyoutPreferredPosition(sizeForCalc, direction, relativeToElement, secondaryDirection);
                positionToSet = calculatedInfo.Position;
                this._lastDirection = calculatedInfo.Direction;
            }
            positionToSet.left = positionToSet.left >= 0 ? positionToSet.left : 0;
        }
        else {
            var error = new Error("Cannot recognize positioning approach");
            XrmProxy_1.default.Reporting.reportFailure(PRIMITIVE_COMPONENT_NAME, error);
            throw error;
        }
        // Now, we need to correct the sizeToEnforce depending on whether the flyout needs a scroll.
        if (this._actualSize) {
            var clipping = FlyoutUtils.calculateClipping(positionToSet, this._actualSize);
            var documentViewport = FlyoutUtils.getDocumentViewportOffset();
            if (clipping.width && !sizeToEnforce.width) {
                if (positionToSet.left < documentViewport.left)
                    positionToSet.left = documentViewport.left;
                if (positionToSet.right < documentViewport.right)
                    positionToSet.right = documentViewport.right;
            }
            if (clipping.height && !sizeToEnforce.height && !positionToSet.bottom && positionToSet.bottom !== 0) {
                if (positionToSet.top < documentViewport.top)
                    positionToSet.top = documentViewport.top;
                if (positionToSet.bottom < documentViewport.bottom)
                    positionToSet.bottom = documentViewport.bottom;
            }
        }
        // Now, assign the styles
        var maximumSize = FlyoutUtils.calculateMaximumSize(positionToSet);
        var flyoutActualSize = maximumSize;
        if (sizeToEnforce.maxHeight && sizeToEnforce.maxHeight < maximumSize.maxHeight) {
            flyoutActualSize.maxHeight = sizeToEnforce.maxHeight;
        }
        if (sizeToEnforce.maxWidth && sizeToEnforce.maxWidth < maximumSize.maxWidth) {
            flyoutActualSize.maxWidth = sizeToEnforce.maxWidth;
        }
        Object.assign(style, positionToSet, flyoutActualSize);
        // Explicitly assign the size just if it was enforced thru the "size" prop
        // otherwise leave it a free-size container.
        if (sizeToEnforce.height)
            style.height = sizeToEnforce.height;
        if (sizeToEnforce.width)
            style.width = sizeToEnforce.width;
        return style;
    };
    InnerFlyout.prototype._updateActualSize = function () {
        // skip updating on first "fake" pre-rendering cycle
        if (!this._actualSize)
            return;
        var elementFullSize = FlyoutUtils.getElementFullSize(this._flyoutElement);
        // Some flyouts can be hidden by "display: none" style and have width/height equal to 0.
        // In this case we don't reassign actualSize
        if (elementFullSize.width === 0 || elementFullSize.height === 0)
            return;
        // Update actualSize only when size changed
        if (this._actualSize.width !== elementFullSize.width || this._actualSize.height !== elementFullSize.height) {
            this._actualSize = FlyoutUtils.getElementFullSize(this._flyoutElement);
        }
    };
    /**
     * Makes sure the root node exists in the document DOM.
     */
    InnerFlyout.prototype.ensureRootNode = function () {
        if (!this.rootNode) {
            //in generating flyout rootId logic, it will generate a id unless it's portal to the dialog.
            //rootNode will be dialog container ID when rendering flyout on dialog
            this.rootNode = document.getElementById(this.getFlyoutRootId());
            if (!this.rootNode) {
                this.rootNode = document.createElement("div");
                this.rootNode.id = this.getFlyoutRootId();
                this.rootNode.setAttribute("data-id", this.rootNode.id);
                this.rootNode.setAttribute("flyoutRoot", this.props.isPortalToElement && this.props.portalContainerId ? "" : FLYOUT_ROOT_NODE_ID);
                document.body.appendChild(this.rootNode);
            }
        }
    };
    InnerFlyout.prototype.debouncingFlyoutEvent = function (handler, delay) {
        if (delay === void 0) { delay = 200; }
        var fireEventHandler = 0;
        return function () {
            if (!fireEventHandler) {
                fireEventHandler = window.setTimeout(function () {
                    handler();
                    fireEventHandler = 0;
                }, delay);
            }
        };
    };
    /**
     * Recalculates flyout's position after measuring
     */
    InnerFlyout.prototype.handleMeasuring = function (width, height) {
        // if container's size really changed
        if (this._actualSize.width !== width || this._actualSize.height !== height) {
            this._actualSize.width = width;
            this._actualSize.height = height;
            this.updateDom();
        }
    };
    /**
     * Returns true if the relative positioning is enabled for the flyout.
     */
    InnerFlyout.prototype.getIsRelative = function () {
        return this.props.positionType === "relative" || (!this.props.positionType && this.props.relativeToElementId);
    };
    /**
     * Returns true if the absolute positioning is enabled for the flyout.
     */
    InnerFlyout.prototype.getIsAbsolute = function () {
        return this.props.positionType === "absolute" || (!this.props.positionType && this.props.position);
    };
    /**
     * Method for storing reference to flyout element
     */
    InnerFlyout.prototype.setFlyoutRef = function (view) {
        this._flyoutElement = ReactDOM.findDOMNode(view);
    };
    /**
     * Adds or updates the flyout element in actual DOM.
     */
    InnerFlyout.prototype.updateDom = function () {
        var _this = this;
        var props = {};
        if (this.props.testhooks) {
            props.testhooks = this.props.testhooks;
        }
        if (this.props.children) {
            // Check to see if there are any popups we need to render the flyout on top of.  Only check on initial creation to not affect any controls opened afterwards
            if (this._seeMorePopupCount === null) {
                this._seeMorePopupCount = CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().getPopupCount();
            }
            var shouldHaveZIndex = this._seeMorePopupCount > 0;
            this.ensureRootNode();
            // make sure the root node exists in DOM.
            if (!this.parentFlyoutNode) {
                this.parentFlyoutNode = document.createElement("div");
                this.rootNode.appendChild(this.parentFlyoutNode);
            }
            var combinedStyle = Object.assign({}, this.props.flyoutStyle, // the consumer's styles get assigned here.
            this.calculatePosition(), // the optimal calculated position of the flyout is set via styles here.
            { boxSizing: "border-box" }, // we need to make sure all the borders are properly aligned to the relative element.
            this.props.rootZIndex || shouldHaveZIndex ? { zIndex: 1 } : {}, (!!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident")) &&
                this._flyoutElement === undefined
                ? { left: 0 }
                : {} //In IE components are not able to render out if it's close to viewport
            );
            var isPrerenderRequired_1 = !this._actualSize;
            if (isPrerenderRequired_1) {
                // Seems like we need to have a "fake" render first, to determine the actual size of the content.
                var docSize = FlyoutUtils.getDocumentContentSize();
                Object.assign(combinedStyle, {
                    bottom: null,
                    right: null,
                    maxWidth: docSize.width,
                    maxHeight: docSize.height,
                    visibility: "hidden",
                });
            }
            var flyoutView = (React.createElement(View_1.View, __assign({ id: this.props.id, style: combinedStyle, ref: this.setFlyoutRef }, this.props), this.props.children));
            ReactDOM.unstable_renderSubtreeIntoContainer(this, flyoutView, this.parentFlyoutNode, function () {
                _this.focusInnerElement(isPrerenderRequired_1);
                // Here we cache the actual size of the flyout, so that it could be used later for
                // advanced decision-making in flyout positioning.
                _this._actualSize = FlyoutUtils.getElementFullSize(_this._flyoutElement);
                if (!_this._isFlyoutShown) {
                    window.addEventListener("blur", _this.handleWindowBlur);
                    // If the relative element changes its position or size, we need to also reposition/resize the flyout.
                    // However, right now there's no effective way to do that besides reacting to window.onresize.
                    // Probably, later, if we employ a library like "CSS Element Queries", we can cover more cases.
                    window.addEventListener("resize", _this._resizeHandler);
                    if (_this.getIsRelative()) {
                        // if any of the ancestors scroll, we inherently need to reposition the flyout
                        _this._scrollableAncestors = FlyoutUtils.getScrollableAncestors(_this._getRelativeElement(), document.body);
                        for (var _i = 0, _a = _this._scrollableAncestors; _i < _a.length; _i++) {
                            var element = _a[_i];
                            element.addEventListener("scroll", _this._scrollHandler);
                        }
                    }
                }
                _this._isFlyoutShown = true;
                if (isPrerenderRequired_1) {
                    _this.updateDom();
                }
            });
        }
        else {
            this.removeFromDom();
            this.resetFocus();
        }
    };
    InnerFlyout.prototype.focusInnerElement = function (preRenderRequired) {
        if (!preRenderRequired && this.props.focusCallback && this.props.focusElementId && !this._wasInnerFocusRequested) {
            this.props.focusCallback(this.props.focusElementId);
            this._wasInnerFocusRequested = true;
        }
    };
    /**
     * Removes the flyout element from DOM.
     */
    InnerFlyout.prototype.removeFromDom = function () {
        if (this.parentFlyoutNode) {
            ReactDOM.unmountComponentAtNode(this.parentFlyoutNode);
            this.rootNode.removeChild(this.parentFlyoutNode);
            this.parentFlyoutNode = undefined;
            if (this.rootNode.childElementCount === 0) {
                document.body.removeChild(this.rootNode);
                this.rootNode = undefined;
            }
        }
        if (this._isFlyoutShown) {
            // Remove the event leftovers we've put before.
            window.removeEventListener("blur", this.handleWindowBlur);
            if (this.getIsRelative()) {
                window.removeEventListener("resize", this._resizeHandler);
                if (this._scrollableAncestors) {
                    for (var _i = 0, _a = this._scrollableAncestors; _i < _a.length; _i++) {
                        var element = _a[_i];
                        element.removeEventListener("scroll", this._scrollHandler);
                    }
                }
            }
        }
        this._isFlyoutShown = false;
    };
    /**
     * Reset focus element to originate button.
     */
    InnerFlyout.prototype.resetFocus = function () {
        if (this.props.focusElementId && this.props.relativeToElementId && this.props.focusCallback) {
            this.props.focusCallback(this.props.relativeToElementId);
        }
    };
    /**
     *
     * @param event
     */
    InnerFlyout.prototype._isClickInsideFlyout = function (event) {
        //We are not to manage fabric flyout
        if ((this._flyoutElement && this._flyoutElement.contains(event.target)) ||
            document.querySelector(".ms-Layer"))
            return true;
        var children = CustomControlFlyoutParentHelper_1.CustomControlFlyoutParentHelper.getInstance().getChildRoots(this.getFlyoutRootId());
        for (var i = 0; i < children.length; i++) {
            var childNode = document.getElementById(children[i]);
            if (childNode && childNode.contains(event.target)) {
                return true;
            }
        }
        return false;
    };
    InnerFlyout.prototype.handleOnScroll = function (event) {
        this.ensureRootNode();
        //This is actually for scroll outside event
        if (!this._isClickInsideFlyout(event) && this.props.dismissOnScroll && this.props.onOutsideClick)
            this.props.onOutsideClick(event);
    };
    /**
     * Handles a click outside the flyout chain.
     */
    InnerFlyout.prototype.handlePointerDown = function (event) {
        this.ensureRootNode();
        if (!this._isClickInsideFlyout(event) && this.props.onOutsideClick)
            this.props.onOutsideClick(event);
    };
    /**
     * Handles a blur from window object.
     * We need to handle this event in case if click was made in iframe.
     * Events from iframe do not bubble up, but clicking on iframe will fires
     * blur event on main window object and this will be signal to close flyout.
     */
    InnerFlyout.prototype.handleWindowBlur = function (event) {
        this.ensureRootNode();
        if (this.props.onOutsideClick && !this.props.keepOpenOnWindowBlur) {
            var active = document.activeElement;
            if (active && active.tagName.toUpperCase() === "IFRAME") {
                var fakeEvent_1 = Object.create(event, {
                    target: {
                        value: active,
                    },
                });
                if (this._isClickInsideFlyout(fakeEvent_1)) {
                    return;
                }
            }
            // When blur event is a result of clicking on iframe,
            // event.target will be window object. But further in the code
            // we use Node.contains to check event.target
            // and it will cause an error "typeError: Failed to execute 'contains' on 'Node': parameter 1 is not of type 'Node".
            // So I fake event.target with current root node.
            var fakeEvent = Object.create(event, {
                target: {
                    value: this.rootNode,
                },
            });
            this.props.onOutsideClick(fakeEvent);
        }
    };
    /**
     * Renders the anchor control for the flyout.
     */
    InnerFlyout.prototype.render = function () {
        return null;
    };
    InnerFlyout.prototype._subscribeFlyoutPopupManager = function () {
        var _this = this;
        this._managerSubscriber = {
            type: IFlyoutPopupManagerSubscriber_1.FlyoutPopupManagerSubscriberType.Flyout,
            isClickInsideSubscriber: this._isClickInsideFlyout,
            onPointerDown: this.handlePointerDown,
            onScroll: this.props.enableTrackOnScroll ? this.handleOnScroll : null,
            getComponent: function () {
                return _this._flyoutElement;
            },
        };
        FlyoutPopupManager_1.FlyoutPopupManager.getInstance().addSubscribers(this._managerSubscriber);
    };
    /**
     * Display name for React dev tools
     */
    InnerFlyout.displayName = "Flyout";
    return InnerFlyout;
}(React.Component));
exports.InnerFlyout = InnerFlyout;
var Flyout = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerFlyout);
exports.Flyout = Flyout;
exports.default = Flyout;

},{"../../CustomControls/Components/Helpers/CustomControlFlyoutParentHelper":60,"../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper":62,"../../CustomControls/Utilities/TelemetryManager":109,"../../CustomControls/Utilities/XrmProxy":110,"../Common/FlyoutPopupManager/FlyoutPopupManager":1,"../Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber":2,"../Common/MeasuringHandler/MeasuringHandler":4,"./FelaConnectHelper":17,"./Flyout/FlyoutDirection":21,"./Flyout/Utils":22,"./View":55,"react":undefined,"react-dom":undefined,"react-fela":undefined}],21:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Enum for Flyout Direction
 */
var FlyoutDirection;
(function (FlyoutDirection) {
    FlyoutDirection[FlyoutDirection["left"] = 0] = "left";
    FlyoutDirection[FlyoutDirection["right"] = 1] = "right";
    FlyoutDirection[FlyoutDirection["up"] = 2] = "up";
    FlyoutDirection[FlyoutDirection["down"] = 3] = "down";
    FlyoutDirection[FlyoutDirection["leftup"] = 4] = "leftup";
    FlyoutDirection[FlyoutDirection["rightup"] = 5] = "rightup";
    FlyoutDirection[FlyoutDirection["upleft"] = 6] = "upleft";
    FlyoutDirection[FlyoutDirection["downleft"] = 7] = "downleft";
})(FlyoutDirection || (FlyoutDirection = {}));
exports.default = FlyoutDirection;

},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FlyoutDirection_1 = require("./FlyoutDirection");
var TelemetryManager_1 = require("../../../CustomControls/Utilities/TelemetryManager");
var XrmProxy_1 = require("../../../CustomControls/Utilities/XrmProxy");
var NATIVE_SHIM = "topBar-mobile";
/**
 * Returns the size of the viewport.
 */
function getDocumentViewportSize() {
    return {
        width: document.body.offsetWidth,
        height: document.body.offsetHeight,
    };
}
/**
 * Returns the position of the viewport.
 */
function getDocumentViewportOffset() {
    //Scrolling mechanism should be different for shim. As our page doesn't scroll only the content
    //Therefore, we don't need to calculate out the scroll height, only the height of the view port - the top bar for mobile height
    var mobileTopBar = document.getElementById(NATIVE_SHIM);
    var documentContentSize = getDocumentContentSize();
    var documentSize = getDocumentViewportSize();
    return {
        left: document.body.scrollLeft,
        top: document.body.scrollTop,
        right: documentContentSize.width - documentSize.width - document.body.scrollLeft,
        bottom: mobileTopBar
            ? mobileTopBar.offsetHeight
            : documentContentSize.height - documentSize.height - document.body.scrollTop,
    };
}
exports.getDocumentViewportOffset = getDocumentViewportOffset;
/**
 * Returns the actual document (scrollable) content size.
 */
function getDocumentContentSize() {
    return {
        width: document.body.scrollWidth,
        height: document.body.scrollHeight,
    };
}
exports.getDocumentContentSize = getDocumentContentSize;
/**
 * Returns the full size of the given element (as if it has no content overflow).
 */
function getElementFullSize(element) {
    return {
        width: element.offsetWidth - element.clientWidth + element.scrollWidth,
        height: element.offsetHeight - element.clientHeight + element.scrollHeight,
    };
}
exports.getElementFullSize = getElementFullSize;
/**
 * Calculates the clipping of the given position+size against the document viewport.
 */
function calculateClipping(position, size, documentSize, documentOffset) {
    if (documentSize === void 0) { documentSize = getDocumentViewportSize(); }
    if (documentOffset === void 0) { documentOffset = getDocumentViewportOffset(); }
    var result = {};
    var localSize = {
        width: size.maxWidth && size.width && size.maxWidth > 0 && size.maxWidth < size.width
            ? size.maxWidth
            : size.width
                ? size.width
                : 0,
        height: size.maxHeight && size.height && size.maxHeight > 0 && size.maxHeight < size.height
            ? size.maxHeight
            : size.height
                ? size.height
                : 0,
    };
    if (typeof position.left === "number") {
        // Clipping to the left
        result.width = Math.max(documentOffset.left - position.left, 0);
        // Clipping to the right
        result.width += Math.max(position.left + localSize.width - documentSize.width - documentOffset.left, 0);
    }
    else if (typeof position.right === "number") {
        // Clipping to the right
        result.width = Math.max(documentOffset.right - position.right, 0);
        // Clipping to the left
        result.width += Math.max(position.right + localSize.width - documentSize.width - documentOffset.right, 0);
    }
    if (typeof position.top === "number") {
        // Clipping to the up
        result.height = Math.max(documentOffset.top - position.top, 0);
        // Clipping to the down
        result.height += Math.max(position.top + localSize.height - documentSize.height - documentOffset.top, 0);
    }
    else if (typeof position.bottom === "number") {
        // Clipping to the down
        result.height = Math.max(documentOffset.bottom - position.bottom, 0);
        // Clipping to the up
        result.height += Math.max(position.bottom + localSize.height - documentSize.height - documentOffset.bottom, 0);
    }
    return result;
}
exports.calculateClipping = calculateClipping;
/**
 * Returns maximum flyout size within window's bounds
 * @param position
 * @param documentSize
 * @param documentOffset
 * @returns {ISize}
 */
function calculateMaximumSize(position, documentSize, documentOffset) {
    if (documentSize === void 0) { documentSize = getDocumentViewportSize(); }
    if (documentOffset === void 0) { documentOffset = getDocumentViewportOffset(); }
    var result = {};
    if (typeof position.left === "number") {
        // Limiting flyout width within window's bounds
        result.maxWidth = documentSize.width + documentOffset.left - position.left;
    }
    else if (typeof position.right === "number") {
        // Limiting flyout width within window's bounds
        result.maxWidth = documentSize.width + documentOffset.right - position.right;
    }
    if (typeof position.top === "number" || typeof position.bottom === "number") {
        // Limiting flyout height within window's bounds
        result.maxHeight = documentSize.height + documentOffset.top - position.top;
    }
    return result;
}
exports.calculateMaximumSize = calculateMaximumSize;
/**
 * Returns true when flyout is out of range of container
 * @param flyoutNode
 * @param container
 * @returns {boolean}
 */
function isOutOfRange(flyoutNode, container) {
    return (flyoutNode.getBoundingClientRect().top < container.getBoundingClientRect().top ||
        flyoutNode.getBoundingClientRect().bottom > container.getBoundingClientRect().bottom);
}
exports.isOutOfRange = isOutOfRange;
/**
 * Returns the list of directions to use to open a flyout, in the order of priority.
 */
function getDirectionPriorities(initialDirection) {
    switch (initialDirection) {
        case FlyoutDirection_1.default.down:
            return [
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.upleft,
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.leftup,
            ];
        case FlyoutDirection_1.default.downleft:
            return [
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.upleft,
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.leftup,
            ];
        case FlyoutDirection_1.default.right:
            return [
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.leftup,
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.upleft,
            ];
        case FlyoutDirection_1.default.rightup:
            return [
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.leftup,
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.upleft,
            ];
        case FlyoutDirection_1.default.up:
            return [
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.upleft,
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.leftup,
            ];
        case FlyoutDirection_1.default.upleft:
            return [
                FlyoutDirection_1.default.upleft,
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.leftup,
            ];
        case FlyoutDirection_1.default.left:
            return [
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.leftup,
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.upleft,
            ];
        case FlyoutDirection_1.default.leftup:
            return [
                FlyoutDirection_1.default.leftup,
                FlyoutDirection_1.default.left,
                FlyoutDirection_1.default.rightup,
                FlyoutDirection_1.default.right,
                FlyoutDirection_1.default.down,
                FlyoutDirection_1.default.downleft,
                FlyoutDirection_1.default.up,
                FlyoutDirection_1.default.upleft,
            ];
        default:
            var jsonDirection = "";
            try {
                jsonDirection = JSON.stringify(initialDirection);
            }
            catch (exception) {
                jsonDirection = "Unable to parse initial direction";
            }
            var error = new Error("Unexpected initial direction: " + jsonDirection);
            XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Primitive.Flyout", error);
            throw error;
    }
}
/**
 * Calculates the preferred position for the flyout.
 * @param size forced size of the flyout, could be empty.
 * @param preferredDirection the preferred direction that will be used if no room limitations encountered.
 * @param anchorElement the element used to position the flyout against.
 */
function calculateFlyoutPreferredPosition(size, preferredDirection, anchorElement, secondaryPreferred) {
    if (!size) {
        return {
            Position: calculateFlyoutPosition(size, preferredDirection, anchorElement),
            Direction: preferredDirection,
        };
    }
    else {
        var priorityList = void 0;
        // if we have a secondary preferred, and it doesn't match the priority, it means we had to adjust the position last render.
        // Give priority to that value first. If we find ourselves in a situation where that is impossible, reprioritized based on the secondary priority value
        if (secondaryPreferred !== null && secondaryPreferred !== preferredDirection) {
            // Base the priorities on the value given from the control
            priorityList = getDirectionPriorities(secondaryPreferred);
            // Remove the saved value from the middle of the list or the front
            priorityList.splice(priorityList.indexOf(preferredDirection), 1);
            priorityList.unshift(preferredDirection);
        }
        else {
            priorityList = getDirectionPriorities(preferredDirection);
        }
        var directionBest = preferredDirection;
        var clippingBest = void 0;
        var positionBest = void 0;
        for (var _i = 0, priorityList_1 = priorityList; _i < priorityList_1.length; _i++) {
            var direction = priorityList_1[_i];
            var position = calculateFlyoutPosition(size, direction, anchorElement);
            var clipping = calculateClipping(position, size);
            if (clipping.height === 0 && clipping.width === 0) {
                positionBest = position;
                directionBest = direction;
                clippingBest = clipping;
                // No need to iterate any further
                break;
            }
            if (!clippingBest) {
                positionBest = position;
                directionBest = direction;
                clippingBest = clipping;
            }
            else {
                var clippingBestSum = clippingBest.width + clippingBest.height;
                var clippingSum = clipping.width + clipping.height;
                if (clippingSum < clippingBestSum) {
                    positionBest = position;
                    directionBest = direction;
                    clippingBest = clipping;
                }
            }
        }
        // By this moment we must have the best position.
        return {
            Position: positionBest,
            Direction: directionBest,
        };
    }
}
exports.calculateFlyoutPreferredPosition = calculateFlyoutPreferredPosition;
/**
 * Calculates the position for a relatively positioned flyout.
 */
function calculateFlyoutPosition(size, flyoutDirection, anchorElement) {
    var itemOffset = getOffset(anchorElement, document.body);
    var itemRectVp = anchorElement.getBoundingClientRect();
    var bodySize = getDocumentViewportSize();
    var itemRect = {
        top: itemOffset.top,
        left: itemOffset.left,
        width: itemRectVp.width,
        height: itemRectVp.height,
        right: itemOffset.left + itemRectVp.width,
        bottom: itemOffset.top + itemRectVp.height,
    };
    // Default values assume the "right" flyout direction.
    var top = itemRect.top;
    var left = itemRect.right;
    var right = null;
    var bottom = null;
    function getMaxWidth() {
        return size.maxWidth && size.maxWidth < size.width ? size.maxWidth : size.width;
    }
    function getMaxHeight() {
        return size.maxHeight && size.maxHeight < size.height ? size.maxHeight : size.height;
    }
    switch (flyoutDirection) {
        case FlyoutDirection_1.default.rightup:
            if (size && size.height) {
                top = itemRect.bottom - getMaxHeight();
            }
            else {
                top = undefined;
                bottom = bodySize.height - itemRect.bottom;
            }
            break;
        case FlyoutDirection_1.default.up:
            if (size && size.height) {
                top = itemRect.top - getMaxHeight();
            }
            else {
                bottom = bodySize.height - itemRect.top;
                top = undefined;
            }
            left = itemRect.left;
            break;
        case FlyoutDirection_1.default.upleft:
            if (size && size.height) {
                top = itemRect.top - getMaxHeight();
            }
            else {
                bottom = bodySize.height - itemRect.top;
                top = undefined;
            }
            if (size && size.width) {
                left = itemRect.right - getMaxWidth();
            }
            else {
                left = undefined;
                right = bodySize.width - itemRect.right;
            }
            break;
        case FlyoutDirection_1.default.down:
            top = itemRect.bottom;
            left = itemRect.left;
            break;
        case FlyoutDirection_1.default.downleft:
            top = itemRect.bottom;
            if (size && size.width) {
                left = itemRect.right - getMaxWidth();
            }
            else {
                left = undefined;
                right = bodySize.width - itemRect.right;
            }
            break;
        case FlyoutDirection_1.default.left:
            top = itemRect.top;
            if (size && size.width) {
                left = itemRect.left - getMaxWidth();
            }
            else {
                right = bodySize.width - itemRect.left;
            }
            break;
        case FlyoutDirection_1.default.leftup:
            if (size && size.height) {
                top = itemRect.bottom - getMaxHeight();
            }
            else {
                top = undefined;
                bottom = bodySize.height - itemRect.bottom;
            }
            if (size && size.width) {
                left = itemRect.left - getMaxWidth();
            }
            else {
                right = bodySize.width - itemRect.left;
            }
            break;
    }
    return { left: left, top: top, right: right, bottom: bottom };
}
exports.calculateFlyoutPosition = calculateFlyoutPosition;
/**
 * Returns the offset of the given html element (from the top left corner).
 */
function getOffset(element, topParent) {
    if (topParent === void 0) { topParent = document.body; }
    var topParentRect = topParent.getBoundingClientRect();
    var elementRect = element.getBoundingClientRect();
    return { top: elementRect.top - topParentRect.top, left: elementRect.left - topParentRect.left };
}
/**
 * Returns true if the given element has or could have a scroll bar.
 */
function isScrollable(element) {
    var computedStyle = window.getComputedStyle(element);
    return (element &&
        computedStyle &&
        (computedStyle.overflow === "auto" ||
            computedStyle.overflow === "scroll" ||
            computedStyle.overflowX === "auto" ||
            computedStyle.overflowX === "scroll" ||
            computedStyle.overflowY === "auto" ||
            computedStyle.overflowY === "scroll"));
}
exports.isScrollable = isScrollable;
/**
 * Returns the list of the scrollable ancestors for the given element.
 */
function getScrollableAncestors(element, topParent) {
    var result = [];
    element = element && element.parentElement;
    while (element && element !== topParent) {
        if (isScrollable(element))
            result.push(element);
        element = element.parentElement;
    }
    return result;
}
exports.getScrollableAncestors = getScrollableAncestors;

},{"../../../CustomControls/Utilities/TelemetryManager":109,"../../../CustomControls/Utilities/XrmProxy":110,"./FlyoutDirection":21}],23:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");
var XrmProxy_1 = require("../../CustomControls/Utilities/XrmProxy");
var TelemetryManager_1 = require("../../CustomControls/Utilities/TelemetryManager");
var PRIMITIVE_COMPONENT_NAME = TelemetryManager_1.COMPONENT_NAME + ".Primitive.FontIcon";
var FontIcon = /** @class */ (function (_super) {
    __extends(FontIcon, _super);
    function FontIcon(props, context) {
        var _this = _super.call(this, props, context) || this;
        if (props && props.type === undefined) {
            var error = Error("FontIcon type property cannot be null");
            XrmProxy_1.default.Reporting.reportFailure(PRIMITIVE_COMPONENT_NAME, error);
            throw error;
        }
        return _this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    FontIcon.prototype.getElementName = function () {
        return "span";
    };
    /**
     * Returns combination of fela classes and icon's symbol class name
     */
    FontIcon.prototype.getElementClassName = function () {
        var styleClasses = this.props.styles ? " " + this.props.styles : "";
        return this.getSymbolClassName(this.props.type) + styleClasses;
    };
    /**
     * Display name for React dev tools
     */
    FontIcon.displayName = "FontIcon";
    return FontIcon;
}(ComponentBase_1.ComponentBase));
exports.FontIcon = FontIcon;

},{"../../CustomControls/Utilities/TelemetryManager":109,"../../CustomControls/Utilities/XrmProxy":110,"./ComponentBase":15}],24:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * Hyperlink component
 */
var InnerHyperlink = /** @class */ (function (_super) {
    __extends(InnerHyperlink, _super);
    function InnerHyperlink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerHyperlink.prototype.getElementName = function () {
        return "a";
    };
    /**
     * Returns the specific element props.
     */
    InnerHyperlink.prototype.getElementProps = function () {
        return {
            href: this.props.href || "#",
            target: this.props.target,
        };
    };
    return InnerHyperlink;
}(ComponentBase_1.ComponentBase));
exports.InnerHyperlink = InnerHyperlink;
var Hyperlink = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerHyperlink);
exports.Hyperlink = Hyperlink;

},{"./ComponentBase":15,"./FelaConnectHelper":17,"react-fela":undefined}],25:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Transforms IFlexboxContainerStyle to React.CSSProperties
 */
function applyIFlexboxContainerProp(style) {
    if (!style) {
        return null;
    }
    var cssStyle = {};
    cssStyle.display = style.display ? style.display : "flex";
    return cssStyle;
}
exports.applyIFlexboxContainerProp = applyIFlexboxContainerProp;
/**
 * returns css class name that should be added to dom element.
 */
function getCssClassName(display) {
    if (display && (display === "flex" || display === "inlineflexbox")) {
        return display === "flex" ? "flexbox" : "inlineflexbox";
    }
    else {
        return "";
    }
}
exports.getCssClassName = getCssClassName;

},{}],26:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
var InnerIFrame = /** @class */ (function (_super) {
    __extends(InnerIFrame, _super);
    /**
     * Constructor for IFrame
     */
    function InnerIFrame(props) {
        var _this = _super.call(this, props) || this;
        /**
         * The underlying iframe element
         */
        _this._iframeElement = null;
        /**
         * The origin, derived from src
         */
        _this._origin = null;
        _this._onLoad = _this._onLoad.bind(_this);
        _this._origin = _this._normalizeUrl(props.src);
        return _this;
    }
    /**
     * Standardizes url into this format: http://domain.com:80
     */
    InnerIFrame.prototype._normalizeUrl = function (url) {
        var a = document.createElement("a");
        a.href = url;
        return a.protocol + "//" + a.host;
    };
    /**
     * Handler for onLoad event
     */
    InnerIFrame.prototype._onLoad = function () {
        if (this.props.onLoad) {
            this.props.onLoad();
        }
        if (this.props.onReadyStateComplete) {
            this.props.onReadyStateComplete();
        }
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerIFrame.prototype.getElementName = function () {
        return "iframe";
    };
    /**
     * Returns the specific element props.
     */
    InnerIFrame.prototype.getElementProps = function () {
        var props = {
            src: this.props.src,
            title: this.props.title,
            onLoad: this._onLoad,
        };
        if (this.props.security) {
            props.security = this.props.security;
            props.sandbox = "";
        }
        if (this.props.scrolling) {
            props.scrolling = this.props.scrolling;
        }
        if (this.props.allow) {
            props.allow = this.props.allow;
        }
        props.ref = this._registerIframeElement.bind(this);
        return props;
    };
    /**
     * Invoked when the component is receiving new props
     */
    InnerIFrame.prototype.componentWillReceiveProps = function () {
        this._resetEventHandlers();
    };
    /**
     * Remove all event handlers
     */
    InnerIFrame.prototype._resetEventHandlers = function () {
        window.removeEventListener("message", this._receiveMessageHandler, false);
        this._receiveMessageHandler = null;
        if (this.props.registerSendMessageHandler) {
            this.props.registerSendMessageHandler(undefined);
        }
    };
    /**
     * Register the iframe dom element and attach event handlers
     */
    InnerIFrame.prototype._registerIframeElement = function (element) {
        this._iframeElement = element;
        if (this._iframeElement) {
            this._receiveMessageHandler = this._receiveMessage.bind(this);
            window.addEventListener("message", this._receiveMessageHandler, false);
            if (this.props.registerSendMessageHandler) {
                this.props.registerSendMessageHandler(this._sendMessage.bind(this));
            }
        }
        else {
            this._resetEventHandlers();
        }
    };
    /**
     * Component will unmount lifecycle method. Cleaning listeners here
     */
    InnerIFrame.prototype.componentWillUnmount = function () {
        this._resetEventHandlers();
    };
    /**
     * Handler for postMessage events
     */
    InnerIFrame.prototype._receiveMessage = function (event) {
        // confirm child iframe element exists and that event came only from that child
        if (!this._iframeElement || event.source !== this._iframeElement.contentWindow) {
            return;
        }
        if (this._normalizeUrl(event.origin) !== this._origin) {
            return;
        }
        if (this.props.onMessage) {
            this.props.onMessage(event);
        }
    };
    /**
     * Handler for sending messages to the child iframe
     */
    InnerIFrame.prototype._sendMessage = function (message) {
        if (!this._iframeElement) {
            return;
        }
        this._iframeElement.contentWindow.postMessage(message, this._origin);
    };
    /**
     * Display name for React dev tools
     */
    InnerIFrame.displayName = "IFrame";
    return InnerIFrame;
}(ComponentBase_1.ComponentBase));
exports.InnerIFrame = InnerIFrame;
var IFrame = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerIFrame);
exports.IFrame = IFrame;

},{"./ComponentBase":15,"./FelaConnectHelper":17,"react-fela":undefined}],27:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * Component representing an image base control
 */
var InnerImage = /** @class */ (function (_super) {
    __extends(InnerImage, _super);
    function InnerImage(props) {
        var _this = _super.call(this, props) || this;
        _this._onLoad = _this._onLoad.bind(_this);
        return _this;
    }
    /**
     * Handler for onLoad event
     */
    InnerImage.prototype._onLoad = function () {
        if (this.props.onLoad) {
            this.props.onLoad();
        }
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerImage.prototype.getElementName = function () {
        return "img";
    };
    /**
     * Returns the specific element props.
     */
    InnerImage.prototype.getElementProps = function () {
        var props = {
            src: this.props.source,
            onLoad: this._onLoad,
            alt: this.props.altText ? this.props.altText : "",
            title: this.props.title ? this.props.title : this.props.altText ? this.props.altText : "",
        };
        return props;
    };
    /**
     * Display name for React dev tools
     */
    InnerImage.displayName = "Image";
    return InnerImage;
}(ComponentBase_1.ComponentBase));
exports.InnerImage = InnerImage;
var Image = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerImage);
exports.Image = Image;

},{"./ComponentBase":15,"./FelaConnectHelper":17,"react-fela":undefined}],28:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * Label component
 */
var InnerLabel = /** @class */ (function (_super) {
    __extends(InnerLabel, _super);
    function InnerLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerLabel.prototype.getElementName = function () {
        return "label";
    };
    /**
     * Returns the specific element props.
     */
    InnerLabel.prototype.getElementProps = function () {
        return {
            htmlFor: this.props.forElementId,
            for: this.props.forElementId,
        };
    };
    /**
     * Component name for React Dev Tools
     */
    InnerLabel.displayName = "Label";
    return InnerLabel;
}(ComponentBase_1.ComponentBase));
exports.InnerLabel = InnerLabel;
var Label = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerLabel);
exports.Label = Label;

},{"./ComponentBase":15,"./FelaConnectHelper":17,"react-fela":undefined}],29:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var IFlexboxContainerStyle_1 = require("./IFlexboxContainerStyle");
var ComponentBase_1 = require("./ComponentBase");
var AttributeName = require("../Supplementary/Accessibility/Attributes/AttributeName");
var AriaLive = require("../Supplementary/Accessibility/Attributes/AriaLive");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * List component
 */
var InnerList = /** @class */ (function (_super) {
    __extends(InnerList, _super);
    function InnerList(props) {
        var _this = _super.call(this, props) || this;
        _this._refCallbackTrigger = _this._refCallbackTrigger.bind(_this);
        return _this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerList.prototype.getElementName = function () {
        return "ul";
    };
    /**
     * Returns the class name for the underlying element.
     * @param style the style to be applied to the underlying component, used for readout here.
     */
    InnerList.prototype.getFlexClassName = function (style) {
        return IFlexboxContainerStyle_1.getCssClassName(style ? style.display : null);
    };
    /**
     * Returns the specific element props.
     */
    InnerList.prototype.getElementProps = function () {
        var options = {};
        if (this.props.announceAccessibilityNotification === true) {
            options[AttributeName.ARIA_LIVE] = this.props.notificationType || AriaLive.POLITE;
        }
        return Object.assign(options, { ref: this.props.refCallback ? this._refCallbackTrigger : null });
    };
    /**
     * Triggers the callback function of the list reference.
     * @param list the list reference
     */
    InnerList.prototype._refCallbackTrigger = function (list) {
        this.props.refCallback(list);
    };
    /**
     * Returns the specific style for the underlying element.
     */
    InnerList.prototype.getElementStyle = function () {
        if (this.props.style) {
            return Object.assign({}, IFlexboxContainerStyle_1.applyIFlexboxContainerProp(this.props.style));
        }
    };
    /**
     * Component name for React Dev Tools
     */
    InnerList.displayName = "List";
    return InnerList;
}(ComponentBase_1.ComponentBase));
exports.InnerList = InnerList;
var List = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerList);
exports.List = List;

},{"../Supplementary/Accessibility/Attributes/AriaLive":56,"../Supplementary/Accessibility/Attributes/AttributeName":57,"./ComponentBase":15,"./FelaConnectHelper":17,"./IFlexboxContainerStyle":25,"react-fela":undefined}],30:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");
var AttributeName = require("../Supplementary/Accessibility/Attributes/AttributeName");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * ListItem component
 */
var InnerListItem = /** @class */ (function (_super) {
    __extends(InnerListItem, _super);
    function InnerListItem(props) {
        return _super.call(this, props) || this;
    }
    /**
     * Raised once the component gets selected.
     */
    InnerListItem.prototype._handleSelected = function (component) {
        if (this.props.onSelected) {
            this.props.onSelected(component);
        }
    };
    /**
     * Standard React life-cycle method, fired up when the component receives a new set of props.
     */
    InnerListItem.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.isSelected && nextProps.isSelected !== this.props.isSelected) {
            this._handleSelected(this);
        }
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerListItem.prototype.getElementName = function () {
        return "li";
    };
    /**
     * Returns the specific element props.
     */
    InnerListItem.prototype.getElementProps = function () {
        var _a;
        var props = (_a = {},
            _a[AttributeName.ARIA_SELECTED] = this.props.isSelected,
            _a["data-text"] = this.props.dataText,
            _a["data-value"] = this.props.dataValue,
            _a["data-expanded"] = this.props.dataExpanded,
            _a);
        return props;
    };
    /**
     * Component name for React Dev Tools
     */
    InnerListItem.displayName = "ListItem";
    return InnerListItem;
}(ComponentBase_1.ComponentBase));
exports.InnerListItem = InnerListItem;
function listItemRuleGen(props) {
    // We prefer the selected style, and then hovered style, and then the default style
    if (props && props.style) {
        if (props.isSelected && props.selectedStyle) {
            return Object.assign({}, Object.assign({}, props.style, props.selectedStyle), FelaConnectHelper_1.ruleGen(props));
        }
        return Object.assign(props.style, FelaConnectHelper_1.ruleGen(props));
    }
    return {};
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(listItemRuleGen, props); }; };
//Need to add prefix
var ListItem = ReactFela.connect(mapStylesToProps)(InnerListItem);
exports.ListItem = ListItem;

},{"../Supplementary/Accessibility/Attributes/AttributeName":57,"./ComponentBase":15,"./FelaConnectHelper":17,"react-fela":undefined}],31:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PropTypes = require("prop-types");


var ComponentBase_1 = require("./ComponentBase");
var FelaConnectHelper_1 = require("./FelaConnectHelper");
var XrmProxy_1 = require("../../CustomControls/Utilities/XrmProxy");
/**
 * https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/clientapi/reference/xrm-webapi/retrieverecord
 */
var SELECT_EMAIL_ADDRESS_CONTACT = "?$select=emailaddress1";
var SELECT_EMAIL_ADDRESS_USER = "?$select=internalemailaddress,azureactivedirectoryobjectid";
/**
 * Telemetry event for Live Persona primitive
 */
var CCF_TELEMETRY_EVENT = "uci_controlframework_usage";
var LivePersonaCardInitializationState;
(function (LivePersonaCardInitializationState) {
    LivePersonaCardInitializationState["NotInitialized"] = "NotInitialized";
    LivePersonaCardInitializationState["Initializing"] = "Initializing";
    LivePersonaCardInitializationState["Initialized"] = "Initialized";
    LivePersonaCardInitializationState["Failed"] = "Failed";
})(LivePersonaCardInitializationState || (LivePersonaCardInitializationState = {}));
/**
 * Component representing LiverPersonaHoverTarget
 */
var InnerLivePersonaCardHoverTarget = /** @class */ (function (_super) {
    __extends(InnerLivePersonaCardHoverTarget, _super);
    function InnerLivePersonaCardHoverTarget(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            identifiers: null,
            hasDataLoaded: false,
        };
        _this._isLivePersonCardLibAvailable = _this._isLivePersonCardLibAvailable.bind(_this);
        _this._onKeyDownOpenCard = _this._onKeyDownOpenCard.bind(_this);
        return _this;
    }
    /**
     * Returns the specific element props.
     */
    InnerLivePersonaCardHoverTarget.prototype.getElementProps = function () {
        var props = {
            accessibilityLabel: this.props.accessibilityLabel,
            displayName: this.props.displayName,
            emailAddress: this.props.emailAddress,
            entityReference: this.props.entityReference,
            personaType: this.props.personaType,
            recordId: this.props.recordId,
            registerOpenCardCallback: this.props.registerOpenCardCallback,
        };
        return props;
    };
    /**
     * Component did mount lifecycle method
     */
    InnerLivePersonaCardHoverTarget.prototype.componentDidMount = function () {
        if (this.props.registerOpenCardCallback) {
            this.props.registerOpenCardCallback(this._onKeyDownOpenCard);
        }
        if (this.props.registerHasLivePersonaCardLoadedCallback) {
            this.props.registerHasLivePersonaCardLoadedCallback(this._isLivePersonCardLibAvailable);
        }
    };
    /**
     * Called after the component is updated. According to the React documentation this is the preferred way of fetching data,
     * rather than using componentWillReceiveProps which will become unsupported in future releases.
     * https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change
     * When the record changes we need to fetch the identifier for the new record id.
     */
    InnerLivePersonaCardHoverTarget.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.recordId !== this.props.recordId) {
            this.setState({
                identifiers: null,
                hasDataLoaded: false,
            });
            this._getRecordData();
        }
    };
    /**
     * React control render method.
     */
    /* tslint:disable:crm-prohibit-standard-react-element */
    InnerLivePersonaCardHoverTarget.prototype.render = function () {
        var children = this.getElementChildren();
        if (this._isLivePersonCardLibAvailable() && this.state.hasDataLoaded) {
            var LivePersonaCardHoverTargetV2 = window.LivePersonaCardHoverTargetV2;
            if (LivePersonaCardHoverTargetV2) {
                return (React.createElement(LivePersonaCardHoverTargetV2, { cardParameters: this._makeLivePersonaCardParameters(false), tabIndex: "-1" },
                    React.createElement("span", { id: this.props.id },
                        " ",
                        children,
                        " ")));
            }
        }
        else if (this._isLivePersonCardLibAvailable() && !this.state.hasDataLoaded) {
            this._getRecordData();
        }
        return children;
    };
    InnerLivePersonaCardHoverTarget.prototype._makeLivePersonaCardParameters = function (cardOpenedByKeyboardShortcut) {
        var _this = this;
        var identifiers = this.state.identifiers || {};
        var hostAppId = this._getHostAppId();
        var cardAction = cardOpenedByKeyboardShortcut ? "Card opened from keyboard shortcut" : "Card opened by hovering";
        return {
            personaInfo: {
                identifiers: {
                    HostAppPersonaId: hostAppId,
                    Smtp: identifiers.smtp,
                    AadObjectId: identifiers.aadObjectId,
                    PersonaType: this.props.personaType,
                },
                displayName: this.props.displayName,
            },
            behavior: {
                onCardOpen: function () { return _this._reportCardUsage(cardAction); },
                onCardClose: function () { return _this._reportCardUsage("Card Closed"); },
                disableClick: true,
            },
            ariaLabel: this.props.accessibilityLabel ? this.props.accessibilityLabel : undefined,
        };
    };
    /**
     * Opens the card wrapping the provided onKeyDownContainerId. Used for keyboard interactions
     */
    InnerLivePersonaCardHoverTarget.prototype._onKeyDownOpenCard = function () {
        if (this._isLivePersonCardLibAvailable() &&
            this.state.hasDataLoaded &&
            window.LPC &&
            window.LPC.openCard) {
            if (this.props.onKeyDownContainerId) {
                var containerElem = document.getElementById(this.props.onKeyDownContainerId);
                if (containerElem) {
                    var cardParams = this._makeLivePersonaCardParameters(true);
                    window.LPC.openCard(containerElem, cardParams);
                }
            }
        }
    };
    /**
     * Generates the hostAppId as logical name appended to record id.
     * This is called after the data has loaded, so both recordId and logicalName are defined.
     */
    InnerLivePersonaCardHoverTarget.prototype._getHostAppId = function () {
        return this.props.entityReference.LogicalName + ":" + this.props.recordId;
    };
    /**
     * Assumes the live persona library is initialized. The reason this didn't go into the componentDidMount hook is that
     * the state of isLivePersonaInitialized might change after the component was added to the virtual dom, hence we need to check
     * this periodically.
     */
    InnerLivePersonaCardHoverTarget.prototype._getRecordData = function () {
        var _this = this;
        if (!this.state.hasDataLoaded) {
            var logicalName_1 = this.props.entityReference.LogicalName;
            XrmProxy_1.default.retrieveRecord(logicalName_1, this.props.recordId, this._getQueryOptions(logicalName_1))
                .then(function (recordData) {
                var identifiers = _this._getLpcIdentifiers(recordData, logicalName_1);
                if (identifiers) {
                    _this.setState({
                        identifiers: identifiers,
                        hasDataLoaded: true,
                    });
                }
            })
                .catch(function () {
                XrmProxy_1.default.Diagnostics.traceError("LivePersonaHoverTarget", "Failed to fetch record data.");
            });
        }
    };
    /**
     * Returns the query options needed to optain the right parameters from the webAPI call.
     * @param logicalName of the entity
     */
    InnerLivePersonaCardHoverTarget.prototype._getQueryOptions = function (logicalName) {
        switch (logicalName) {
            case "contact":
                return SELECT_EMAIL_ADDRESS_CONTACT;
            case "systemuser":
                return SELECT_EMAIL_ADDRESS_USER;
        }
        return "";
    };
    /**
     * @param recordData - the result of calling webAPI.retrieveRecord() function. Contains relevant entity information such as email address.
     * @param logicalName of the entity.
     * Returns object containing the identifiers to be sent to the live persona library or null if no such identifier can be derived from recordData
     */
    InnerLivePersonaCardHoverTarget.prototype._getLpcIdentifiers = function (recordData, logicalName) {
        switch (logicalName) {
            case "contact":
                return {
                    smtp: recordData.emailaddress1,
                };
            case "systemuser":
                return {
                    smtp: recordData.internalemailaddress,
                    aadObjectId: recordData.azureactivedirectoryobjectid,
                };
        }
        return null;
    };
    /**
     * Check whether LivePersona library is available
     */
    InnerLivePersonaCardHoverTarget.prototype._isLivePersonCardLibAvailable = function () {
        // Getting the state of the LPC library from UCI Appcontext.
        // Added null check for context, as in web client it will come null/undefined.
        var lpcState = this.context && this.context.context != null
            ? this.context.context.lpcInitializationState
            : undefined;
        return lpcState
            ? lpcState === LivePersonaCardInitializationState.Initialized
            : false;
    };
    /**
     * Logs card usage - opening and closing the card.
     * @param action - Type of action performed on card.
     */
    InnerLivePersonaCardHoverTarget.prototype._reportCardUsage = function (action) {
        var actionType = {
            name: "EventContext",
            value: action,
        };
        var controlName = {
            name: "ControlName",
            value: "LivePersonaHoverTarget",
        };
        var eventParameters = [actionType, controlName];
        var usageEvent = {
            eventName: CCF_TELEMETRY_EVENT,
            eventParameters: eventParameters,
        };
        XrmProxy_1.default.Reporting.reportEvent(usageEvent);
    };
    /**
     * Display name for React dev tools
     */
    InnerLivePersonaCardHoverTarget.displayName = "LivePersonaCardHoverTarget";
    return InnerLivePersonaCardHoverTarget;
}(ComponentBase_1.ComponentBase));
InnerLivePersonaCardHoverTarget.contextTypes = {
    context: PropTypes.object,
};
var LivePersonaCardHoverTarget = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerLivePersonaCardHoverTarget);
exports.LivePersonaCardHoverTarget = LivePersonaCardHoverTarget;

},{"../../CustomControls/Utilities/XrmProxy":110,"./ComponentBase":15,"./FelaConnectHelper":17,"prop-types":undefined,"react":undefined,"react-fela":undefined}],32:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });

var View_1 = require("../Primitive/View");
var Text_1 = require("../Primitive/Text");
var MicrosoftIcon_1 = require("../FontIcon/MicrosoftIcon");
function getTextStyle(props) {
    var DEFAULT_TEXT_STYLE = {
        float: "left",
        fontSize: "16px",
        color: "#666666",
    };
    return Object.assign(DEFAULT_TEXT_STYLE, props.textStyle);
}
/**
 * Getter for styles of container. It is expected that only the width and height properties will be changed.
 */
function getContainerStyle(props) {
    var DEFAULT_CONTAINER_STYLE = {
        width: "100%",
        height: "100%",
        textAlign: "center",
        minHeight: "7.5em",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "column",
        backgroundColor: "#ffffff",
        flex: "1 1 auto",
    };
    return Object.assign(DEFAULT_CONTAINER_STYLE, props.containerStyle);
}
/**
 * Getter for styles of the icon
 */
function getIconStyle(props) {
    var DEFAULT_SYMBOL_STYLE = {
        color: "#666666",
        fontFamily: "Dyn CRM Symbol, Segoe MDL2 Assets",
        fontSize: "2.5em",
        paddingBottom: "10px",
    };
    return Object.assign({}, DEFAULT_SYMBOL_STYLE, props.iconStyle);
}
/**
 * Component represents a place holder primitive
 */
function PlaceHolder(props) {
    return (React.createElement(View_1.View, { style: getContainerStyle(props), title: props.text },
        React.createElement(MicrosoftIcon_1.MicrosoftIcon, { type: props.icon, style: getIconStyle(props), accessibilityHidden: props.accessibilityHidden }),
        React.createElement(Text_1.Text, { style: getTextStyle(props) }, props.text)));
}
exports.PlaceHolder = PlaceHolder;

},{"../FontIcon/MicrosoftIcon":10,"../Primitive/Text":53,"../Primitive/View":55,"react":undefined}],33:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });


var View_1 = require("../View");
var RootPopup_1 = require("./RootPopup");
var FlyoutPopupManager_1 = require("../../Common/FlyoutPopupManager/FlyoutPopupManager");
var IFlyoutPopupManagerSubscriber_1 = require("../../Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber");
/**
 * Enumeration of possible Popup types.
 */
var PopupType;
(function (PopupType) {
    PopupType[PopupType["Root"] = 1] = "Root";
    PopupType[PopupType["Nested"] = 2] = "Nested";
})(PopupType || (PopupType = {}));
exports.PopupType = PopupType;
/**
 * Method, which toggles Popup visibility.
 */
function getVisibilityStyle(isVisible, style) {
    return {
        display: isVisible ? (style.display ? style.display : "flex") : "none",
    };
}
function getPositioningStyle(style, parent) {
    var result = Object.assign({}, style);
    var parentPosition = parent && parent.getBoundingClientRect();
    if (parentPosition) {
        result.top = parseInt(result.top, 10) - parentPosition.top + "px";
        result.left = parseInt(result.left, 10) - parentPosition.left + "px";
    }
    return result;
}
/**
 * Default styles for Popup shadow.
 */
var shadowStyle = {
    position: "absolute",
    top: 0,
    left: 0,
    width: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
    height: Math.max(document.documentElement.clientHeight, window.innerHeight || 0),
    backgroundColor: "rgba(0, 0, 0, 0.3)",
};
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Property for root wrapper container. Used to toggle visibility.
         */
        _this._rootElement = null;
        _this._popupElement = null;
        _this._stopPropagation = function (e) {
            e.stopPropagation();
        };
        /**
         * Handler on outside click.
         */
        _this._forceClosePopup = function (e) {
            _this._stopPropagation(e);
            if (_this.props.closeOnOutsideClick) {
                _this.setState({
                    forceClose: true,
                });
                if (_this.props.onPopupForcedClosed) {
                    _this.props.onPopupForcedClosed();
                }
            }
        };
        _this.state = {
            forceClose: false,
        };
        _this._rootElement = document.getElementById(props.rootPopupId);
        return _this;
    }
    Popup.prototype._getId = function () {
        return this.props.rootPopupId + "_" + (this.props.id || "innerPopup");
    };
    /**
     * Getter method, which takes from popupToOpen only own reference.
     */
    Popup.prototype._getCurrentPopupToOpen = function (forceClose, popupToOpen) {
        var result = "";
        if (!forceClose && popupToOpen) {
            var popupArray = popupToOpen.split(".");
            result = popupArray[0];
        }
        return result;
    };
    /**
     * Getter method, which takes from popupToOpen reference to children.
     */
    Popup.prototype._getNextPopupToOpen = function (forceClose, popupToOpen) {
        var result = "";
        if (!forceClose && popupToOpen) {
            var popupArray = popupToOpen.split(".");
            popupArray.splice(0, 1);
            result = popupArray.join(".");
        }
        return result;
    };
    /**
     * Getter method, which returns props for children.
     */
    Popup.prototype._getChildrenProps = function () {
        return {
            type: PopupType.Nested,
            parent: this._popupElement,
            popupToOpen: this._getNextPopupToOpen(this.state.forceClose, this.props.popupToOpen),
            rootPopupId: this.props.rootPopupId,
        };
    };
    /**
     * Getter method, which maps nested Popups and pass them props.
     */
    Popup.prototype._getChildrenWithProps = function (children) {
        var _this = this;
        if (!children)
            return null;
        var result;
        if (children.map) {
            result = children.map(function (child) {
                return child.type === Popup ? React.cloneElement(child, _this._getChildrenProps()) : child;
            });
        }
        else {
            result = children === Popup ? React.cloneElement(children, this._getChildrenProps()) : children;
        }
        return result;
    };
    /**
     * Predicate method, which checks if Popup should be opened.
     */
    Popup.prototype._isVisible = function () {
        return this._getCurrentPopupToOpen(this.state.forceClose, this.props.popupToOpen) === this.props.name;
    };
    Popup.prototype._applyRootNodeStyle = function () {
        Object.assign(this._rootElement.style, this.props.rootStyle);
        this._toggleRootElementVisibility();
    };
    Popup.prototype._toggleRootElementVisibility = function () {
        if (this.props.isDialogPopup) {
            return;
        }
        var openedPopups = this._rootElement.getAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE);
        if (!openedPopups) {
            this._rootElement.style.display = "none";
        }
        else if (this._rootElement.style.display === "none") {
            this._rootElement.style.display = "flex";
        }
    };
    Popup.prototype._getStaticContent = function () {
        var content = this.props.content;
        var result = null;
        if (content) {
            result = React.createElement(View_1.View, { ref: "staticContent" });
        }
        return result;
    };
    Popup.prototype._registerPopup = function (props, state) {
        var name = props.name, popupToOpen = props.popupToOpen;
        var forceClose = state.forceClose;
        var openedPopups = this._rootElement.getAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE);
        openedPopups = !openedPopups ? "" : openedPopups;
        var popupIndex = openedPopups.indexOf(name);
        if (forceClose || name !== this._getCurrentPopupToOpen(forceClose, popupToOpen)) {
            if (~popupIndex) {
                this._rootElement.setAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE, openedPopups.replace("." + name, ""));
            }
            return;
        }
        if (!~popupIndex) {
            this._rootElement.setAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE, openedPopups.concat("." + name));
        }
    };
    Popup.prototype._subscribeFlyoutPopupManager = function () {
        var _this = this;
        this._managerSubscriber = {
            type: IFlyoutPopupManagerSubscriber_1.FlyoutPopupManagerSubscriberType.Popup,
            onPointerDown: function (e) {
                if (e.target === document.getElementById(_this._getId())) {
                    _this._forceClosePopup(e);
                }
            },
            getComponent: function () {
                return _this._popupElement;
            },
        };
        FlyoutPopupManager_1.FlyoutPopupManager.getInstance().addSubscribers(this._managerSubscriber);
    };
    Popup.prototype.componentWillMount = function () {
        if (!this.props.isDialogPopup) {
            this._registerPopup(this.props, this.state);
        }
    };
    Popup.prototype.componentDidMount = function () {
        var _this = this;
        this._popupElement = ReactDOM.findDOMNode(this.refs.popup);
        this.forceUpdate(function () {
            var staticContentRef = _this.refs.staticContent;
            if (staticContentRef) {
                var staticContentElement = ReactDOM.findDOMNode(staticContentRef);
                staticContentElement.appendChild(_this.props.content);
            }
        });
        this._subscribeFlyoutPopupManager();
    };
    Popup.prototype.componentWillReceiveProps = function () {
        this.setState({
            forceClose: false,
        });
    };
    Popup.prototype.componentWillUpdate = function (nextProps, nextState) {
        this._registerPopup(nextProps, nextState);
        //for update popup services case, update DOM with updated content
        var staticContentRef = this.refs.staticContent;
        if (staticContentRef) {
            var staticContentElement = ReactDOM.findDOMNode(staticContentRef);
            while (staticContentElement.firstChild) {
                staticContentElement.removeChild(staticContentElement.firstChild);
            }
            staticContentElement.appendChild(nextProps.content);
        }
    };
    Popup.prototype.componentWillUnmount = function () {
        FlyoutPopupManager_1.FlyoutPopupManager.getInstance().removeSubscribers(this._managerSubscriber);
    };
    Popup.prototype.render = function () {
        var _a, _b;
        var combinedShadowContainerStyle = this.props.isDialogPopup
            ? this.props.style
            : Object.assign({}, this.props.style, getPositioningStyle(this.props.shadowStyle, this.props.parent), getVisibilityStyle(this._isVisible(), this.props.shadowStyle));
        var combinedPopupStyle = Object.assign({}, this.props.popupStyle, this.props.isDialogPopup ? {} : getVisibilityStyle(this._isVisible(), this.props.popupStyle));
        //Short circuit all the register pop up thing for dialog for now.
        this._applyRootNodeStyle();
        var overlayHandlerProps = (_a = {},
            _a[FlyoutPopupManager_1.FlyoutPopupManager.pointerDownEvent] = this._forceClosePopup,
            _a);
        var popupHandlerProps = (_b = {},
            _b[FlyoutPopupManager_1.FlyoutPopupManager.pointerDownEvent] = this._stopPropagation,
            _b);
        return (React.createElement(View_1.View, __assign({ id: this._getId(), style: combinedShadowContainerStyle }, overlayHandlerProps),
            React.createElement(View_1.View, __assign({ style: combinedPopupStyle }, popupHandlerProps, { ref: "popup" }),
                this._getStaticContent(),
                this._getChildrenWithProps(this.props.children))));
    };
    return Popup;
}(React.Component));
exports.Popup = Popup;
//	popupStyle,
Popup.defaultProps = {
    shadowStyle: shadowStyle,
    isDialogPopup: false,
    type: PopupType.Root,
    closeOnOutsideClick: false,
};

},{"../../Common/FlyoutPopupManager/FlyoutPopupManager":1,"../../Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber":2,"../View":55,"./RootPopup":34,"react":undefined,"react-dom":undefined}],34:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/* tslint:disable:crm-prohibit-react-dom-render */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var View_1 = require("../View");
var CustomControlSeeMoreStyleHelper_1 = require("../../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper");
var ROOT_POPUP_ATTRIBUTE = "openedPopups";
exports.ROOT_POPUP_ATTRIBUTE = ROOT_POPUP_ATTRIBUTE;
var containerStyle = {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
};
var RootNodeSuffix = "_popupContainer";
var RootPopup = /** @class */ (function (_super) {
    __extends(RootPopup, _super);
    function RootPopup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Checks see more to determine zIndex for the popup
         */
        _this._seeMorePopupCount = null;
        return _this;
    }
    RootPopup.prototype._getPopupId = function () {
        return ((this.props.parentCustomControlId ? this.props.parentCustomControlId + "|" : "") + this.props.id + RootNodeSuffix);
    };
    RootPopup.prototype._initializeRootNode = function () {
        if (!this._rootNode) {
            this._rootNode = document.createElement("section");
            this._rootNode.id = this._getPopupId();
            Object.assign(this._rootNode.style, {
                position: "absolute",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
            });
            this._rootNode.setAttribute(ROOT_POPUP_ATTRIBUTE, "");
            document.body.appendChild(this._rootNode);
        }
    };
    RootPopup.prototype._getChildrenWithProps = function (children) {
        var _this = this;
        if (!children)
            return null;
        var result;
        if (children.map) {
            result = children.map(function (child) {
                return React.cloneElement(child, { rootPopupId: _this._getPopupId() });
            });
        }
        else {
            result = React.cloneElement(children, { rootPopupId: this._getPopupId() });
        }
        return result;
    };
    RootPopup.prototype._renderToBody = function () {
        var popupContainerStyle = this.props.style ? this.props.style : containerStyle;
        if (this._seeMorePopupCount === null) {
            this._seeMorePopupCount = CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().getPopupCount();
        }
        var shouldHaveZIndex = this._seeMorePopupCount > 0;
        if (!this._style) {
            this._style = shouldHaveZIndex ? Object.assign({ zIndex: 1 }, popupContainerStyle) : popupContainerStyle;
        }
        this._initializeRootNode();
        if (this.props.children && this._rootNode) {
            ReactDOM.unstable_renderSubtreeIntoContainer(this, React.createElement(View_1.View, { style: this._style, tabIndex: this.props.tabIndex }, this._getChildrenWithProps(this.props.children)), this._rootNode);
        }
    };
    RootPopup.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.style !== this.props.style) {
            this._style = null;
        }
        if (nextProps.rootNodes &&
            nextProps.rootNodes[this._getPopupId()] !== undefined &&
            nextProps.rootNodes[this._getPopupId()]) {
            this._initializeRootNode();
            this._renderToBody();
        }
    };
    RootPopup.prototype.componentDidMount = function () {
        this._renderToBody();
        if (this.props.openPopup) {
            this.props.openPopup(this._getPopupId());
        }
    };
    RootPopup.prototype.componentDidUpdate = function () {
        this._renderToBody();
    };
    RootPopup.prototype.componentWillUnmount = function () {
        ReactDOM.unmountComponentAtNode(this._rootNode);
        if (document.getElementById(this._rootNode.id)) {
            document.body.removeChild(this._rootNode);
        }
        if (this.props.closePopup) {
            this.props.closePopup(this._getPopupId());
        }
        this._rootNode = null;
    };
    RootPopup.prototype.render = function () {
        return null;
    };
    return RootPopup;
}(React.Component));
exports.RootPopup = RootPopup;

},{"../../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper":62,"../View":55,"react":undefined,"react-dom":undefined}],35:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var PropTypes = require("prop-types");
var View_1 = require("../Primitive/View");
/**
 * Enum for presence indicator size value.
 * @readonly
 */
var PresenceIndicatorSize;
(function (PresenceIndicatorSize) {
    PresenceIndicatorSize[PresenceIndicatorSize["Default"] = 0] = "Default";
    PresenceIndicatorSize[PresenceIndicatorSize["Small"] = 1] = "Small";
    PresenceIndicatorSize[PresenceIndicatorSize["Medium"] = 2] = "Medium";
    PresenceIndicatorSize[PresenceIndicatorSize["Large"] = 3] = "Large";
})(PresenceIndicatorSize || (PresenceIndicatorSize = {}));
exports.PresenceIndicatorSize = PresenceIndicatorSize;
/**
 * Enum for controls in that presence indicator is shown.
 * @readonly
 */
var PresenceTarget;
(function (PresenceTarget) {
    PresenceTarget[PresenceTarget["None"] = 0] = "None";
    PresenceTarget[PresenceTarget["Lookup"] = 1] = "Lookup";
    PresenceTarget[PresenceTarget["Grid"] = 2] = "Grid";
})(PresenceTarget || (PresenceTarget = {}));
exports.PresenceTarget = PresenceTarget;
/**
 * Control which renders presence status for the given entity .
 */
var PresenceIndicator = /** @class */ (function (_super) {
    __extends(PresenceIndicator, _super);
    function PresenceIndicator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._renderPresence = false;
        return _this;
    }
    /**
     * Called after the presence component is rendered initially to update its information using sdk.
     */
    PresenceIndicator.prototype._addPresenceInformation = function () {
        // Presence class has constructor with arguments as (elementId, sipUrl, entityReference, displaySize, parentControlId, accessibilityLabel, presenceTarget)
        var displaySize = this.props.displaySize ? this.props.displaySize : PresenceIndicatorSize.Default;
        var presenceTarget = this.props.presenceTarget ? this.props.presenceTarget : PresenceTarget.None;
        this._presenceInstance = new this._skypeChannelContext.SkypeChannelClient.Presence(this._presenceId, this.props.sipUrl, this.props.entityReference, displaySize, this.props.parentControlId, this.props.accessibilityLabel, presenceTarget);
        this._presenceInstance.buildPresence();
    };
    /**
     *  Update presence component once mouting is done.
     */
    PresenceIndicator.prototype.componentDidMount = function () {
        if (this._renderPresence) {
            this._addPresenceInformation();
        }
    };
    /**
     * Destroying presence instance once component unmounted.
     */
    PresenceIndicator.prototype.componentWillUnmount = function () {
        if (this._presenceInstance) {
            // This will unsubscribe all event attached to presence indicator.
            this._presenceInstance.close();
            this._presenceInstance = null;
        }
    };
    /**
     * Check whether Skype channel instance is available or not.
     */
    PresenceIndicator.prototype._isSkypeChannelAvailable = function () {
        // Getting SkypeChannel from UCI Appcontext.
        // Added null check for context, as in web client it will come null/undefined.
        this._skypeChannelContext =
            this.context && this.context.context != null ? this.context.context.SkypeChannel : undefined;
        return this._skypeChannelContext !== undefined;
    };
    /**
     * Check whether to render presence indicator.
     */
    PresenceIndicator.prototype._isPropsAvailable = function () {
        if (this.props.sipUrl) {
            return true;
        }
        else {
            return (this.props.entityReference &&
                this._skypeChannelContext.SkypeChannelClient.PresenceInformation &&
                this._skypeChannelContext.SkypeChannelClient.PresenceInformation.isPresenceEnabledEntity(this.props.entityReference.entityName));
        }
    };
    /**
     * Render presence component.
     */
    PresenceIndicator.prototype.render = function () {
        this._presenceId = this.props.id ? this.props.id : this.props.parentControlId + "_presence";
        this._renderPresence = this._isSkypeChannelAvailable() && this._isPropsAvailable();
        return this._renderPresence ? React.createElement(View_1.View, { id: this._presenceId, style: this.props.style }) : null;
    };
    PresenceIndicator.displayName = "PresenceIndicator";
    return PresenceIndicator;
}(React.Component));
exports.PresenceIndicator = PresenceIndicator;
PresenceIndicator.contextTypes = {
    context: PropTypes.object,
};

},{"../Primitive/View":55,"prop-types":undefined,"react":undefined}],36:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/* tslint:disable:crm-prohibit-standard-react-element */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var IFlexboxContainerStyle_1 = require("./IFlexboxContainerStyle");
var ComponentBase_1 = require("./ComponentBase");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * Progress Indicator component
 */
var InnerProgressIndicator = /** @class */ (function (_super) {
    __extends(InnerProgressIndicator, _super);
    function InnerProgressIndicator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Determine whether the component needs to be re-rendered.
     * @params nextProps The new component properties.
     * @returns {boolean} Whether to re-render the component.
     */
    InnerProgressIndicator.prototype.shouldComponentUpdate = function (nextProps) {
        return this.props.active !== nextProps.active || this.props.progressType !== nextProps.progressType;
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerProgressIndicator.prototype.getElementName = function () {
        // It seems that progress html element is not flexible enough to render the "ring" with animated dots
        // or something similar. That's why div element is used for now. Task 117099 is created to track
        // this accessibility issue in VSO.
        // return this.props.isBrowserSafari === true ? "div" : "progress";
        return "div";
    };
    /**
     * Returns the class name for the underlying element.
     * @param style the style to be applied to the underlying component, used for readout here.
     */
    InnerProgressIndicator.prototype.getFlexClassName = function (style) {
        var classString = "";
        var styleTemp;
        if (style) {
            styleTemp = Object.assign(IFlexboxContainerStyle_1.applyIFlexboxContainerProp(style));
        }
        else {
            return null;
        }
        if (!this.props.progressType || this.props.progressType === "bar") {
            classString += "indeterminateProgressBar";
        }
        else if (this.props.progressType === "ring") {
            classString += "indeterminateProgressRing";
        }
        if (this.props.active !== true && this.props.animating !== true) {
            classString += " hideProgressBar";
        }
        classString += " " + IFlexboxContainerStyle_1.getCssClassName(styleTemp ? styleTemp.display : null);
        return classString;
    };
    /**
     * Returns the children of the element.
     */
    InnerProgressIndicator.prototype.getElementChildren = function () {
        if (this.isIE) {
            return React.createElement("div", null, "......");
        }
        if (this.props.progressType === "ring") {
            // TODO: address accessibility issues defined in VSO item 117099. Also please have a look at
            // PR 37639 for details.
            return (React.createElement("div", null,
                React.createElement("div", { className: "progressDot" }),
                React.createElement("div", { className: "progressDot" }),
                React.createElement("div", { className: "progressDot" }),
                React.createElement("div", { className: "progressDot" }),
                React.createElement("div", { className: "progressDot" })));
        }
        return undefined;
    };
    InnerProgressIndicator.displayName = "ProgressIndicator";
    return InnerProgressIndicator;
}(ComponentBase_1.ComponentBase));
exports.InnerProgressIndicator = InnerProgressIndicator;
var ProgressIndicator = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerProgressIndicator);
exports.ProgressIndicator = ProgressIndicator;

},{"./ComponentBase":15,"./FelaConnectHelper":17,"./IFlexboxContainerStyle":25,"react":undefined,"react-fela":undefined}],37:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");
var AccessibilityRole = require("../../Supplementary/Accessibility/Attributes/Role");
/**
 * Class that implements option for RadioInput.
 */
var InputOption = /** @class */ (function (_super) {
    __extends(InputOption, _super);
    function InputOption(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onChangeHandler = _this._onChangeHandler.bind(_this);
        return _this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InputOption.prototype.getElementName = function () {
        return "input";
    };
    /**
     * Handler for onChange event on input
     */
    InputOption.prototype._onChangeHandler = function (e) {
        var checked = e.target.checked;
        if (checked) {
            if (this.props.onChange) {
                this.props.onChange(this.props.value);
            }
        }
    };
    /**
     * Returns the specific element props.
     */
    InputOption.prototype.getElementProps = function () {
        var props = {
            id: this.props.id,
            key: this.props.id,
            checked: this.props.checked,
            name: this.props.name,
            role: AccessibilityRole.RADIO,
            type: "radio",
            onChange: this._onChangeHandler,
        };
        if (this.props.disabled) {
            props.disabled = true;
        }
        if (this.props.checked) {
            props[InputOption._DATA_CHECKED] = true;
        }
        if (this.props.value) {
            props.value = this.props.value.Label;
        }
        return props;
    };
    InputOption.displayName = "InputOption";
    /**
     * Attribute name for checked option.
     */
    InputOption._DATA_CHECKED = "data-checked";
    return InputOption;
}(ComponentBase_1.ComponentBase));
exports.InputOption = InputOption;

},{"../../Supplementary/Accessibility/Attributes/Role":58,"../ComponentBase":15}],38:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });


var FelaConnectHelper_1 = require("../FelaConnectHelper");
var CustomControlUtilityPointers_1 = require("../../../CustomControls/Models/CustomControlUtilityPointers");
var ComponentBase_1 = require("../ComponentBase");
var View_1 = require("../View");
var GuidHelper_1 = require("../../../CustomControls/Utilities/GuidHelper");
var InputOption_1 = require("./InputOption");
var Label_1 = require("../Label");
/**
 * Class that implements container for options.
 */
var InnerRadioInput = /** @class */ (function (_super) {
    __extends(InnerRadioInput, _super);
    /**
     * Component's constructor.
     * @param props {IRadioInputProps} Props for the component.
     * @param context {{}} Additional context for initialization.
     */
    function InnerRadioInput(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onChangeHandler = _this._onChangeHandler.bind(_this);
        _this._uuid = GuidHelper_1.guidV4String();
        _this.state = {
            value: props.value,
        };
        return _this;
    }
    /**
     * Invoked when the component receiving new props
     * @param nextProps
     */
    InnerRadioInput.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps && !InnerRadioInput._optionsEqual(this.state.value, nextProps.value)) {
            // resetting the value via props has a priority over the component's state
            this.setState({ value: nextProps.value });
        }
    };
    /**
     * Returns the unique ID.
     * @param sourceId {string} Initial ID string to be used for ID creation.
     * Defaults to the id given in props by the consumen.
     * @param supplement {string} Additional part to the ID that should make it unique.
     * Defaults to the uuid generated in constructor of the component.
     * @return {string} ID created using given sourceId and a supplement.
     * @private
     */
    InnerRadioInput.prototype._uniqueId = function (sourceId, supplement) {
        if (sourceId === void 0) { sourceId = this.props.id; }
        if (supplement === void 0) { supplement = this._uuid; }
        return sourceId + "_" + supplement;
    };
    /**
     * Creates option id that should be unique for component.
     * @param option {IOptionSetValue} OptionSetValue descriptor object.
     * @return {string} Option ID created for given OptionSetValue descriptor.
     * @private
     */
    InnerRadioInput.prototype._optionId = function (option) {
        return this._uniqueId() + "_" + option.Value;
    };
    /**
     * Checks if options given in parameters can be considered the same.
     * @param one {IOptionSetValue} Descriptor for the first option of the comparison.
     * @param two {IOptionSetValue} Descriptor for the second option of the comparison.
     * @return {boolean} `true` if options given in parameters can be considered equal, `false` - otherwise.
     * @private
     */
    InnerRadioInput._optionsEqual = function (one, two) {
        if (!one || !two) {
            return false;
        }
        if (CustomControlUtilityPointers_1.IsNullOrUndefined(one.Value) && CustomControlUtilityPointers_1.IsNullOrUndefined(two.Value)) {
            // Decide by labels.
            return one.Label === two.Label;
        }
        // Decide by values.
        return one.Value === two.Value;
    };
    /**
     * Gets props for inputOption.
     * @param option {IOptionSetValue} current option for input.
     * @param id {string} id attribute for input.
     * @private
     */
    InnerRadioInput.prototype._getInputOptionProps = function (option, id) {
        var isChecked = option.Value === this.state.value.Value;
        var props = {
            id: id,
            key: id,
            value: option,
            name: this.props.name,
            checked: isChecked,
            onChange: this._onChangeHandler,
            disabled: this.props.disabled,
        };
        if (this.props.style) {
            props.style = this.props.style.inputOptionStyle || null;
        }
        return props;
    };
    /**
     * Gets props for label.
     * @param id {string} value for forElementId attribute.
     * @private
     */
    InnerRadioInput.prototype._getLabelOptionProps = function (id) {
        var props = {
            forElementId: id,
        };
        if (this.props.style) {
            props.style = this.props.style.inputOptionLabelStyle || null;
        }
        return props;
    };
    InnerRadioInput.prototype._getViewStyles = function () {
        var props = {};
        if (this.props.style) {
            props.style = this.props.style.style || null;
        }
        return props;
    };
    /**
     * Bound handler for the `change` event.
     * @private
     * @param option {IOptionSetValue} new option
     */
    InnerRadioInput.prototype._onChangeHandler = function (option) {
        if (option) {
            this.setState({ value: option });
            if (this.props.onChange) {
                this.props.onChange(option);
            }
        }
    };
    InnerRadioInput.prototype._getOptionList = function () {
        var _this = this;
        if (!this.props.options || !this.props.options.length || !this.props.value) {
            return null;
        }
        return this.props.options.map(function (option) {
            var id = _this._optionId(option);
            var inputProps = _this._getInputOptionProps(option, id);
            var labelProps = _this._getLabelOptionProps(id);
            var viewProps = _this._getViewStyles();
            return (React.createElement(View_1.View, __assign({ key: GuidHelper_1.guidV4String() }, viewProps),
                React.createElement(InputOption_1.InputOption, __assign({}, inputProps)),
                React.createElement(Label_1.Label, __assign({}, labelProps), option.Label)));
        });
    };
    InnerRadioInput.prototype.render = function () {
        return React.createElement(View_1.View, { style: this.props.style.style }, this._getOptionList());
    };
    return InnerRadioInput;
}(ComponentBase_1.ComponentBase));
exports.InnerRadioInput = InnerRadioInput;
var RadioInput = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerRadioInput);
exports.RadioInput = RadioInput;

},{"../../../CustomControls/Models/CustomControlUtilityPointers":67,"../../../CustomControls/Utilities/GuidHelper":101,"../ComponentBase":15,"../FelaConnectHelper":17,"../Label":28,"../View":55,"./InputOption":37,"react":undefined,"react-fela":undefined}],39:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var IFlexboxContainerStyle_1 = require("./IFlexboxContainerStyle");
var ComponentBase_1 = require("./ComponentBase");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
var CustomControlSeeMoreStyleHelper_1 = require("../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper");
var XrmProxy_1 = require("../../CustomControls/Utilities/XrmProxy");
var TelemetryManager_1 = require("../../CustomControls/Utilities/TelemetryManager");
var PRIMITIVE_COMPONENT_NAME = TelemetryManager_1.COMPONENT_NAME + ".Primitive.ScrollView";
var InnerScrollView = /** @class */ (function (_super) {
    __extends(InnerScrollView, _super);
    function InnerScrollView(props) {
        var _this = _super.call(this, props) || this;
        _this._setInnerViewRef = _this._setInnerViewRef.bind(_this);
        _this._onScrollHandler = _this._onScrollHandler.bind(_this);
        _this._onClickHandler = _this._onClickHandler.bind(_this);
        _this._ua = window.navigator.userAgent;
        return _this;
    }
    //This scenario is to handle when using keyboard navigating
    InnerScrollView.prototype.componentDidUpdate = function (preProps) {
        if (this.props.scrollToId !== preProps.scrollToId && this.props.scrollToId && this._scrollViewRef) {
            var scrollToElement = document.getElementById(this.props.scrollToId);
            var scrollViewDom = ReactDOM.findDOMNode(this);
            this._scrollToContent(scrollViewDom, scrollToElement);
        }
    };
    //The logic here is when to scroll: the scroll view should be collapsed and re-open
    //In this case, the scrollView should always be correctly unmount first then mount again
    //So this scrolling action should only happen once right after componentDidMount
    InnerScrollView.prototype.componentDidMount = function () {
        if (this.props.scrollToId && this._scrollViewRef) {
            var scrollToElement = document.getElementById(this.props.scrollToId);
            var scrollViewDom = ReactDOM.findDOMNode(this);
            this._scrollToContent(scrollViewDom, scrollToElement);
        }
    };
    /**
     * Set scrollLeft
     * @param scrollParent
     * @param scrollToElement
     */
    InnerScrollView.prototype._scrollToContentHorizontalLTR = function (scrollParent, scrollToElement) {
        if (scrollParent.scrollLeft + scrollParent.offsetWidth > scrollToElement.offsetLeft + scrollToElement.offsetWidth) {
            scrollParent.scrollLeft = scrollToElement.offsetLeft + scrollToElement.offsetWidth - scrollParent.offsetWidth;
        }
        else if (scrollParent.scrollLeft < scrollToElement.offsetLeft) {
            var intendedOffset = scrollToElement.offsetLeft;
            scrollParent.scrollLeft = intendedOffset;
            // Safari-only amending for bug #725099
            if (scrollParent.scrollLeft !== intendedOffset && this._isMobileSafari()) {
                scrollParent.scrollLeft = scrollParent.scrollLeft - 1;
            }
        }
    };
    /**
     * In case of RTL for IE the value needs to be reversed
     * @param scrollParent
     * @param scrollToElement
     */
    InnerScrollView.prototype._scrollToContentHorizontalRTLIEorEdge = function (scrollParent, scrollToElement) {
        //recalc left offset of element
        var scrollToElementValue = scrollParent.offsetWidth - scrollToElement.offsetLeft;
        if (scrollParent.scrollLeft < scrollToElementValue - scrollToElement.offsetWidth) {
            scrollParent.scrollLeft = scrollToElementValue - scrollToElement.offsetWidth;
        }
        else if (scrollParent.scrollLeft + scrollParent.offsetWidth >
            scrollToElementValue + scrollToElement.offsetWidth) {
            scrollParent.scrollLeft = scrollToElementValue - scrollParent.offsetWidth;
        }
    };
    InnerScrollView.prototype._scrollToContent = function (scrollParent, scrollToElement) {
        if (scrollParent && scrollToElement) {
            if (this.props.horizontal) {
                if (this.props.isRTL && this._isIEorEdge()) {
                    this._scrollToContentHorizontalRTLIEorEdge(scrollParent, scrollToElement);
                }
                else {
                    this._scrollToContentHorizontalLTR(scrollParent, scrollToElement);
                }
            }
            else {
                if (scrollParent.scrollTop + scrollParent.clientHeight <
                    scrollToElement.offsetTop + scrollToElement.clientHeight) {
                    scrollParent.scrollTop = scrollToElement.offsetTop + scrollToElement.clientHeight - scrollParent.clientHeight;
                }
                else if (scrollToElement.offsetTop < scrollParent.scrollTop) {
                    scrollParent.scrollTop = scrollToElement.offsetTop;
                }
            }
        }
    };
    InnerScrollView.prototype._isIEorEdge = function () {
        return this.isIE || this.isEdge;
    };
    InnerScrollView.prototype._isMobileSafari = function () {
        var iOS = !!this._ua.match(/iPad/i) || !!this._ua.match(/iPod/i) || !!this._ua.match(/iPhone/i);
        var webkit = !!this._ua.match(/WebKit/i);
        var iOSSafari = iOS && webkit && !this._ua.match(/CriOS/i);
        return iOSSafari;
    };
    /**
     * Handler for onClick event
     */
    InnerScrollView.prototype._onClickHandler = function (event) {
        if (this.props.onClick !== undefined) {
            this.props.onClick(event);
        }
    };
    /**
     * Handler for onScroll event
     */
    InnerScrollView.prototype._onScrollHandler = function (event) {
        if (this.props.onScroll !== undefined) {
            this.props.onScroll(event);
        }
        if (this.props.onScrollToBottom !== undefined) {
            var scrollViewDom = ReactDOM.findDOMNode(this);
            if (scrollViewDom.scrollTop + scrollViewDom.offsetHeight === scrollViewDom.scrollHeight) {
                this.props.onScrollToBottom();
            }
        }
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerScrollView.prototype.getElementName = function () {
        return this.props.semanticTag ? this.props.semanticTag : "div";
    };
    /**
     * Returns the specific element props.
     */
    InnerScrollView.prototype.getElementProps = function () {
        return {
            onClick: this._onClickHandler,
            onScroll: this._onScrollHandler,
            ref: this.props.scrollToId || this.props.refCallback ? this._setInnerViewRef : null,
        };
    };
    /**
     * Scrolls the viewport to the position of the given component so that it becomes visible.
     */
    InnerScrollView.prototype.scrollToChild = function (child) {
        // Validate the input
        if (!child) {
            var error = new Error("child must be specified");
            XrmProxy_1.default.Reporting.reportFailure(PRIMITIVE_COMPONENT_NAME, error);
            throw error;
        }
        var scrollViewDom = ReactDOM.findDOMNode(this);
        var childDom = ReactDOM.findDOMNode(child);
        this._scrollToContent(scrollViewDom, childDom);
    };
    InnerScrollView.prototype._setInnerViewRef = function (item) {
        if (this.props.refCallback) {
            this.props.refCallback(this);
        }
        this._scrollViewRef = item;
    };
    /**
     * Returns the class name for the underlying element.
     * @param style the style to be applied to the underlying component, used for readout here.
     */
    InnerScrollView.prototype.getFlexClassName = function (style) {
        return IFlexboxContainerStyle_1.getCssClassName(style ? style.display : null);
    };
    /**
     * Returns the class name for the underlying element.
     */
    InnerScrollView.prototype.getElementClassName = function () {
        var className = _super.prototype.getElementClassName.call(this);
        if (this.props && this.props.className) {
            className += " " + this.props.className;
        }
        if (this.props.style && InnerScrollView.isElementScrollable(this.props.style)) {
            className +=
                CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().getDisableScrollStyle() && !this.props.isWithinATopMostSeeMore
                    ? " webkitScrollAuto"
                    : " webkitScroll";
        }
        return className;
    };
    /**
     * Display name for React dev tools
     */
    InnerScrollView.displayName = "ScrollView";
    return InnerScrollView;
}(ComponentBase_1.ComponentBase));
exports.InnerScrollView = InnerScrollView;
function scrollViewRuleGen(props) {
    // We prefer the selected style, and then hovered style, and then the default style
    if (props && props.style) {
        // In web, the default value for flexDirection property is "row".
        var horizontalStyle = props.horizontal
            ? Object.assign({}, props.style, { overflowX: "scroll", flexDirection: "row" })
            : Object.assign({}, props.style, { overflowY: "scroll", flexDirection: "column" });
        var containerStyle = props.contentContainerStyle
            ? Object.assign({}, props.style, props.contentContainerStyle)
            : props.style;
        var style = Object.assign({}, horizontalStyle, containerStyle);
        return Object.assign(props.style, style, FelaConnectHelper_1.ruleGen(props), IFlexboxContainerStyle_1.applyIFlexboxContainerProp(style));
    }
    return {};
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(scrollViewRuleGen, props); }; };
var ScrollView = ReactFela.connect(mapStylesToProps)(InnerScrollView);
exports.ScrollView = ScrollView;

},{"../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper":62,"../../CustomControls/Utilities/TelemetryManager":109,"../../CustomControls/Utilities/XrmProxy":110,"./ComponentBase":15,"./FelaConnectHelper":17,"./IFlexboxContainerStyle":25,"react-dom":undefined,"react-fela":undefined}],40:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * Class introducing the select's single option element.
 */
var InnerOption = /** @class */ (function (_super) {
    __extends(InnerOption, _super);
    function InnerOption() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerOption.prototype.getElementName = function () {
        return "option";
    };
    /**
     * Returns the specific element props.
     */
    InnerOption.prototype.getElementProps = function () {
        var props = {
            value: this.props.value ? this.props.value.Value.toString() : "-1",
        };
        if (this.props.disabled) {
            props.disabled = true;
        }
        if (this.props.selected) {
            props[InnerOption._DATA_SELECTED] = true;
        }
        return props;
    };
    /**
     * Returns the children of the element.
     * Overrides parent implementation to return props.value.Label as a single child.
     */
    InnerOption.prototype.getElementChildren = function () {
        return this.props.value ? this.props.value.Label || "" : "";
    };
    /**
     * Attribute name for selected option.
     */
    InnerOption._DATA_SELECTED = "data-selected";
    return InnerOption;
}(ComponentBase_1.ComponentBase));
exports.InnerOption = InnerOption;
var Option = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerOption);
exports.Option = Option;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],41:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var CustomControlUtilityPointers_1 = require("../../../CustomControls/Models/CustomControlUtilityPointers");
var ComponentBase_1 = require("../ComponentBase");
var Option_1 = require("./Option");
var GuidHelper_1 = require("../../../CustomControls/Utilities/GuidHelper");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * Class that implements dropdown component based on the select/option elements.
 */
var InnerSelect = /** @class */ (function (_super) {
    __extends(InnerSelect, _super);
    /**
     * Component's constructor.
     * @param props {ISelectProps} Props for the component.
     * @param context {{}} Additional context for initialization.
     */
    function InnerSelect(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onChangeHandler = _this._onChangeHandler.bind(_this);
        //
        _this._uuid = GuidHelper_1.guidV4String();
        _this.state = {
            value: props.value,
        };
        return _this;
    }
    /**
     * Invoked when the component receiving new props
     * @param nextProps
     */
    InnerSelect.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps && !InnerSelect._optionsEqual(this.state.value, nextProps.value, this._isMultiple())) {
            // resetting the value via props has a priority over the component's state
            this.setState({ value: nextProps.value });
        }
    };
    /**
     * Returns the unique ID.
     * @param sourceId {string} Initial ID string to be used for ID creation.
     * Defaults to the id given in props by the consumen.
     * @param supplement {string} Additional part to the ID that should make it unique.
     * Defaults to the uuid generated in constructor of the component.
     * @return {string} ID created using given sourceId and a supplement.
     * @private
     */
    InnerSelect.prototype._uniqueId = function (sourceId, supplement) {
        if (sourceId === void 0) { sourceId = this.props.id; }
        if (supplement === void 0) { supplement = this._uuid; }
        return sourceId + "_" + supplement;
    };
    /**
     * Returns true if multiple attribute is set.
     * @return {boolean} True if multiple attribute is set.
     * @private
     */
    InnerSelect.prototype._isMultiple = function () {
        return !!this.props.multiple;
    };
    /**
     * Creates option id that should be unique for given select component.
     * @param option {IOptionSetValue} OptionSetValue descriptor object.
     * @return {string} Option ID created for given OptionSetValue descriptor.
     * @private
     */
    InnerSelect.prototype._optionId = function (option) {
        return "" + this._uniqueId() + option.Value;
    };
    /**
     * Checks if options given in parameters can be considered the same.
     * @param currentValue {IOptionSetValue} Descriptor for the first option of the comparison.
     * @param nextValue {IOptionSetValue} Descriptor for the second option of the comparison.
     * @param isMultiple {boolean} true if select has multiple attribute
     * @return {boolean} `true` if options given in parameters can be considered equal, `false` - otherwise.
     * @private
     */
    InnerSelect._optionsEqual = function (currentValue, nextValue, isMultiple) {
        if (isMultiple === void 0) { isMultiple = false; }
        if (!currentValue || !nextValue) {
            return false;
        }
        if (CustomControlUtilityPointers_1.IsNullOrUndefined(currentValue.Value) && CustomControlUtilityPointers_1.IsNullOrUndefined(nextValue.Value)) {
            // Decide by labels.
            return currentValue.Label === nextValue.Label;
        }
        // Decide by values.
        if (isMultiple) {
            var oneArray = currentValue;
            var twoArray_1 = nextValue;
            return (oneArray.length === twoArray_1.length &&
                oneArray.every(function (element, index) {
                    return element === twoArray_1[index];
                }));
        }
        else {
            return currentValue.Value === nextValue.Value;
        }
    };
    /**
     * Bound handler for the `change` event.
     * @param event {Event} Change event wrapper object.
     * @private
     */
    InnerSelect.prototype._onChangeHandler = function (event) {
        var options = Array.from(event.target.options).filter(function (option) {
            return option.selected;
        });
        var values = [];
        var _loop_1 = function (i) {
            var value = options[i].value;
            if (!CustomControlUtilityPointers_1.IsNullOrUndefined(value)) {
                var candidates = this_1.props.options.filter(function (item) { return (!CustomControlUtilityPointers_1.IsNullOrUndefined(item.Value) ? item.Value.toString() : "") === value; });
                if (candidates && candidates.length) {
                    values.push(candidates[0]);
                }
            }
        };
        var this_1 = this;
        for (var i = 0; i < options.length; i++) {
            _loop_1(i);
        }
        if (values.length > 0) {
            var value = this._isMultiple() ? { value: values } : { value: values[0] };
            this.setState(value);
            if (this.props.onChange) {
                this.props.onChange(value.value);
            }
        }
    };
    /**
     * Getter for the actual underlying element.
     * @return {string} Actual HTML element name.
     */
    InnerSelect.prototype.getElementName = function () {
        return "select";
    };
    /**
     * Converts ISelectProps to React.HTMLAttributes.
     * @return {React.HTMLAttributes} Attributes of the select component.
     */
    InnerSelect.prototype.getElementProps = function () {
        var props = {
            value: this.props.multiple
                ? this.state.value
                    ? this.state.value.map(function (x) { return x.Value.toString(); })
                    : ["-1"]
                : this.state.value
                    ? this.state.value.Value.toString()
                    : "-1",
            onChange: this._onChangeHandler,
            describedByElementId: this.props.describedByElementId ? null : this.props.describedByElementId,
        };
        if (this.props.disabled) {
            props.disabled = true;
        }
        if (this.props.multiple) {
            props.multiple = true;
        }
        return props;
    };
    /**
     * Composes and returns proper children for the select component.
     * It is supposed that Select component will never have other children than its options.
     * @return {any} Properly composed children for the component.
     */
    InnerSelect.prototype.getElementChildren = function () {
        var _this = this;
        if (!this.props.options || !this.props.options.length) {
            return _super.prototype.getElementChildren.call(this); // OR just return `null` here?
        }
        return this.props.options.map(function (option) {
            var id = _this._optionId(option);
            var selected = false;
            if (_this.props.multiple) {
                for (var i = 0; i < _this.props.value.length; i++) {
                    if (_this.props.value[i] === option) {
                        selected = true;
                        break;
                    }
                }
            }
            else {
                selected = _this.props.value === option;
            }
            return React.createElement(Option_1.Option, { id: id, key: id, value: option, selected: selected, style: _this.props.style.optionStyle });
        });
    };
    return InnerSelect;
}(ComponentBase_1.ComponentBase));
exports.InnerSelect = InnerSelect;
function selectRuleGen(props) {
    var ownProps = {};
    Object.assign(ownProps, props);
    if (props && props.style) {
        if (props.style.selectStyle && props.style.selectStyle.appearance) {
            ownProps.style.selectStyle.appearance = props.style.selectStyle.appearance;
            ownProps.style.selectStyle.WebkitAppearance = props.style.selectStyle.appearance;
            ownProps.style.selectStyle.MozAppearance = props.style.selectStyle.appearance;
            ownProps.style.selectStyle.MsAppearance = props.style.selectStyle.appearance;
        }
        return Object.assign(props.style, ownProps.style.selectStyle, FelaConnectHelper_1.ruleGen(props));
    }
    return {};
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(selectRuleGen, props); }; };
var Select = ReactFela.connect(mapStylesToProps)(InnerSelect);
exports.Select = Select;

},{"../../../CustomControls/Models/CustomControlUtilityPointers":67,"../../../CustomControls/Utilities/GuidHelper":101,"../ComponentBase":15,"../FelaConnectHelper":17,"./Option":40,"react":undefined,"react-fela":undefined}],42:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var ComponentBase_1 = require("./ComponentBase");
var SvgUtils = require("./Svg/Utils");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
var Image_1 = require("./Image");
/**
 * Component representing an image base control
 */
var InnerSvg = /** @class */ (function (_super) {
    __extends(InnerSvg, _super);
    function InnerSvg(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {};
        return _this;
    }
    /**
     * React life-cycle method, get called once right after the component is added to the virtual DOM.
     */
    InnerSvg.prototype.componentDidMount = function () {
        if (this.props.source) {
            this._inlineSvgImage(this.props.source);
        }
    };
    /**
     * Replaces image with inline svg if source is svg.
     */
    InnerSvg.prototype._inlineSvgImage = function (source) {
        var _this = this;
        SvgUtils.parseSvg(source).then(function (parsedSvgProps) {
            if (parsedSvgProps) {
                _this.setState({ parsedSvgProps: parsedSvgProps });
            }
            else {
                if (_this.props.onParsingError) {
                    _this.props.onParsingError("File content is empty");
                }
            }
        }, function (error) {
            if (_this.props.onParsingError) {
                _this.props.onParsingError(error.message);
            }
        });
    };
    InnerSvg.prototype._shouldRenderImg = function () {
        return this.props.source && this.props.fallbackToImage && !this.state.parsedSvgProps;
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerSvg.prototype.getElementName = function () {
        return "svg";
    };
    /**
     * Returns the specific element props.
     */
    InnerSvg.prototype.getElementProps = function () {
        return Object.assign({}, this.state.parsedSvgProps, this.props);
    };
    /**
     * Renders the component to the virtual DOM.
     */
    InnerSvg.prototype.render = function () {
        if (this._shouldRenderImg()) {
            var src = void 0;
            if (this.props.source) {
                // replace "\" with "/"  for IE 11 setAttribute to image src compability issue
                // other main stream browser does not have the issue
                src = this.props.source.replace(/\\/g, "/");
            }
            return React.createElement(Image_1.Image, { source: src, style: this.props.style, altText: this.props.altText, title: this.props.title });
        }
        else {
            return React.createElement(this.getElementName(), this.getElementPropsInternal(), this.getElementChildren());
        }
    };
    /**
     * Display name for React dev tools
     */
    InnerSvg.displayName = "Svg";
    return InnerSvg;
}(ComponentBase_1.ComponentBase));
var Svg = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerSvg);
exports.Svg = Svg;

},{"./ComponentBase":15,"./FelaConnectHelper":17,"./Image":27,"./Svg/Utils":43,"react":undefined,"react-fela":undefined}],43:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Get the svg element by given URL.
 * @param url path to svg icon.
 */
function getSvg(url) {
    return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                var svgString = xhr.responseText;
                if (/<svg[\s\S]*>/i.test(svgString)) {
                    // sometimes we get svg image without svg extension.
                    resolve(_convertStringToSvgElement(svgString));
                }
                else {
                    reject(new Error("Provided file isn't a valid SVG"));
                }
            }
        };
        xhr.open("GET", url, true);
        xhr.send();
    });
    /**
     * Returns the SVGElement parsed from string with response.
     * @param svgString string describing svg element.
     */
    function _convertStringToSvgElement(svgString) {
        var domParser = new DOMParser();
        var parsedData = domParser.parseFromString(svgString, "text/xml");
        return parsedData.getElementsByTagName("svg")[0];
    }
}
/**
 * Gets the react props corresponding to SVG element.
 * @param url url for svg element.
 */
function parseSvg(url) {
    return getSvg(url).then(function (svg) {
        var svgProps = null;
        if (svg) {
            sanitizeSvgInPlace(svg);
            svgProps = getSvgAttrsAsReactProps(svg);
            // SVG's inner content as stringified XML
            svgProps.dangerouslySetInnerHTML = { __html: getInnerXML(svg) };
            svgProps = Object.freeze(svgProps);
        }
        return svgProps;
    });
    function sanitizeSvgInPlace(element) {
        var scriptTags = element.getElementsByTagName("script");
        for (var i = scriptTags.length - 1; i >= 0; i--) {
            scriptTags[i].parentNode.removeChild(scriptTags[i]);
        }
    }
    function getInnerXML(element) {
        var serializer = new XMLSerializer();
        return Array.prototype.reduce.call(element.childNodes, function (acc, child) { return acc + serializer.serializeToString(child); }, "");
    }
    function getSvgAttrsAsReactProps(element) {
        var props = {};
        for (var i = 0; i < element.attributes.length; i++) {
            var name_1 = element.attributes[i].name;
            var value = element.attributes[i].value;
            if (name_1 === "style") {
                value = convertStyleStringToReactStyles(value);
            }
            props[name_1] = value;
        }
        return props;
        function convertStyleStringToReactStyles(styleStr) {
            if (!styleStr) {
                return null;
            }
            var rules = styleStr.split(";");
            var style = {};
            for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
                var rule = rules_1[_i];
                var splittedRule = rule.split(":");
                var key = splittedRule[0].trim().replace(/-\S/g, function (str) { return str[1].toUpperCase(); });
                var value = splittedRule[1].trim();
                style[key] = value;
            }
            return style;
        }
    }
}
exports.parseSvg = parseSvg;

},{}],44:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */

var Label_1 = require("./Label");
var ComponentBase_1 = require("./ComponentBase");
var Select_1 = require("./Select/Select");
var Checkbox_1 = require("./Checkbox");
var AccessibilityRole = require("../Supplementary/Accessibility/Attributes/Role");
var View_1 = require("./View");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * Component representing a Switch base control
 */
var InnerSwitch = /** @class */ (function (_super) {
    __extends(InnerSwitch, _super);
    function InnerSwitch(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._optionSetChange = _this._optionSetChange.bind(_this);
        _this._onCheckboxChange = _this._onCheckboxChange.bind(_this);
        _this.onClick = _this.onClick.bind(_this);
        _this.state = {
            checked: _this.props.value || false,
        };
        return _this;
    }
    /**
     * Invoked when the component receiving new props
     * @param nextProps
     */
    InnerSwitch.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.value !== null && nextProps.value !== undefined && nextProps.value !== this.state.checked) {
            this.setState({ checked: nextProps.value });
        }
    };
    /**
     * Handler for onChange event on checkbox
     */
    InnerSwitch.prototype._onCheckboxChange = function (checkboxValue) {
        if (this.state.checked !== checkboxValue) {
            this.setState({ checked: checkboxValue });
            if (this.props.onValueChange) {
                this.props.onValueChange(checkboxValue);
            }
        }
        if (this.props.onOptionSetValueChange) {
            if (this.props.options) {
                var currentValue = this.props.options[Number(checkboxValue)];
                this.props.onOptionSetValueChange(currentValue);
            }
        }
    };
    /**
     * Handler for onChange event on optionSet like controls
     * @param option
     */
    InnerSwitch.prototype._optionSetChange = function (option) {
        if (option) {
            if (this.props.onOptionSetValueChange) {
                this.props.onOptionSetValueChange(option);
            }
        }
    };
    /**
     * OnClick handler for toggle control
     * @private
     */
    InnerSwitch.prototype.onClick = function () {
        if (this.props.onOptionSetValueChange) {
            if (this.props.options) {
                var currentValue = this.props.options[Number(!this.props.value)];
                this.props.onOptionSetValueChange(currentValue);
            }
        }
    };
    /**
     * Returns the specific element props.
     */
    InnerSwitch.prototype.getCheckboxComponent = function () {
        var props = {
            tabIndex: 0,
            disabled: this.props.disabled,
            id: this.props.id || null,
            key: this.props.id || null,
            onChange: this._onCheckboxChange,
            testhooks: this.props.testhooks,
            name: this.props.name ? this.props.name : null,
            accessibilityRole: !this.props.displayAs || this.props.displayAs === InnerSwitch._CHECKBOX_DISPLAY_TAG
                ? ""
                : AccessibilityRole.SWITCH,
            accessibilityLabel: this.props.accessibilityLabel,
            describedByElementId: this.props.describedByElementId ? null : this.props.describedByElementId,
            style: this.props.style,
            checked: this.props.displayAs ? this.props.value : this.state.checked,
            accessibilityChecked: this.props.displayAs ? this.props.value : this.state.checked,
        };
        return React.createElement(Checkbox_1.Checkbox, __assign({}, props));
    };
    /**
     * Returns select element for switch primitive
     * @returns {any}
     */
    InnerSwitch.prototype.getSelectComponent = function () {
        var currentValue = this.props.options[Number(this.props.value)];
        var props = {
            style: this.props.style || {},
            options: this.props.options,
            value: currentValue,
            onChange: this._optionSetChange,
            testhooks: this.props.testhooks,
            disabled: this.props.disabled,
            key: this.props.absoluteId,
            name: this.props.id,
            id: this.props.id,
            accessibilityLabel: this.props.accessibilityLabel,
            title: this.props.title,
            onFocus: this.props.disabled ? null : this.props.onFocus,
            onBlur: this.props.disabled ? null : this.props.onBlur,
            describedByElementId: this.props.describedByElementId ? null : this.props.describedByElementId,
        };
        return React.createElement(Select_1.Select, __assign({}, props));
    };
    /**
     * Returns label element for switch primitive
     * @returns {any}
     */
    InnerSwitch.prototype.getLabelComponent = function () {
        var props = {};
        // merging attributes passed from client-side into local props variable
        Object.assign(props, this.props);
        var label = this.props.displayValue;
        if (this.props.displayAs === InnerSwitch._CHECKBOX_DISPLAY_TAG) {
            props.forElementId = this.props.id || null;
            label = this.props.defaultValue;
        }
        else {
            props.onClick = this.onClick;
        }
        if (this.props.testhooks) {
            props.testhooks = this.props.testhooks;
        }
        props.style = {
            overflow: "hidden",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
        };
        if (this.props.displayValue) {
            return React.createElement(Label_1.Label, __assign({}, props), label);
        }
        return null;
    };
    InnerSwitch.prototype.render = function () {
        if (!this.props.options && this.props.displayAs) {
            return React.createElement(Label_1.Label, null);
        }
        if (this.props.displayAs === InnerSwitch._SELECT_DISPLAY_TAG) {
            return this.getSelectComponent();
        }
        if (this.props.displayAs === InnerSwitch._RADIO_DISPLAY_TAG) {
            return this.getLabelComponent();
        }
        var props = {
            style: {
                display: "flex",
                alignItems: "center",
                width: "100%",
            },
        };
        return (React.createElement(View_1.View, __assign({}, props, { testhooks: this.props.testhooks }),
            this.getCheckboxComponent(),
            this.getLabelComponent()));
    };
    /**
     * Display name for React dev tools
     */
    InnerSwitch.displayName = "Switch";
    InnerSwitch._CHECKBOX_DISPLAY_TAG = "checkbox";
    InnerSwitch._SELECT_DISPLAY_TAG = "picklist";
    InnerSwitch._RADIO_DISPLAY_TAG = "radio";
    return InnerSwitch;
}(ComponentBase_1.ComponentBase));
exports.InnerSwitch = InnerSwitch;
var Switch = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerSwitch);
exports.Switch = Switch;

},{"../Supplementary/Accessibility/Attributes/Role":58,"./Checkbox":13,"./ComponentBase":15,"./FelaConnectHelper":17,"./Label":28,"./Select/Select":41,"./View":55,"react":undefined,"react-fela":undefined}],45:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * Table component
 */
var InnerTable = /** @class */ (function (_super) {
    __extends(InnerTable, _super);
    function InnerTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTable.prototype.getElementName = function () {
        return "table";
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTable.displayName = "Table";
    return InnerTable;
}(ComponentBase_1.ComponentBase));
exports.InnerTable = InnerTable;
var Table = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTable);
exports.Table = Table;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],46:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * TableBody component
 */
var InnerTableBody = /** @class */ (function (_super) {
    __extends(InnerTableBody, _super);
    function InnerTableBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTableBody.prototype.getElementName = function () {
        return "tbody";
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTableBody.displayName = "TableBody";
    return InnerTableBody;
}(ComponentBase_1.ComponentBase));
exports.InnerTableBody = InnerTableBody;
var TableBody = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTableBody);
exports.TableBody = TableBody;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],47:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * TableCaption component
 */
var InnerTableCaption = /** @class */ (function (_super) {
    __extends(InnerTableCaption, _super);
    function InnerTableCaption() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTableCaption.prototype.getElementName = function () {
        return "caption";
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTableCaption.displayName = "TableCaption";
    return InnerTableCaption;
}(ComponentBase_1.ComponentBase));
exports.InnerTableCaption = InnerTableCaption;
var TableCaption = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTableCaption);
exports.TableCaption = TableCaption;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],48:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * TableCell component
 */
var InnerTableCell = /** @class */ (function (_super) {
    __extends(InnerTableCell, _super);
    function InnerTableCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTableCell.prototype.getElementName = function () {
        return "td";
    };
    /**
     * Returns the specific element props.
     */
    InnerTableCell.prototype.getElementProps = function () {
        var props = {};
        if (this.props.colSpan)
            props.colSpan = this.props.colSpan;
        if (this.props.rowSpan)
            props.rowSpan = this.props.rowSpan;
        if (this.props.scope)
            props.scope = this.props.scope;
        return props;
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTableCell.displayName = "TableCell";
    return InnerTableCell;
}(ComponentBase_1.ComponentBase));
exports.InnerTableCell = InnerTableCell;
var TableCell = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTableCell);
exports.TableCell = TableCell;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],49:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * TableFooter component
 */
var InnerTableFooter = /** @class */ (function (_super) {
    __extends(InnerTableFooter, _super);
    function InnerTableFooter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTableFooter.prototype.getElementName = function () {
        return "tfoot";
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTableFooter.displayName = "TableFooter";
    return InnerTableFooter;
}(ComponentBase_1.ComponentBase));
exports.InnerTableFooter = InnerTableFooter;
var TableFooter = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTableFooter);
exports.TableFooter = TableFooter;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],50:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * TableHeader component
 */
var InnerTableHeader = /** @class */ (function (_super) {
    __extends(InnerTableHeader, _super);
    function InnerTableHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTableHeader.prototype.getElementName = function () {
        return "thead";
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTableHeader.displayName = "TableHeader";
    return InnerTableHeader;
}(ComponentBase_1.ComponentBase));
exports.InnerTableHeader = InnerTableHeader;
var TableHeader = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTableHeader);
exports.TableHeader = TableHeader;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],51:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * TableHeaderCell component
 */
var InnerTableHeaderCell = /** @class */ (function (_super) {
    __extends(InnerTableHeaderCell, _super);
    function InnerTableHeaderCell(props) {
        var _this = _super.call(this, props) || this;
        _this._onClickWrapper = _this._onClickWrapper.bind(_this);
        return _this;
    }
    /**
     * Handler for onClick event
     */
    InnerTableHeaderCell.prototype._onClickWrapper = function (event) {
        if (this.props.onClick) {
            this.props.onClick(event);
        }
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTableHeaderCell.prototype.getElementName = function () {
        return "th";
    };
    /**
     * Returns the specific element props.
     * Note, some of the props still get assigned automatically, like "id", "style", "className", "children" etc.
     */
    InnerTableHeaderCell.prototype.getElementProps = function () {
        var returnElementProps = Object.assign({}, this.props, {
            children: null,
            onClick: this._onClickWrapper,
        });
        return returnElementProps;
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTableHeaderCell.displayName = "TableHeaderCell";
    return InnerTableHeaderCell;
}(ComponentBase_1.ComponentBase));
exports.InnerTableHeaderCell = InnerTableHeaderCell;
var TableHeaderCell = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTableHeaderCell);
exports.TableHeaderCell = TableHeaderCell;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],52:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("../ComponentBase");

var FelaConnectHelper_1 = require("../FelaConnectHelper");
/**
 * TableRow component
 */
var InnerTableRow = /** @class */ (function (_super) {
    __extends(InnerTableRow, _super);
    function InnerTableRow(props) {
        var _this = _super.call(this, props) || this;
        _this._onClickWrapper = _this._onClickWrapper.bind(_this);
        return _this;
    }
    /**
     * Handler for onClick event
     */
    InnerTableRow.prototype._onClickWrapper = function (event) {
        if (this.props.onClick) {
            this.props.onClick(event);
        }
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTableRow.prototype.getElementName = function () {
        return "tr";
    };
    /**
     * Returns the specific element props.
     * Note, some of the props still get assigned automatically, like "id", "style", "className", "children" etc.
     */
    InnerTableRow.prototype.getElementProps = function () {
        var returnElementProps = Object.assign({}, this.props, {
            children: null,
            onClick: this._onClickWrapper,
        });
        return returnElementProps;
    };
    /**
     * Component name for React Dev Tools
     */
    InnerTableRow.displayName = "TableRow";
    return InnerTableRow;
}(ComponentBase_1.ComponentBase));
exports.InnerTableRow = InnerTableRow;
var TableRow = ReactFela.connect(FelaConnectHelper_1.mapStylesToProps)(InnerTableRow);
exports.TableRow = TableRow;

},{"../ComponentBase":15,"../FelaConnectHelper":17,"react-fela":undefined}],53:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ComponentBase_1 = require("./ComponentBase");
var AttributeName = require("../Supplementary/Accessibility/Attributes/AttributeName");
var AccessibilityRole = require("../Supplementary/Accessibility/Attributes/Role");
var AriaLive = require("../Supplementary/Accessibility/Attributes/AriaLive");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
/**
 * Function to transform React Native fontWeight style property into React CSS fontWeight property
 * React Native uses certain number of strings as the fontWeight allowed values.
 * React CSS takes strings (like "normal", "bold", etc.) or number (for all values except strings, like 100, 200, etc.)
 * @param fontWeight cannot be undefined or null.
 */
function transformFontWeight(fontWeight) {
    switch (fontWeight) {
        case "normal":
            return "normal";
        case "bold":
            return "bold";
        default:
            return Number(fontWeight);
    }
}
/**
 * Text component
 */
var InnerText = /** @class */ (function (_super) {
    __extends(InnerText, _super);
    function InnerText() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerText.prototype.getElementName = function () {
        return this.props.semanticTag || "span";
    };
    /**
     * Returns the class name for the underlying element.
     * @param style the style to be applied to the underlying component, used for readout here.
     */
    InnerText.prototype.getElementClassName = function () {
        var className = this.props.styles ? this.props.styles : "";
        return this.props.className ? className + " " + this.props.className : className;
    };
    /**
     * Returns the specific element props.
     */
    InnerText.prototype.getElementProps = function () {
        var options = {};
        switch (this.props.role) {
            case AccessibilityRole.ALERT:
                options[AttributeName.ARIA_LIVE] = this.props.notificationType || AriaLive.POLITE;
                break;
        }
        return options;
    };
    /**
     * Component name for React Dev Tools
     */
    InnerText.displayName = "Text";
    return InnerText;
}(ComponentBase_1.ComponentBase));
exports.InnerText = InnerText;
function fontWeightRuleGen(props) {
    if (props && props.style) {
        if (props.style.fontWeight) {
            return Object.assign({}, {
                fontWeight: typeof props.style.fontWeight === "string"
                    ? transformFontWeight(props.style.fontWeight)
                    : props.style.fontWeight,
            }, FelaConnectHelper_1.ruleGen(props));
        }
        return Object.assign(props.style, FelaConnectHelper_1.ruleGen(props));
    }
    return {};
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(fontWeightRuleGen, props); }; };
var Text = ReactFela.connect(mapStylesToProps)(InnerText);
exports.Text = Text;

},{"../Supplementary/Accessibility/Attributes/AriaLive":56,"../Supplementary/Accessibility/Attributes/AttributeName":57,"../Supplementary/Accessibility/Attributes/Role":58,"./ComponentBase":15,"./FelaConnectHelper":17,"react-fela":undefined}],54:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var ComponentBase_1 = require("./ComponentBase");
var AttributeName = require("../Supplementary/Accessibility/Attributes/AttributeName");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
var CustomControlLocHelper_1 = require("../../CustomControls/Components/Helpers/CustomControlLocHelper");
/**
 * Enum for keyboardType values.
 * @readonly
 */
var KeyboardType;
(function (KeyboardType) {
    KeyboardType[KeyboardType["default"] = 0] = "default";
    KeyboardType[KeyboardType["emailAddress"] = 1] = "emailAddress";
    KeyboardType[KeyboardType["numeric"] = 2] = "numeric";
    KeyboardType[KeyboardType["phonePad"] = 3] = "phonePad";
    KeyboardType[KeyboardType["asciiCapable"] = 4] = "asciiCapable";
    KeyboardType[KeyboardType["numbersAndPunctuation"] = 5] = "numbersAndPunctuation";
    KeyboardType[KeyboardType["url"] = 6] = "url";
    KeyboardType[KeyboardType["numberPad"] = 7] = "numberPad";
    KeyboardType[KeyboardType["namePhonePad"] = 8] = "namePhonePad";
    KeyboardType[KeyboardType["decimalPad"] = 9] = "decimalPad";
    KeyboardType[KeyboardType["twitter"] = 10] = "twitter";
    KeyboardType[KeyboardType["webSearch"] = 11] = "webSearch";
})(KeyboardType || (KeyboardType = {}));
exports.KeyboardType = KeyboardType;
var CompositionEvent;
(function (CompositionEvent) {
    CompositionEvent[CompositionEvent["start"] = 0] = "start";
    CompositionEvent[CompositionEvent["update"] = 1] = "update";
    CompositionEvent[CompositionEvent["end"] = 2] = "end";
})(CompositionEvent || (CompositionEvent = {}));
var DEFAULT_INPUT_VALUE = "---";
/**
 * TextInput component
 *
 * @class
 */
var InnerTextInput = /** @class */ (function (_super) {
    __extends(InnerTextInput, _super);
    /**
     * TextInput constructor
     * @param [props] Component props
     * @param [context] Component context
     */
    function InnerTextInput(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._compositionEvents = [];
        _this._refCallbackTrigger = _this._refCallbackTrigger.bind(_this);
        _this._onKeyPress = _this._onKeyPress.bind(_this);
        _this._onChange = _this._onChange.bind(_this);
        _this._onInput = _this._onInput.bind(_this);
        _this.handleFocus = _this.handleFocus.bind(_this);
        _this.handleBlur = _this.handleBlur.bind(_this);
        _this.handlePointerDown = _this.handlePointerDown.bind(_this);
        _this.handlePointerUp = _this.handlePointerUp.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this._refElementCallback = _this._refElementCallback.bind(_this);
        _this.handleKeyUp = _this.handleKeyUp.bind(_this);
        _this._onCompositionStart = _this._onCompositionStart.bind(_this);
        _this._onCompositionUpdate = _this._onCompositionUpdate.bind(_this);
        _this._onCompositionEnd = _this._onCompositionEnd.bind(_this);
        _this.state = {
            value: props.value,
        };
        return _this;
    }
    /**
     * Invoked when the component receiving new props
     * @param nextProps
     */
    InnerTextInput.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps && nextProps.value !== this.state.value) {
            // resetting the value via props has a priority over the component's state
            this.setState({ value: nextProps.value });
        }
        if (this._dateInput) {
            this._dateInput.defaultValue = "";
        }
    };
    InnerTextInput.prototype._selectValue = function () {
        // Note that accordingly to the WHATWG forms spec selectionStart, selectionEnd properties and
        // setSelectionRange method apply only to inputs of types:
        // text, search, URL, tel and password.
        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
        if (!this.props.type ||
            this.props.type.toLowerCase() === "text" ||
            this.props.type.toLowerCase() === "search" ||
            this.props.type.toLowerCase() === "url" ||
            this.props.type.toLowerCase() === "tel" ||
            this.props.type.toLowerCase() === "password") {
            var element = this.props.multiline
                ? ReactDOM.findDOMNode(this)
                : ReactDOM.findDOMNode(this);
            element.selectionStart = 0;
            element.selectionEnd = element.value.length;
        }
    };
    /**
     * TextInput.onChange & TextInput.onChangeText events handler
     * @param e Synthetic React event
     */
    InnerTextInput.prototype._onChange = function (e) {
        if (!this.isIE) {
            this._handleOnChange(e);
        }
    };
    /**
     * TextInput.onChange & TextInput.onChangeText events handler
     * @param e Synthetic React event
     */
    InnerTextInput.prototype._onInput = function (e) {
        if (this.isIE) {
            var value = this.props.multiline
                ? e.target.value
                : e.target.value;
            //We need to explicitly check if the value has changed, do not fire the event if value has not changed
            if (this.state.value === value && this._compositionEvents.length === 0) {
                return;
            }
            this._compositionEvents = [];
            this._handleOnChange(e);
        }
    };
    InnerTextInput.prototype._onCompositionStart = function () {
        this._compositionEvents.push(CompositionEvent.start);
    };
    InnerTextInput.prototype._onCompositionUpdate = function (e) {
        var value = this.props.multiline
            ? e.target.value
            : e.target.value;
        if (this.state.value !== value) {
            this.setState({ value: value });
        }
        this._compositionEvents.push(CompositionEvent.update);
    };
    InnerTextInput.prototype._onCompositionEnd = function () {
        this._compositionEvents.push(CompositionEvent.end);
    };
    /**
     * Invoke onChange / onChangeText handler supplied by control
     * @param e Synthetic React event
     */
    InnerTextInput.prototype._handleOnChange = function (e) {
        var value = this.props.multiline
            ? e.target.value
            : e.target.value;
        this.setState({ value: value });
        if (this.props.onChange) {
            this.props.onChange(e);
        }
        if (this.props.onChangeText) {
            this.props.onChangeText(value);
        }
    };
    /**
     * TextInput.onSubmitEditing event handler
     * @param e Synthetic React event
     */
    InnerTextInput.prototype._onKeyPress = function (e) {
        if (this.props.onKeyPress) {
            this.props.onKeyPress(e);
        }
    };
    /**
     * TextInput.onFocus event handler
     * @param e Synthetic React event
     */
    InnerTextInput.prototype.handleFocus = function (e) {
        var _this = this;
        var innerHandleFocus = function () {
            if (_this.props.selectValueOnFocus && _this.state && _this.state.value) {
                _this._selectValue();
            }
            if (_this.props.onFocus) {
                // TODO: In the callback case e will have changed due to event pooling
                // https://facebook.github.io/react/docs/events.html#event-pooling
                _this.props.onFocus(e);
            }
        };
        // Workaround for the bug "Edge fails to auto-select on focus"
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8229660/
        // When the bug is fixed, it can be removed.
        if (window.navigator.userAgent.match(/Edge\/(13|14)/)) {
            return window.setTimeout(innerHandleFocus, 10);
        }
        else {
            innerHandleFocus();
        }
    };
    /**
     * TextInput.onBlur event handler
     * @param e Synthetic React event
     */
    InnerTextInput.prototype.handleBlur = function (e) {
        if (this.props.onBlur) {
            this.props.onBlur(e);
        }
    };
    /**
     * Handles the onPointerDown event.
     */
    InnerTextInput.prototype.handlePointerDown = function (e) {
        if (this.props.onPointerDown) {
            this.props.onPointerDown(e);
        }
    };
    /**
     * Handles the onPointerUp event.
     */
    InnerTextInput.prototype.handlePointerUp = function (e) {
        if (this.props.onPointerUp) {
            this.props.onPointerUp(e);
        }
    };
    /**
     * Handles the keydown event.
     */
    InnerTextInput.prototype.handleKeyDown = function (e) {
        if (this.props.onKeyDown) {
            this.props.onKeyDown(e);
        }
    };
    /**
     * Handles the keyup event.
     */
    InnerTextInput.prototype.handleKeyUp = function (e) {
        if (this.props.onKeyUp) {
            this.props.onKeyUp(e);
        }
    };
    /**
     * Returns the specific name of the underlying element.
     */
    InnerTextInput.prototype.getElementName = function () {
        return this.props.multiline ? "textarea" : "input";
    };
    /**
     * Returns the specific element props.
     */
    InnerTextInput.prototype.getElementProps = function () {
        var _a;
        var props = (_a = {
                value: this.state.value || "",
                title: this.props.title ||
                    (this.state.value === DEFAULT_INPUT_VALUE ? CustomControlLocHelper_1.getLocalizedString("SELECT_TO_ENTER_DATA") : this.state.value) ||
                    CustomControlLocHelper_1.getLocalizedString("SELECT_TO_ENTER_DATA"),
                onChange: this._onChange,
                onInput: this._onInput,
                onCompositionStart: this._onCompositionStart,
                onCompositionUpdate: this._onCompositionUpdate,
                onCompositionEnd: this._onCompositionEnd,
                placeholder: this.props.placeholder,
                maxLength: this.props.maxLength,
                onKeyPress: this._onKeyPress,
                autoComplete: "off"
            },
            _a[AttributeName.ARIA_READONLY] = this.props.disabled || this.props.readOnly ? this.props.readOnly === true : null,
            _a[AttributeName.ARIA_MULTILINE] = this.props.multiline ? this.props.multiline === true : null,
            _a[AttributeName.ARIA_AUTO_COMPLETE] = this.props.autoComplete,
            _a);
        if (this.props.readOnly) {
            props.readOnly = true;
        }
        if (this.props.disabled) {
            props.disabled = true;
        }
        if (!this.props.multiline) {
            // For input element
            // If there is no type given in props
            // try to deduct the default one.
            if (!this.props.type) {
                switch (this.props.keyboardType) {
                    case KeyboardType.numeric:
                        props.type = "number";
                        break;
                    case KeyboardType.emailAddress:
                        props.type = "email";
                        break;
                    default:
                        props.type = "text";
                        break;
                }
            }
            else {
                // If there is a type given in props
                // use it.
                props.type = this.props.type;
            }
        }
        else {
            if (this.props.rows) {
                props.rows = Math.max(this.props.rows, InnerTextInput._MIN_TEXTAREA_ROWS);
            }
        }
        return Object.assign(props, {
            ref: this.props.refCallback
                ? this._refCallbackTrigger
                : this.props.type === "datetime-local" || this.props.type === "datetime"
                    ? this._refElementCallback
                    : null,
        });
    };
    InnerTextInput.prototype._refElementCallback = function () {
        this._dateInput = ReactDOM.findDOMNode(this);
    };
    /**
     * Triggers the callback function of the text input reference.
     * @param input the text input reference
     */
    InnerTextInput.prototype._refCallbackTrigger = function (input) {
        this.props.refCallback(input);
    };
    /**
     * Display name for React dev tools
     */
    InnerTextInput.displayName = "TextInput";
    /**
     * Minimum number of rows that should be displayed by the textarea.
     */
    InnerTextInput._MIN_TEXTAREA_ROWS = 2;
    return InnerTextInput;
}(ComponentBase_1.ComponentBase));
exports.InnerTextInput = InnerTextInput;
function textInputRuleGen(props) {
    // hide IE11 clear X
    var customStyles = {
        "::-ms-clear": {
            display: "none",
        },
    };
    if (props && props.style) {
        if (props.isRTL) {
            Object.assign(customStyles, {
                direction: "rtl",
                unicodeBidi: "bidi-override",
            });
        }
        return Object.assign(props.style, customStyles, FelaConnectHelper_1.ruleGen(props));
    }
    return {};
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(textInputRuleGen, props); }; };
var TextInput = ReactFela.connect(mapStylesToProps)(InnerTextInput);
exports.TextInput = TextInput;

},{"../../CustomControls/Components/Helpers/CustomControlLocHelper":61,"../Supplementary/Accessibility/Attributes/AttributeName":57,"./ComponentBase":15,"./FelaConnectHelper":17,"react-dom":undefined,"react-fela":undefined}],55:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var IFlexboxContainerStyle_1 = require("./IFlexboxContainerStyle");
var ComponentBase_1 = require("./ComponentBase");
var MeasuringHandler_1 = require("../Common/MeasuringHandler/MeasuringHandler");

var FelaConnectHelper_1 = require("./FelaConnectHelper");
var CustomControlSeeMoreStyleHelper_1 = require("../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper");
/**
 * Abstract View container that gets its semantic meaning by supplying a meaningful
 * role and semanticTag property value.
 */
var InnerView = /** @class */ (function (_super) {
    __extends(InnerView, _super);
    function InnerView(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Subscriber object to store callback functions for re-measuring service need
         */
        _this._subscriber = null;
        /**
         * Ref of the mounted element
         */
        _this._mountedElement = null;
        _this._getReference = _this._getReference.bind(_this);
        return _this;
    }
    /**
     * Returns the specific name of the underlying element.
     */
    InnerView.prototype.getElementName = function () {
        return this.props.semanticTag || "div";
    };
    /**
     * Returns the class name for the underlying element.
     * @param style the style to be applied to the underlying component, used for readout here.
     */
    InnerView.prototype.getFlexClassName = function (style) {
        return IFlexboxContainerStyle_1.getCssClassName(style ? style.display : null);
    };
    /**
     * When container wants to re-measure
     * After component mounted, we subscribe to the measuring service by passing in getComponent and onMeasure callbacks.
     */
    InnerView.prototype.componentDidMount = function () {
        if (this.props.isRequestedMeasuring) {
            this._subscriber = {
                forceMeasure: this.props.forceMeasure,
                getComponent: this.getComponent.bind(this),
                onMeasure: this.props.onMeasuring,
            };
            MeasuringHandler_1.MeasuringHandler.getInstance().addMeasuringSubscribers(this._subscriber);
        }
    };
    /**
     * When component did update, we need to get the latest instance of the react component
     * This is specially handling cell/cch when it renders out an empty container while waiting for the data
     */
    InnerView.prototype.componentDidUpdate = function () {
        if (this.props.isRequestedMeasuring) {
            this._mountedElement = ReactDOM.findDOMNode(this);
        }
    };
    /**
     * Register the ref callback when container has the need to re-measure when dom changes
     */
    InnerView.prototype._getReference = function (viewRef) {
        if (viewRef && this.props.isRequestedMeasuring) {
            this._mountedElement = ReactDOM.findDOMNode(viewRef);
        }
    };
    /**
     * Return the reference of the react component instance
     */
    InnerView.prototype.getComponent = function () {
        return this._mountedElement;
    };
    /**
     * Unsubscribe the measuring service when component is unmounted
     */
    InnerView.prototype.componentWillUnmount = function () {
        if (this.props.isRequestedMeasuring) {
            MeasuringHandler_1.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._subscriber);
        }
    };
    /**
     * Returns the specific style for the underlying element.
     */
    InnerView.prototype.getElementStyle = function () {
        if (this.props.style) {
            return IFlexboxContainerStyle_1.applyIFlexboxContainerProp(this.props.style);
        }
    };
    /**
     * Returns the class name for the underlying element.
     */
    InnerView.prototype.getElementClassName = function () {
        var className = _super.prototype.getElementClassName.call(this);
        if (this.props && this.props.className) {
            className += " " + this.props.className;
        }
        if (this.props.style && InnerView.isElementScrollable(this.props.style)) {
            className +=
                CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().getDisableScrollStyle() && !this.props.isWithinATopMostSeeMore
                    ? " webkitScrollAuto"
                    : " webkitScroll";
        }
        return className;
    };
    /**
     * Returns the specific element props.
     */
    InnerView.prototype.getElementProps = function () {
        var props = {
            id: this.props.id,
            accessKey: this.props.accessKey === "" ? null : this.props.accessKey,
            ref: this.props.isRequestedMeasuring ? this._getReference : undefined,
        };
        if (typeof this.props.isRTL === "boolean") {
            props.dir = this.props.isRTL ? "rtl" : "ltr";
        }
        if (!this.isIE &&
            !this.hasAriaProperty() &&
            typeof this.props.tabIndex !== "number" &&
            (!this.props.semanticTag || this.props.semanticTag === "div" || this.props.semanticTag === "span")) {
            props.role = "presentation";
        }
        return props;
    };
    /**
     * Renders the component to the virtual DOM.
     */
    InnerView.prototype.render = function () {
        return React.createElement(this.getElementName(), this.getElementPropsInternal(), this.getElementChildren());
    };
    /**
     * Display name for React dev tools
     */
    InnerView.displayName = "View";
    return InnerView;
}(ComponentBase_1.ComponentBase));
exports.InnerView = InnerView;
function viewRuleGen(props) {
    if (props && props.style) {
        return Object.assign(props.style, FelaConnectHelper_1.ruleGen(props));
    }
    return {};
}
var mapStylesToProps = function (props) { return function (renderer) { return renderer.renderRule(viewRuleGen, props); }; };
var View = ReactFela.connect(mapStylesToProps)(InnerView);
exports.View = View;

},{"../../CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper":62,"../Common/MeasuringHandler/MeasuringHandler":4,"./ComponentBase":15,"./FelaConnectHelper":17,"./IFlexboxContainerStyle":25,"react":undefined,"react-dom":undefined,"react-fela":undefined}],56:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OFF = "off";
exports.POLITE = "polite";
exports.ASSERTIVE = "assertive";

},{}],57:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ROLE = "role";
exports.TITLE = "title";
exports.FOR = "for";
exports.ALT = "alt";
exports.ACCESS_KEY = "accessKey";
exports.DIR = "dir";
exports.TAB_INDEX = "tabindex";
exports.HIDDEN = "hidden";
exports.DISABLED = "disabled";
exports.REQUIRED = "required";
exports.ARIA_ACTIVE_DESCENDANT = "aria-activedescendant";
exports.ARIA_ATOMIC = "aria-atomic";
exports.ARIA_AUTO_COMPLETE = "aria-autocomplete";
exports.ARIA_BUSY = "aria-busy";
exports.ARIA_CONTROLS = "aria-controls";
exports.ARIA_CHECKED = "aria-checked";
exports.ARIA_DESCRIBED_BY = "aria-describedby";
exports.ARIA_DISABLED = "aria-disabled";
exports.ARIA_DROP_EFFECT = "aria-dropeffect";
exports.ARIA_EXPANDED = "aria-expanded";
exports.ARIA_FLOW_TO = "aria-flowto";
exports.ARIA_GRABBED = "aria-grabbed";
exports.ARIA_HAS_POPUP = "aria-haspopup";
exports.ARIA_HIDDEN = "aria-hidden";
exports.ARIA_INVALID = "aria-invalid";
exports.ARIA_LABEL = "aria-label";
exports.ARIA_LABELLED_BY = "aria-labelledby";
exports.ARIA_LEVEL = "aria-level";
exports.ARIA_LIVE = "aria-live";
exports.ARIA_MODAL = "aria-modal";
exports.ARIA_MULTILINE = "aria-multiline";
exports.ARIA_MULTISELECTABLE = "aria-multiselectable";
exports.ARIA_OWNS = "aria-owns";
exports.ARIA_POS_IN_SET = "aria-posinset";
exports.ARIA_PRESSED = "aria-pressed";
exports.ARIA_RELEVANT = "aria-relevant";
exports.ARIA_READONLY = "aria-readonly";
exports.ARIA_REQUIRED = "aria-required";
exports.ARIA_SELECTED = "aria-selected";
exports.ARIA_SET_SIZE = "aria-setsize";
exports.ARIA_SORT = "aria-sort";
exports.ARIA_CURRENT = "aria-current";
exports.ARIA_VALUE_MAX = "aria-valuemax";
exports.ARIA_VALUE_MIN = "aria-valuemin";
exports.ARIA_VALUE_NOW = "aria-valuenow";
exports.ARIA_VALUE_TEXT = "aria-valuetext";
exports.ARIA_ORIENTATION = "aria-orientation";

},{}],58:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ALERT = "alert";
exports.ALERT_DIALOG = "alertdialog";
exports.ARTICLE = "article";
exports.BUTTON = "button";
exports.CHECKBOX = "checkbox";
exports.SWITCH = "switch";
exports.DIALOG = "dialog";
exports.GRID_CELL = "gridcell";
exports.LINK = "link";
exports.LOG = "log";
exports.MARQUEE = "marquee";
exports.MENU_ITEM = "menuitem";
exports.MENU_ITEM_CHECKBOX = "menuitemcheckbox";
exports.MENU_ITEM_RADIO = "menuitemradio";
exports.OPTION = "option";
exports.PROGRESSBAR = "progressbar";
exports.RADIO = "radio";
exports.SCROLLBAR = "scrollbar";
exports.SLIDER = "slider";
exports.SPIN_BUTTON = "spinbutton";
exports.STATUS = "status";
exports.TAB = "tab";
exports.TAB_LIST = "tablist";
exports.TAB_PANEL = "tabpanel";
exports.TEXTBOX = "textbox";
exports.TIMER = "timer";
exports.TOOLTIP = "tooltip";
exports.TREE_ITEM = "treeitem";
exports.COMBOBOX = "combobox";
exports.GRID = "grid";
exports.LISTBOX = "listbox";
exports.MENU = "menu";
exports.MENUBAR = "menubar";
exports.RADIO_GROUP = "radiogroup";
exports.TREE = "tree";
exports.TREE_GRID = "treegrid";
exports.COLUMN_HEADER = "columnheader";
exports.DEFINITION = "definition";
exports.DIRECTORY = "directory";
exports.DOCUMENT = "document";
exports.GROUP = "group";
exports.HEADING = "heading";
exports.LIST = "list";
exports.LIST_ITEM = "listitem";
exports.MATH = "math";
exports.NOTE = "note";
exports.PRESENTATION = "presentation";
exports.REGION = "region";
exports.ROW = "row";
exports.ROW_HEADER = "rowheader";
exports.SEPARATOR = "separator";
exports.TOOLBAR = "toolbar";
exports.APPLICATION = "application";
exports.BANNER = "banner";
exports.COMPLEMENTARY = "complementary";
exports.CONTENT_INFO = "contentinfo";
exports.FORM = "form";
exports.MAIN = "main";
exports.NAVIGATION = "navigation";
exports.SEARCH = "search";
exports.IMG = "img";

},{}],59:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Enum to list out all keycodes for html
 */
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["Backspace"] = 8] = "Backspace";
    KeyCode[KeyCode["Tab"] = 9] = "Tab";
    KeyCode[KeyCode["Enter"] = 13] = "Enter";
    KeyCode[KeyCode["Shift"] = 16] = "Shift";
    KeyCode[KeyCode["Ctrl"] = 17] = "Ctrl";
    KeyCode[KeyCode["Alt"] = 18] = "Alt";
    KeyCode[KeyCode["PauseBreak"] = 19] = "PauseBreak";
    KeyCode[KeyCode["Capslock"] = 20] = "Capslock";
    KeyCode[KeyCode["Escape"] = 27] = "Escape";
    KeyCode[KeyCode["Space"] = 32] = "Space";
    KeyCode[KeyCode["PageUp"] = 33] = "PageUp";
    KeyCode[KeyCode["PageDown"] = 34] = "PageDown";
    KeyCode[KeyCode["End"] = 35] = "End";
    KeyCode[KeyCode["Home"] = 36] = "Home";
    KeyCode[KeyCode["LeftArrow"] = 37] = "LeftArrow";
    KeyCode[KeyCode["UpArrow"] = 38] = "UpArrow";
    KeyCode[KeyCode["RightArrow"] = 39] = "RightArrow";
    KeyCode[KeyCode["DownArrow"] = 40] = "DownArrow";
    KeyCode[KeyCode["Insert"] = 45] = "Insert";
    KeyCode[KeyCode["Delete"] = 46] = "Delete";
    KeyCode[KeyCode["Num0"] = 48] = "Num0";
    KeyCode[KeyCode["Num1"] = 49] = "Num1";
    KeyCode[KeyCode["Num2"] = 50] = "Num2";
    KeyCode[KeyCode["Num3"] = 51] = "Num3";
    KeyCode[KeyCode["Num4"] = 52] = "Num4";
    KeyCode[KeyCode["Num5"] = 53] = "Num5";
    KeyCode[KeyCode["Num6"] = 54] = "Num6";
    KeyCode[KeyCode["Num7"] = 55] = "Num7";
    KeyCode[KeyCode["Num8"] = 56] = "Num8";
    KeyCode[KeyCode["Num9"] = 57] = "Num9";
    KeyCode[KeyCode["A"] = 65] = "A";
    KeyCode[KeyCode["B"] = 66] = "B";
    KeyCode[KeyCode["C"] = 67] = "C";
    KeyCode[KeyCode["D"] = 68] = "D";
    KeyCode[KeyCode["E"] = 69] = "E";
    KeyCode[KeyCode["F"] = 70] = "F";
    KeyCode[KeyCode["G"] = 71] = "G";
    KeyCode[KeyCode["H"] = 72] = "H";
    KeyCode[KeyCode["I"] = 73] = "I";
    KeyCode[KeyCode["J"] = 74] = "J";
    KeyCode[KeyCode["K"] = 75] = "K";
    KeyCode[KeyCode["L"] = 76] = "L";
    KeyCode[KeyCode["M"] = 77] = "M";
    KeyCode[KeyCode["N"] = 78] = "N";
    KeyCode[KeyCode["O"] = 79] = "O";
    KeyCode[KeyCode["P"] = 80] = "P";
    KeyCode[KeyCode["Q"] = 81] = "Q";
    KeyCode[KeyCode["R"] = 82] = "R";
    KeyCode[KeyCode["S"] = 83] = "S";
    KeyCode[KeyCode["T"] = 84] = "T";
    KeyCode[KeyCode["U"] = 85] = "U";
    KeyCode[KeyCode["V"] = 86] = "V";
    KeyCode[KeyCode["W"] = 87] = "W";
    KeyCode[KeyCode["X"] = 88] = "X";
    KeyCode[KeyCode["Y"] = 89] = "Y";
    KeyCode[KeyCode["Z"] = 90] = "Z";
    KeyCode[KeyCode["LeftWindowKey"] = 91] = "LeftWindowKey";
    KeyCode[KeyCode["RightWindowKey"] = 92] = "RightWindowKey";
    KeyCode[KeyCode["SelectKey"] = 93] = "SelectKey";
    KeyCode[KeyCode["NumPad0"] = 96] = "NumPad0";
    KeyCode[KeyCode["NumPad1"] = 97] = "NumPad1";
    KeyCode[KeyCode["NumPad2"] = 98] = "NumPad2";
    KeyCode[KeyCode["NumPad3"] = 99] = "NumPad3";
    KeyCode[KeyCode["NumPad4"] = 100] = "NumPad4";
    KeyCode[KeyCode["NumPad5"] = 101] = "NumPad5";
    KeyCode[KeyCode["NumPad6"] = 102] = "NumPad6";
    KeyCode[KeyCode["NumPad7"] = 103] = "NumPad7";
    KeyCode[KeyCode["NumPad8"] = 104] = "NumPad8";
    KeyCode[KeyCode["NumPad9"] = 105] = "NumPad9";
    KeyCode[KeyCode["Multiply"] = 106] = "Multiply";
    KeyCode[KeyCode["Add"] = 107] = "Add";
    KeyCode[KeyCode["Subtract"] = 109] = "Subtract";
    KeyCode[KeyCode["DecimalPoint"] = 110] = "DecimalPoint";
    KeyCode[KeyCode["Divide"] = 111] = "Divide";
    KeyCode[KeyCode["F1"] = 112] = "F1";
    KeyCode[KeyCode["F2"] = 113] = "F2";
    KeyCode[KeyCode["F3"] = 114] = "F3";
    KeyCode[KeyCode["F4"] = 115] = "F4";
    KeyCode[KeyCode["F5"] = 116] = "F5";
    KeyCode[KeyCode["F6"] = 117] = "F6";
    KeyCode[KeyCode["F7"] = 118] = "F7";
    KeyCode[KeyCode["F8"] = 119] = "F8";
    KeyCode[KeyCode["F9"] = 120] = "F9";
    KeyCode[KeyCode["F10"] = 121] = "F10";
    KeyCode[KeyCode["F11"] = 122] = "F11";
    KeyCode[KeyCode["F12"] = 123] = "F12";
    KeyCode[KeyCode["NumLock"] = 144] = "NumLock";
    KeyCode[KeyCode["ScrollLock"] = 145] = "ScrollLock";
    KeyCode[KeyCode["SemiColon"] = 186] = "SemiColon";
    KeyCode[KeyCode["EqualSign"] = 187] = "EqualSign";
    KeyCode[KeyCode["Comma"] = 188] = "Comma";
    KeyCode[KeyCode["Dash"] = 189] = "Dash";
    KeyCode[KeyCode["Period"] = 190] = "Period";
    KeyCode[KeyCode["ForwardSlash"] = 191] = "ForwardSlash";
    KeyCode[KeyCode["GraveAccent"] = 192] = "GraveAccent";
    KeyCode[KeyCode["OpenBracket"] = 219] = "OpenBracket";
    KeyCode[KeyCode["BackSlash"] = 220] = "BackSlash";
    KeyCode[KeyCode["CloseBraket"] = 221] = "CloseBraket";
    KeyCode[KeyCode["SingleQuote"] = 222] = "SingleQuote";
})(KeyCode || (KeyCode = {}));
exports.KeyCode = KeyCode;

},{}],60:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CustomControlFlyoutParentHelper = /** @class */ (function () {
    function CustomControlFlyoutParentHelper() {
        this._parentFlyoutNameToChildRootNameMap = {};
    }
    CustomControlFlyoutParentHelper.getInstance = function () {
        if (!CustomControlFlyoutParentHelper._instance) {
            CustomControlFlyoutParentHelper._instance = new CustomControlFlyoutParentHelper();
        }
        return CustomControlFlyoutParentHelper._instance;
    };
    CustomControlFlyoutParentHelper.prototype.mountChildFlyout = function (parentKey, childKey) {
        if (!this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(parentKey)) {
            this._parentFlyoutNameToChildRootNameMap[parentKey] = [];
        }
        this._parentFlyoutNameToChildRootNameMap[parentKey].push(childKey);
    };
    CustomControlFlyoutParentHelper.prototype.unmountChildFlyout = function (parentKey, childKey) {
        if (this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(parentKey)) {
            var parent_1 = this._parentFlyoutNameToChildRootNameMap[parentKey];
            var index = parent_1.indexOf(childKey);
            if (index > -1) {
                parent_1.splice(index, 1);
                if (parent_1.length < 1) {
                    delete this._parentFlyoutNameToChildRootNameMap[parentKey];
                }
            }
            return false;
        }
        return false;
    };
    CustomControlFlyoutParentHelper.prototype.getChildRoots = function (parentKey) {
        return this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(parentKey)
            ? this._parentFlyoutNameToChildRootNameMap[parentKey]
            : [];
    };
    return CustomControlFlyoutParentHelper;
}());
exports.CustomControlFlyoutParentHelper = CustomControlFlyoutParentHelper;

},{}],61:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var DEFAULT_STRINGS = {
    ERROR_LOADING_CONTROL: "Error loading control",
    VALIDATION_FAILED_EMAIL: "Value is not a valid email",
    VALIDATION_FAILED_BOOL: "Value is not a valid boolean",
    VALIDATION_FAILED_DATE: "Value is not a valid Date object",
    VALIDATION_FAILED_NUM: "Value is not a valid number",
    VALIDATION_FAILED_INT: "Number is not a valid integer",
    VALIDATION_FAILED_RANGE: "Value is not within the defined range for this property. Range is {0} to {1}",
    SELECT_TO_ENTER_DATA: "Select to enter data.",
};
var CUSTOM_CONTROL_GLOBAL_STRINGS = DEFAULT_STRINGS;
function getLocalizedString(key) {
    return CUSTOM_CONTROL_GLOBAL_STRINGS[key];
}
exports.getLocalizedString = getLocalizedString;
function updateLocStrings(newStrings) {
    CUSTOM_CONTROL_GLOBAL_STRINGS = Object.assign(CUSTOM_CONTROL_GLOBAL_STRINGS, newStrings);
}
exports.updateLocStrings = updateLocStrings;
function resetStrings() {
    CUSTOM_CONTROL_GLOBAL_STRINGS = DEFAULT_STRINGS;
}
exports.resetStrings = resetStrings;

},{}],62:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CustomControlSeeMoreStyleHelper = /** @class */ (function () {
    function CustomControlSeeMoreStyleHelper() {
        this._disablingScrollStyle = false;
        /**
         * A count of popups present on the current page
         */
        this._popupCount = 0;
    }
    /**
     * Gets the current see more style helper instance
     */
    CustomControlSeeMoreStyleHelper.getInstance = function () {
        if (!CustomControlSeeMoreStyleHelper._instance) {
            CustomControlSeeMoreStyleHelper._instance = new CustomControlSeeMoreStyleHelper();
        }
        return CustomControlSeeMoreStyleHelper._instance;
    };
    /**
     * Tracks a see more popup as open
     */
    CustomControlSeeMoreStyleHelper.prototype.seeMoreOpen = function () {
        this._popupCount++;
        this.setDisableScrollStyle(true);
    };
    /**
     * Tracks a see more popup as closed
     */
    CustomControlSeeMoreStyleHelper.prototype.seeMoreClose = function () {
        this._popupCount--;
        this.setDisableScrollStyle(false);
    };
    /**
     * Gets the current count of active popups;
     */
    CustomControlSeeMoreStyleHelper.prototype.getPopupCount = function () {
        return this._popupCount;
    };
    /**
     * Get whether we should currently disable webkit scroll overflow
     */
    CustomControlSeeMoreStyleHelper.prototype.getDisableScrollStyle = function () {
        return this._disablingScrollStyle;
    };
    /**
     * Sets whether we should currently disable webkit scroll overflow
     * and triggers updates of all the elements that would be using it
     */
    CustomControlSeeMoreStyleHelper.prototype.setDisableScrollStyle = function (value) {
        if (this._disablingScrollStyle !== value) {
            this._disablingScrollStyle = value;
            var webkitValues = document.querySelectorAll(value ? ".webkitScroll" : ".webkitScrollAuto");
            for (var i = 0; i < webkitValues.length; i++) {
                if (value) {
                    webkitValues[i].classList.add("webkitScrollAuto");
                    webkitValues[i].classList.remove("webkitScroll");
                }
                else {
                    webkitValues[i].classList.add("webkitScroll");
                    webkitValues[i].classList.remove("webkitScrollAuto");
                }
            }
            var forceStack = document.querySelectorAll(value ? ".forceNewStackContext" : ".forceNewStackContextInert");
            for (var i = 0; i < forceStack.length; i++) {
                if (value) {
                    forceStack[i].classList.add("forceNewStackContextInert");
                    forceStack[i].classList.remove("forceNewStackContext");
                }
                else {
                    forceStack[i].classList.add("forceNewStackContext");
                    forceStack[i].classList.remove("forceNewStackContextInert");
                }
            }
        }
    };
    return CustomControlSeeMoreStyleHelper;
}());
exports.CustomControlSeeMoreStyleHelper = CustomControlSeeMoreStyleHelper;

},{}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */

/**
 * Virtual component class
 */
var VirtualComponent = /** @class */ (function () {
    /**
     * Initializes a new instance of the <see cref="VirtualComponent"/> class.
     * @param type The component type
     * @param componentId The component Id
     * @param properties A dictionary of parameters associated with this entity.
     * @param children An array of child virtual components associated with this entity.
     */
    function VirtualComponent(type, componentId, properties, children) {
        this._type = type;
        this._componentId = componentId;
        this._properties = Object.assign({}, properties);
        this._children = [];
        if (children != null) {
            if (typeof children === "string" ||
                typeof children === "number" ||
                children instanceof VirtualComponent ||
                React.isValidElement(children)) {
                this._children = children;
            }
            else if (children instanceof Array) {
                this._children = children.filter(function (x) {
                    return typeof x === "string" || typeof x === "number" || x instanceof VirtualComponent || React.isValidElement(x);
                }).slice();
            }
        }
    }
    /**
     * Used to update a VirtualComponent generated from a system-generated complex control
     * @param additionalProps Properties that would be passed in via a parent
     */
    VirtualComponent.prototype.getVirtualRepresentation = function (additionalProps) {
        return new VirtualComponent(this._type, this._componentId, Object.assign(this._properties, additionalProps), null);
    };
    /**
     * Returns the type of this component.
     */
    VirtualComponent.prototype.getType = function () {
        return this._type;
    };
    /**
     * Returns the component Id
     */
    VirtualComponent.prototype.getComponentId = function () {
        return this._componentId;
    };
    /**
     * Returns a dictionary of this component's properties.
     */
    VirtualComponent.prototype.getProperties = function () {
        return this._properties;
    };
    /**
     * Returns an array of child virtual components associated with this component.
     */
    VirtualComponent.prototype.getChildren = function () {
        if (this._children instanceof Array)
            return this._children.slice();
        else
            return this._children;
    };
    /**
     * Sets passed props to virtual component using merge strategy
     */
    VirtualComponent.prototype.setProperties = function (props) {
        Object.assign(this._properties, props);
    };
    return VirtualComponent;
}());
exports.VirtualComponent = VirtualComponent;

},{"react":undefined}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ManifestType_1 = require("../Utilities/ManifestType");
var CCFPerformanceTracker_1 = require("../Utilities/CCFPerformanceTracker");
var TelemetryManager_1 = require("../Utilities/TelemetryManager");
var XrmProxy_1 = require("../Utilities/XrmProxy");
var COMMANDING_WRAPPER_CREATE_COMMAND_MANAGER = "CommandingWrapper.CreateCommandManager";
/**
 * Commanding Wrapper is a component that manages all commanding manager instances in a page.
 * CommandingWrapper MUST be initialized when a command manager is required.
 * Each control can have 0 or 1 instance of CommandingWrapper, each CommandingWrapper is associated with exactly 1 control.
 * CommandingWrapper will keep track of the command managers associate with the control.
 * For every different entity type in the control, a seperate command manager MUST be created with unique command manager Id when needed.
 * Users SHOULD avoid initialize unnecessary command managers at all time, as it is a very expensive operation.
 */
var CommandingWrapper = /** @class */ (function () {
    function CommandingWrapper(ownProps) {
        /**
         * DeferredPromise, created using action from uclient, resolved when request command manager is fully initialized
         */
        this._commandManagerPromises = {};
        /**
         * CommandManagerIds of the command managers initialized from this CommandingWrapper
         */
        this._commandManagerIds = [];
        /**
         * Memoized Command Properties
         */
        this._memoizedProps = {};
        /**
         * Reference to the dataset object wrappers in the current control
         * A custom control may contain multiple datasets, each should have different entity Type name.
         * If this is empty, then command bar of the control is not associate with any dataset
         */
        this._datasetWrappers = {};
        this._ownProps = ownProps;
        this._commandManagerId = ownProps.id + ":" + ownProps.controlId;
        this._externalCommandManagerId = ownProps.externalCommandManagerId;
        this._externalCommandManagerPromise = ownProps.externalCommandPromise;
        this._createCommandManagerUXComponent = ownProps.actions.createCommandManagerUXComponent();
        //Save the reference during initialization
        CommandingWrapper._commandingWrapperMap[this._commandManagerId] = this;
    }
    /**
     * add datasetwrapper
     * @param datasetWrapper
     */
    CommandingWrapper.prototype.addDataSetWrapper = function (datasetWrapper) {
        var viewId = datasetWrapper.getLatestData().getViewId();
        viewId = viewId ? viewId.toLowerCase() : "";
        var id = viewId + ":" + datasetWrapper.getEntityTypeName();
        this._datasetWrappers[id] = datasetWrapper;
    };
    /**
     * Use by control to retrieve command for list of records
     * @param commandManagerId unique id identifies the command manager in state tree
     * @param etn entity type name of the records
     * @param records list of Guid of selected records
     * @param commandButtonIds list of unique command button Ids
     * @param filterByPriority optional value indicating if the command buttons need to be ordered by priority.
     * @returns DeferredPromise
     */
    CommandingWrapper.prototype.retrieveRecordCommandForDatasetWrapper = function (allRecords, etn, records, commandButtonIds, filterByPriority, useNestedFormat, refreshAllRules) {
        var _this = this;
        var commandManagerId = this._commandManagerId + ":" + etn;
        var _me = this;
        var contextToken = this._ownProps.contextToken;
        var controlConstructorName = this._ownProps && this._ownProps.manifest && this._ownProps.manifest.ConstructorName
            ? this._ownProps.manifest.ConstructorName
            : null;
        var pageId = this._ownProps.id;
        if (!etn) {
            XrmProxy_1.default.Diagnostics.traceError(TelemetryManager_1.COMPONENT_NAME + ".Models.CommandingWrapper", "Entity Type Name is undefined");
            return Promise.reject("Entity Type Name is undefined");
        }
        if (this._externalCommandManagerId) {
            if (this._externalCommandInitialized) {
                return this._ownProps.actions.retrieveRecordCommand(allRecords, this._externalCommandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
            }
            else {
                if (this._externalCommandManagerPromise && this._externalCommandManagerPromise.isResolved()) {
                    this._externalCommandInitialized = true;
                    return _me._ownProps.actions.retrieveRecordCommand(allRecords, _me._externalCommandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
                }
                var returnExternalPromise = this._externalCommandManagerPromise.then(function () {
                    _me._externalCommandInitialized = true;
                    return _me._ownProps.actions.retrieveRecordCommand(allRecords, _me._externalCommandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
                }, function () {
                    var error = new Error("Command bar initialization failed");
                    XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Models", error, "Rejected promise", [
                        { name: "etn", value: etn },
                        { name: "commandManagerId", value: _this._commandManagerId },
                        {
                            name: "APIName",
                            value: TelemetryManager_1.COMPONENT_NAME + ".Models.CommandingWrapper.retrieveRecordCommandForDatasetWrapper",
                        },
                    ]);
                    throw error;
                });
                return returnExternalPromise;
            }
        }
        else if (this._commandManagerPromises[etn]) {
            return this._commandManagerPromises[etn].then(function () {
                return _me._ownProps.actions.retrieveRecordCommand(allRecords, commandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
            });
        }
        else if (this._commandManagerIds.indexOf(commandManagerId) > -1) {
            //Instance has been created and Command Manager initialization has completed, retrieve record command
            return this._ownProps.actions.retrieveRecordCommand(allRecords, commandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
        }
        else {
            var stop_1 = CCFPerformanceTracker_1.default.createPerformanceEvent(COMMANDING_WRAPPER_CREATE_COMMAND_MANAGER).startStopwatch({
                controlId: this._ownProps.controlId,
                commandManagerId: commandManagerId,
            });
            //First time initializing command manager
            //Dispatch an action, which will update the state tree and update the Custom Control Host Root, Custom Control Host Root will rerender with command managers.
            //Returns a promise that is then sent to Command Manager Constructor, which gets resolved when command manager finishes initialization
            var promise = _me._ownProps.actions.initializeCommandManager(pageId, this._ownProps.contextToken, this._ownProps.controlId, commandManagerId); //dispatch action to initialize the process
            this._commandManagerPromises[etn] = promise;
            return promise.then(function () {
                stop_1();
                _me._commandManagerPromises[etn] = null;
                return _me._ownProps.actions.retrieveRecordCommand(allRecords, commandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
            });
        }
    };
    /**
     * Use by control to retrieve command for list of records
     * @param commandManagerId unique id identifies the command manager in state tree
     * @param etn entity type name of the records
     * @param records list of Guid of selected records
     * @param commandButtonIds list of unique command button Ids
     * @param filterByPriority optional value, set to true to only return buttons have priority property.
     * @returns DeferredPromise
     */
    CommandingWrapper.prototype.retrieveRecordCommand = function (viewId, etn, records, commandButtonIds, filterByPriority, useNestedFormat, refreshAllRules) {
        var datasetWrapper = this._datasetWrappers[(viewId ? viewId.toLowerCase() : "") + ":" + etn];
        if (!datasetWrapper) {
            //reject if no associated dataset
            XrmProxy_1.default.Diagnostics.traceError(TelemetryManager_1.COMPONENT_NAME + ".retrieveRecordCommand", "No associated dataset, promise rejected");
            return Promise.reject(0);
        }
        var allRecords = datasetWrapper.getLatestData().records;
        return this.retrieveRecordCommandForDatasetWrapper(allRecords, etn, records, commandButtonIds, filterByPriority, useNestedFormat, refreshAllRules);
    };
    /**
     * Generate the RibbonId using provided data.
     * @param etn Entity Type Name (account, contact, etc.)
     * @param areaType Page Type (Form / Grid)
     * @param related SubGrid is related or not
     * @returns well formed RibbonId
     */
    CommandingWrapper.prototype.getRibbonId = function (etn, pageType, related) {
        var HOMEPAGEGRID_RIBBON_CONTEXT = "HomePageGrid:";
        var SUBGRIDSTANDARD_RIBBON_CONTEXT = "SubGridStandard:";
        var SUBGRIDASOCIATED_RIBBON_CONTEXT = "SubGridAssociated:";
        var context;
        if (pageType.toLowerCase() !== "form" && pageType.toLowerCase() !== "editform") {
            context = HOMEPAGEGRID_RIBBON_CONTEXT;
        }
        else if (related) {
            context = SUBGRIDASOCIATED_RIBBON_CONTEXT;
        }
        else {
            context = SUBGRIDSTANDARD_RIBBON_CONTEXT;
        }
        return context + etn;
    };
    /**
     * @param ownProps
     * @returns the default parameter for the control.
     */
    CommandingWrapper.prototype.getDefaultConfigParameters = function (ownProps) {
        //If it's a default grid, then use the entityTypeName from parameter to generate RibbonId
        if (ownProps.configuration && ownProps.configuration.Parameters) {
            var parameters = ownProps.configuration.Parameters;
            for (var name_1 in parameters) {
                var parameter = parameters[name_1];
                if (parameter.Type === ManifestType_1.ManifestType.Grid || parameter.Type === ManifestType_1.ManifestType.TimelineWall) {
                    var dataSetParam = parameter;
                    return dataSetParam;
                }
            }
        }
    };
    /**
     * Compute RibbonId, CommandManagerId, and update the value to props.
     * @param props commandManagerProps, including user-defined props such as style, key name...
     * @param ownProps props mapped from state tree, contains control information, which is required to generate the custom cotnrol manager Id and ribbon Id
     */
    CommandingWrapper.prototype.populateCommandManagerProps = function (props, ownProps, entityTypeName) {
        var param = this.getDefaultConfigParameters(ownProps);
        var etn = entityTypeName || (param ? param.TargetEntityType || param.EntityName : null);
        var related = param ? !!param.RelationshipName : null;
        // set the page id, it will be used as command manager id for HomePageGrid command bar
        props.id = ownProps.id;
        // If ribbonId is not set when creating the virtual component, generate it.
        // If it's explicitly set to null, skip the ribbonId generation and use null ribbonId to create commandbar
        if (props.ribbonId === undefined) {
            if (ownProps.formInfo && ownProps.formInfo.RibbonId) {
                props.ribbonId = ownProps.formInfo.RibbonId;
            }
            else {
                // set ribbon Id, if it's a subgrid inside form, generate command manager id to distinguish different subgrids in the same page
                var type = ownProps.pageType.toLowerCase();
                props.ribbonId = this.getRibbonId(etn, type, related);
            }
        }
        props.commandManagerId = this._commandManagerId + ":" + etn;
        props.key = props.key || this._ownProps.controlId + "-" + etn + "-commandbar";
        props.mainMenuLength = props.mainMenuLength || 3;
        props.contextToken = props.contextToken || ownProps.contextToken;
        props.customControlType =
            this._ownProps && this._ownProps.manifest && this._ownProps.manifest.ConstructorName
                ? this._ownProps.manifest.ConstructorName
                : null;
    };
    /**
     * Create a command bar, record the initializaion promise and instance
     * Layer between Uclient and Virtual Component Translator, allowing CommandingWrapper to keep track of already initialized command manager.
     * @param props
     * @returns JSX instance of command bar
     */
    CommandingWrapper.prototype.createCommandBar = function (props) {
        this._commandManagerIds.push(props.commandManagerId);
        return this._createCommandManagerUXComponent(props);
    };
    /**
     * Create Hidden Command Bar. This should only be invoked by CustomControlHostRoot to ensure proper clean up
     * Custom Controls should use initializeCommandManager, which will create hidden command managers
     * @param commandManagerId
     */
    CommandingWrapper.prototype.createHiddenCommandManager = function (commandManagerId, ribbonId) {
        var etn = commandManagerId.split(":")[2];
        var props;
        if (this._memoizedProps[commandManagerId]) {
            props = this._memoizedProps[commandManagerId];
        }
        else {
            props = {};
            this._memoizedProps[commandManagerId] = props;
            props.isHidden = true;
            props.ribbonId = ribbonId;
            props.metaDataLoadedPromise = this._commandManagerPromises[etn];
            this.populateCommandManagerProps(props, this._ownProps, etn);
        }
        return this.createCommandBar(props);
    };
    CommandingWrapper.getWrapperByCommandManagerId = function (commandManagerId) {
        return CommandingWrapper._commandingWrapperMap[commandManagerId];
    };
    /**
     * @returns the base commandManager id "pageId:controlId"
     */
    CommandingWrapper.prototype.getCommandManagerId = function () {
        return this._commandManagerId;
    };
    CommandingWrapper.prototype.linkParameterMethod = function (parameter) {
        parameter.retrieveRecordCommand = this.retrieveRecordCommandForDatasetWrapper.bind(this, parameter.records, parameter.getTargetEntityType());
    };
    CommandingWrapper.prototype.unmount = function () {
        delete CommandingWrapper._commandingWrapperMap[this._commandManagerId];
    };
    /**
     * Reference to all commanding wrapper created.
     */
    CommandingWrapper._commandingWrapperMap = {};
    return CommandingWrapper;
}());
exports.CommandingWrapper = CommandingWrapper;

},{"../Utilities/CCFPerformanceTracker":96,"../Utilities/ManifestType":104,"../Utilities/TelemetryManager":109,"../Utilities/XrmProxy":110}],65:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An object that encapsulates an Entity Reference as a plain object suitable for storing in the state tree
 */
var CustomControlEntityReference = /** @class */ (function () {
    /**
     * Creates a new EntityReference instance.
     * @param entityName The entity logical name
     * @param id The record id
     * @param name The optional record display name
     */
    function CustomControlEntityReference(entityName, id, name) {
        this._etn = entityName;
        this._id = id || "";
        this._name = name;
        Object.freeze(this);
    }
    Object.defineProperty(CustomControlEntityReference.prototype, "entityName", {
        /**
         * The entity type name.  Read-only. This is public to allow for access to the value as well as to simplify serialization.
         * TODO: Mark as read-only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._etn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomControlEntityReference.prototype, "entityType", {
        /**
         * The entity type name.  Read-only.This is public to allow for access to the value as well as to simplify serialization.
         * TODO: Mark as read - only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._etn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomControlEntityReference.prototype, "logicalName", {
        /**
         * The entity type name for backward compatibility.
         * TODO: Mark as read-only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._etn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomControlEntityReference.prototype, "LogicalName", {
        /**
         * The entity type name for backward compatibility.
         * TODO: Mark as read-only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._etn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomControlEntityReference.prototype, "id", {
        /**
         * The record id.  Read-only. This is public to allow for access to the value as well as to simplify serialization.
         * TODO: Mark as read-only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomControlEntityReference.prototype, "Id", {
        /**
         * The record id for backward compatibility.
         * TODO: Mark as read-only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._Id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomControlEntityReference.prototype, "name", {
        /**
         * The record display name.  Read-only. This is public to allow for access to the value as well as to simplify serialization.
         * TODO: Mark as read-only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomControlEntityReference.prototype, "Name", {
        /**
         * The record display nam for backward compatibility.
         * TODO: Mark as read-only when we adopt TypeScript 2.0
         */
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Output a simplified version of the EntityReference
     * @param reference
     */
    CustomControlEntityReference.toString = function (reference) {
        return reference.entityName + ":" + reference.id;
    };
    /**
     * Determine if two EntityReference objects are the same
     * @param x An EntityReference
     * @param y An EntityReference
     */
    CustomControlEntityReference.equals = function (x, y) {
        if (!x && !y) {
            return true;
        }
        else if (!x || !y) {
            return false;
        }
        else {
            return x.entityName === y.entityName && x.id === y.id && x.name === y.name;
        }
    };
    /**
     * An empty EntityReference
     */
    CustomControlEntityReference.EMPTY = new CustomControlEntityReference("");
    return CustomControlEntityReference;
}());
exports.CustomControlEntityReference = CustomControlEntityReference;

},{}],66:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var PopupType;
(function (PopupType) {
    PopupType[PopupType["Root"] = 1] = "Root";
    PopupType[PopupType["Nested"] = 2] = "Nested";
})(PopupType || (PopupType = {}));
exports.PopupType = PopupType;
/**
 * Indicates the form factor.
 */
var FormFactor;
(function (FormFactor) {
    FormFactor[FormFactor["None"] = 0] = "None";
    FormFactor[FormFactor["Slate"] = 1] = "Slate";
    FormFactor[FormFactor["Phone"] = 2] = "Phone";
    FormFactor[FormFactor["Desktop"] = 3] = "Desktop";
    FormFactor[FormFactor["MailApp"] = 4] = "MailApp";
})(FormFactor || (FormFactor = {}));
exports.FormFactor = FormFactor;
var supportedPrimitives = [
    "CRMICON",
    "ENTITYICON",
    "BOOLEAN",
    "BUTTON",
    "COMBOBOX",
    "CONTAINER",
    "HYPERLINK",
    "IMG",
    "FILEINPUT",
    "FLYOUT",
    "LABEL",
    "LIST",
    "LISTITEM",
    "LIVEPERSONACARDHOVERTARGET",
    "MICROSOFTICON",
    "POPUP",
    "SCROLLCONTAINER",
    "TABLE",
    "TABLEBODY",
    "TABLECAPTION",
    "TABLECELL",
    "TABLEFOOTER",
    "TABLEHEADER",
    "TABLEHEADERCELL",
    "TABLEROW",
    "TEXTINPUT",
    "IFRAME",
    "COMMANDBAR",
    "OPTION",
    "SELECT",
    "ENTITYIMAGE",
    "PROGRESSINDICATOR",
    "RADIO",
    "HORIZONTALSCROLL",
    "VIEWSELECTORCONTROL",
    "TEXT",
    "PRESENCEINDICATOR",
    "PLACEHOLDER",
];
exports.SupportedPrimitives = supportedPrimitives;

},{}],67:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Utility function. Check if it's Null Or Undefined
 * @param object object to be validated
 * @returns true, if it's null or undefined object. Otherwise, it's false
 */
function IsNullOrUndefined(object) {
    return object === null || object === undefined;
}
exports.IsNullOrUndefined = IsNullOrUndefined;
/**
 * Utility function. Check if it's Null Or Undefined, Or EmptyString
 * @param object object to be validated
 * @returns true, if it's null or undefined object, or empty string. Otherwise, it's false
 */
function IsNullOrEmptyString(object) {
    return IsNullOrUndefined(object) || !object.length;
}
exports.IsNullOrEmptyString = IsNullOrEmptyString;
/**
 * Utility function. Check if it's Array
 * @param object object to be validated
 * @returns true, if it's an array, otherwise false
 */
function IsArray(object) {
    return !IsNullOrUndefined(object) && object.constructor === Array;
}
exports.IsArray = IsArray;

},{}],68:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var VirtualComponent_1 = require("../Components/VirtualComponent");
var CCFPerformanceTracker_1 = require("../Utilities/CCFPerformanceTracker");
var CustomControlHelper_1 = require("../Utilities/CustomControlHelper");
var XrmProxy_1 = require("../Utilities/XrmProxy");
var CommandingWrapper_1 = require("./CommandingWrapper");
var LearningPathHelper_1 = require("../Utilities/LearningPathHelper");
var Reporting_1 = require("./PropertyClasses/Reporting");
var Formatting_1 = require("./PropertyClasses/Formatting");
var Factory_1 = require("./PropertyClasses/Factory");
var Diagnostics_1 = require("./PropertyClasses/Diagnostics");
var Utility_1 = require("./PropertyClasses/Utility");
var Performance_1 = require("./PropertyClasses/Performance");
var OrgSettings_1 = require("./PropertyClasses/OrgSettings");
var UserSettings_1 = require("./PropertyClasses/UserSettings");
var Client_1 = require("./PropertyClasses/Client");
var Navigation_1 = require("./PropertyClasses/Navigation");
var Mode_1 = require("./PropertyClasses/Mode");
var Device_1 = require("./PropertyClasses/Device");
var ExternalContext_1 = require("./PropertyClasses/ExternalContext");
var Communication_1 = require("./PropertyClasses/Communication");
var Theming_1 = require("./PropertyClasses/Theming");
var Resources_1 = require("./PropertyClasses/Resources");
var Accessibility_1 = require("./PropertyClasses/Accessibility");
var WebAPI_1 = require("./PropertyClasses/WebAPI");
var Page_1 = require("./PropertyClasses/Page");
var PropertyBagFactory_1 = require("./PropertyInfrastructure/PropertyBagFactory");
var ManifestDesignHelper_1 = require("../Utilities/ManifestDesignHelper");
var ParamUtils = require("./PropertyFallbacks/Parameters/ParameterUtils");
/**
 * The PropertyBag generator class for Custom Controls Framework
 */
var PropertyBag = /** @class */ (function () {
    /**
     * Generate an instance of the property bag
     * @param ownProps The associated Custom Control props
     * @param externalUtils External utils, which should be added to Property bag
     */
    function PropertyBag(ownProps, externalUtils) {
        /**
         * The accessibility internal data
         */
        this._accessibilityInternalData = { keyboardShortcuts: [] };
        var bagFactory = new PropertyBagFactory_1.PropertyBagFactory(ownProps, externalUtils);
        var stop = CCFPerformanceTracker_1.default.createPerformanceEvent("PropertyBag.constructor", ownProps.logLevel).startStopwatch({
            controlId: ownProps.controlId,
            manifestControlName: ownProps.manifest.CustomControlId,
            parentId: CustomControlHelper_1.getParentIdFromProps(ownProps),
            level: 0 /* Top */.toString(),
        });
        this._bagObject = {
            formatting: bagFactory.getInstance(Formatting_1.Formatting),
            factory: bagFactory.getInstance(Factory_1.Factory),
            navigation: bagFactory.getInstance(Navigation_1.Navigation),
            reporting: bagFactory.getInstance(Reporting_1.Reporting),
            diagnostics: bagFactory.getInstance(Diagnostics_1.Diagnostics),
            resources: bagFactory.getInstance(Resources_1.Resources),
            theming: bagFactory.getInstance(Theming_1.Theming),
            design: ManifestDesignHelper_1.default.GetThemeData(ownProps.manifest, ownProps.designLanguage),
            performance: bagFactory.getInstance(Performance_1.Performance),
            utils: bagFactory.getInstance(Utility_1.Utility),
            orgSettings: bagFactory.getInstance(OrgSettings_1.OrgSettings),
            userSettings: bagFactory.getInstance(UserSettings_1.UserSettings),
            offline: externalUtils.xrmProxy.Offline,
            learningPath: null,
            page: bagFactory.getInstance(Page_1.Page),
            webAPI: null,
            client: bagFactory.getInstance(Client_1.Client),
            parameters: {
                labelForPrefix: {
                    type: "",
                    raw: ownProps.descriptor.DomId + "-" + ownProps.descriptor.Id + "-" + ownProps.descriptor.Id,
                    error: false,
                    errorMessage: "",
                    security: null,
                },
            },
            mode: null,
            accessibility: null,
            updatedProperties: [],
            device: bagFactory.getInstance(Device_1.Device),
            externalContext: bagFactory.getInstance(ExternalContext_1.ExternalContext),
            communicationChannel: null,
        };
        stop();
    }
    /**
     * Generate the entire bag current
     */
    PropertyBag.prototype.generateBag = function (ownProps, hostData) {
        var bagFactory = new PropertyBagFactory_1.PropertyBagFactory(ownProps, null, hostData);
        var stop = CCFPerformanceTracker_1.default.createPerformanceEvent("PropertyBag.generateBag", ownProps.logLevel).startStopwatch({
            controlId: ownProps.controlId,
            manifestControlName: ownProps.manifest.CustomControlId,
            parentId: CustomControlHelper_1.getParentIdFromProps(ownProps),
            level: 1 /* Nested */.toString(),
        });
        this._bagObject.accessibility = bagFactory.getInstance(Accessibility_1.Accessibility);
        this._bagObject.mode = bagFactory.getInstance(Mode_1.Mode);
        this._bagObject.parameters = this._updateLatestParameters(ownProps);
        this._bagObject.children = this._getChildren(ownProps.children);
        this._bagObject.resources = bagFactory.getInstance(Resources_1.Resources);
        this._bagObject.webAPI = bagFactory.getInstance(WebAPI_1.WebAPI);
        this._bagObject.offline = XrmProxy_1.default.Offline;
        this._bagObject.learningPath = this._getLearningPathBag(ownProps);
        this._bagObject.updatedProperties = this._getUpdatedPropertiesBag(ownProps, hostData);
        this._bagObject.communicationChannel = bagFactory.getInstance(Communication_1.Communication);
        this._bagObject.decorators =
            ownProps.parentDefinedControlProps != null ? ownProps.parentDefinedControlProps.decorators : null;
        this._accessibilityInternalData = this._bagObject.accessibility.accessibilityInternalData;
        this._bagObject.client.updateClientBag(hostData);
        if (ownProps.propBagData.pageData != null) {
            this._bagObject.page.updateBag(ownProps);
        }
        stop();
        this._bagObject.utils.setNotification = this._bagObject.mode.setNotification.bind(this._bagObject.mode);
        this._bagObject.utils.clearNotification = this._bagObject.mode.clearNotification.bind(this._bagObject.mode);
        return this._bagObject;
    };
    /**
     * Get the virtual component equivalents of the children
     */
    PropertyBag.prototype._getChildren = function (childrenProps) {
        if (this._memoizedChildrenRaw !== childrenProps) {
            this._memoizedChildrenRaw = childrenProps;
            var newChildren = {};
            for (var childKey in this._memoizedChildrenRaw) {
                var child = this._memoizedChildrenRaw[childKey];
                newChildren[childKey] = new VirtualComponent_1.VirtualComponent(child.CustomControlId, childKey, { parameters: child.Parameters }, null);
            }
            this._memoizedChildrenConverted = newChildren;
        }
        return this._memoizedChildrenConverted;
    };
    /**
     * Update and get latest dataset and lookup parameters
     */
    PropertyBag.prototype._updateLatestParameters = function (ownProps) {
        var labelForPrefix = "labelForPrefix";
        var params = {
            labelForPrefix: this._bagObject.parameters[labelForPrefix],
        };
        if (ownProps.dynamicData.generateDummySystemProps) {
            Object.assign(params, ParamUtils.generateDummySystemParameters());
        }
        var parameters = ownProps.dynamicData && ownProps.dynamicData.parameters;
        var _loop_1 = function (paramKey) {
            var parameter = parameters[paramKey];
            if (parameter && parameter.attributes && parameter.attributes.SourceType) {
                // If SourceType = Rollup , executing the action for recalculate() for rollup fields.
                if (parameter.attributes.SourceType === 2) {
                    var EntityType_1 = ownProps.propBagData.modeData.entityTypeName;
                    var EntiTyId_1 = ownProps.propBagData.modeData.entityId;
                    var FieldName_1 = parameter.attributes.LogicalName;
                    parameter.attributes.recalculate = function () {
                        ownProps.actions.executeRollupRequest({ entityType: EntityType_1, id: EntiTyId_1 }, FieldName_1);
                    };
                }
            }
            if (parameters[paramKey] && parameters[paramKey].getLatestData) {
                var wrapper = parameters[paramKey];
                var param = wrapper.getLatestData();
                // To retrieve lookup metadata
                if (wrapper && wrapper.ensureLookupMetaDataInitialization) {
                    var delayMetadataInitializationName = "delayMetadataInitialization";
                    var delayMetadataInitializationParameter = ownProps.descriptor.Parameters && ownProps.descriptor.Parameters[delayMetadataInitializationName];
                    if (!delayMetadataInitializationParameter) {
                        var lookupWrapper = wrapper;
                        lookupWrapper.ensureLookupMetaDataInitialization({
                            retrieveLookupMetadataAction: ownProps.actions.retrieveLookupMetadataAction,
                            refreshDataSetParameter: ownProps.actions.refreshDataSetParameter,
                        });
                    }
                }
                wrapper.linkToParameter(param, {
                    retrieveAction: ownProps.actions.retrieveLookupData,
                    retrieveViewAction: ownProps.actions.retrieveView,
                    retrieveViewSelectorAction: ownProps.actions.retrieveViewSelector,
                    retrieveLookupMetadataAction: ownProps.actions.retrieveLookupMetadataAction,
                    retrieveRecordDataForForm: ownProps.actions.retrieveRecordDataForForm,
                    updateFieldValue: ownProps.actions.updateFieldValue,
                    saveEmbeddedEntity: ownProps.actions.saveEmbeddedEntity,
                    refreshDataSetParameter: ownProps.actions.refreshDataSetParameter,
                    retrieveDataSetLookupCellParameter: ownProps.actions.retrieveDataSetLookupCellParameter,
                    executeAddOnLoad: ownProps.actions.executeAddOnLoad,
                    setPowerBISignedInState: ownProps.actions.setPowerBISignedInState,
                    beginSecureSessionForResource: ownProps.actions.beginSecureSessionForResource,
                    executeNotifyHandlersThatEventOccurred: ownProps.actions.executeNotifyHandlersThatEventOccurred,
                    addSessionTab: ownProps.actions.addSessionTab,
                    closeSessionTab: ownProps.actions.closeSessionTab,
                    updateSessionTab: ownProps.actions.updateSessionTab,
                    closeAllSessionTabs: ownProps.actions.closeAllSessionTabs,
                    dismissMessage: ownProps.actions.dismissMessage,
                    markActiveTab: ownProps.actions.markActiveTab,
                    initializeReferencePanelControl: ownProps.actions.initializeReferencePanelControl,
                    cleanReferencePanelState: ownProps.actions.cleanReferencePanelState,
                    openDatasetItem: CustomControlHelper_1.openDatasetItemAction.bind(null, ownProps, param, paramKey),
                    updateControlMemoizedDataSet: ownProps.actions.updateControlMemoizedDataSet,
                    executeRollupRequest: ownProps.actions.executeRollupRequest,
                    loadWebResource: ownProps.actions.loadWebResource,
                    updateChartFilterExpression: ownProps.actions.updateChartFilterExpression,
                    sendLookupRequest: ownProps.actions.sendLookupRequest,
                    runPreSearch: ownProps.actions.runPreSearch,
                });
                var possibleDataSetWrapper = wrapper;
                if (possibleDataSetWrapper.applyDataSetInputs) {
                    var nextAction = possibleDataSetWrapper.applyDataSetInputs(param);
                    var possibleDataSet = param;
                    if (nextAction !== 0 /* None */) {
                        switch (nextAction) {
                            case 1 /* Refresh */:
                                if (possibleDataSet.refresh) {
                                    possibleDataSet.refresh();
                                }
                                break;
                            case 2 /* LoadNextPage */:
                                if (possibleDataSet.paging &&
                                    possibleDataSet.paging.hasNextPage &&
                                    possibleDataSet.paging.loadNextPage) {
                                    possibleDataSet.paging.loadNextPage();
                                }
                                break;
                            case 3 /* LoadPreviousPage */:
                                if (possibleDataSet.paging &&
                                    possibleDataSet.paging.hasPreviousPage &&
                                    possibleDataSet.paging.loadPreviousPage) {
                                    possibleDataSet.paging.loadPreviousPage();
                                }
                                break;
                            case 6 /* LoadExactPage */:
                                var pageInput = parameters[paramKey] &&
                                    parameters[paramKey]._wrapper &&
                                    parameters[paramKey]._wrapper.previousAppliedSubParametersInput.pagingInput
                                    ? parameters[paramKey]._wrapper.previousAppliedSubParametersInput.pagingInput.raw
                                    : null;
                                var pageNumber = pageInput ? JSON.parse(pageInput).firstPageNumber : null;
                                if (possibleDataSet.paging && possibleDataSet.paging.loadExactPage) {
                                    possibleDataSet.paging.loadExactPage(pageNumber);
                                }
                        }
                    }
                }
                var commandingWrapper = CommandingWrapper_1.CommandingWrapper.getWrapperByCommandManagerId(ownProps.id + ":" + ownProps.controlId);
                if (commandingWrapper && param.getTargetEntityType) {
                    commandingWrapper.linkParameterMethod(param);
                }
                params[paramKey] = param;
            }
            else {
                params[paramKey] = parameters[paramKey];
            }
        };
        for (var paramKey in parameters) {
            _loop_1(paramKey);
        }
        return params;
    };
    /**
     * Get accessibility data
     */
    PropertyBag.prototype.getAccessibilityData = function () {
        return this._accessibilityInternalData;
    };
    /**
     * Gets the learning path id from the bag object
     */
    PropertyBag.prototype.getLearningPathBag = function () {
        return this._bagObject.learningPath;
    };
    /**
     * Gets the skype channel info from the bag object
     */
    PropertyBag.prototype.getCommunicationBag = function () {
        return this._bagObject.communicationChannel;
    };
    /**
     * Generate the LearningPath bag
     */
    PropertyBag.prototype._getLearningPathBag = function (props) {
        var controlId = LearningPathHelper_1.LearningPathHelper.getLearningPathControlId(props);
        return {
            DOMAttributeName: LearningPathHelper_1.LearningPathHelper.LEARNING_PATH_ATTRIBUTE,
            baseControlId: controlId,
        };
    };
    /**
     * Get the UpdatedPropertiesBag
     */
    PropertyBag.prototype._getUpdatedPropertiesBag = function (ownProps, hostData) {
        var returnArray = [];
        if (hostData && hostData.updatedProperties) {
            returnArray = hostData.updatedProperties;
        }
        for (var paramKey in ownProps.dynamicData.parameters) {
            if (ownProps.dynamicData.parameters[paramKey] &&
                ownProps.dynamicData.parameters[paramKey].getUpdatedPropertiesDic) {
                var updatedPropertiesDic = ownProps.dynamicData.parameters[paramKey].getUpdatedPropertiesDic();
                for (var updatedProperty in updatedPropertiesDic) {
                    if (updatedPropertiesDic[updatedProperty] && returnArray.indexOf(updatedProperty) === -1) {
                        returnArray.push(updatedProperty);
                    }
                }
                if (ownProps.dynamicData.parameters[paramKey].clearUpdatedPropertiesDic) {
                    ownProps.dynamicData.parameters[paramKey].clearUpdatedPropertiesDic();
                }
            }
        }
        return returnArray;
    };
    return PropertyBag;
}());
exports.PropertyBag = PropertyBag;

},{"../Components/VirtualComponent":63,"../Utilities/CCFPerformanceTracker":96,"../Utilities/CustomControlHelper":99,"../Utilities/LearningPathHelper":102,"../Utilities/ManifestDesignHelper":103,"../Utilities/XrmProxy":110,"./CommandingWrapper":64,"./PropertyClasses/Accessibility":69,"./PropertyClasses/Client":70,"./PropertyClasses/Communication":71,"./PropertyClasses/Device":72,"./PropertyClasses/Diagnostics":73,"./PropertyClasses/ExternalContext":74,"./PropertyClasses/Factory":75,"./PropertyClasses/Formatting":76,"./PropertyClasses/Mode":77,"./PropertyClasses/Navigation":78,"./PropertyClasses/OrgSettings":79,"./PropertyClasses/Page":80,"./PropertyClasses/Performance":81,"./PropertyClasses/Reporting":82,"./PropertyClasses/Resources":83,"./PropertyClasses/Theming":84,"./PropertyClasses/UserSettings":85,"./PropertyClasses/Utility":86,"./PropertyClasses/WebAPI":87,"./PropertyFallbacks/Parameters/ParameterUtils":93,"./PropertyInfrastructure/PropertyBagFactory":94}],69:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CustomControlHelper_1 = require("../../Utilities/CustomControlHelper");
var Accessibility = /** @class */ (function () {
    function Accessibility(customControlProperties) {
        this._customControlProperties = customControlProperties;
        this.assignedTabIndex = CustomControlHelper_1.buildTabIndexValue(this._customControlProperties);
        this._accessibilityInternalData = { keyboardShortcuts: [] };
        this.isHighContrastEnabled = CustomControlHelper_1.getHighContrastEnabled();
    }
    Accessibility.prototype.registerShortcut = function (keyCombination, shortcutHandler, isGlobal, areaName, shortcutDescription, srcElementId) {
        var keyboardShortcut = this._customControlProperties.actions.createKeyboardShortcut(keyCombination, shortcutHandler, isGlobal, areaName, shortcutDescription, srcElementId);
        this._accessibilityInternalData.keyboardShortcuts.push(keyboardShortcut);
    };
    Accessibility.prototype.getUniqueId = function (id) {
        return CustomControlHelper_1.buildUniqueCustomControlId(this._customControlProperties, id);
    };
    Accessibility.prototype.focusElementById = function (id, isAbsoluteId) {
        CustomControlHelper_1.focusElementById(this._customControlProperties, id, isAbsoluteId);
    };
    Accessibility.prototype.blurElementById = function (id, isAbsoluteId) {
        CustomControlHelper_1.blurElementById(this._customControlProperties, id, isAbsoluteId);
    };
    Object.defineProperty(Accessibility.prototype, "accessibilityInternalData", {
        get: function () {
            return this._accessibilityInternalData;
        },
        set: function (data) {
            this._accessibilityInternalData = data;
        },
        enumerable: true,
        configurable: true
    });
    return Accessibility;
}());
exports.Accessibility = Accessibility;

},{"../../Utilities/CustomControlHelper":99}],70:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CCFUtils = require("./../CustomControlUtilityPointers");
var Client = /** @class */ (function () {
    function Client(customControlProperties, externalUtils) {
        this._externalUtils = externalUtils;
        this._customControlProperties = customControlProperties;
        this._xrmProxy = externalUtils.xrmProxy;
    }
    Client.prototype.getClient = function () {
        return this._externalUtils.xrmProxy.Client.getClient();
    };
    Client.prototype.isOffline = function () {
        return this._externalUtils.xrmProxy.Client.getClientState() === "Offline" ? true : false;
    };
    Client.prototype.getFormFactor = function () {
        return this._externalUtils.xrmProxy.Client.getFormFactor();
    };
    Client.prototype.getClientState = function () {
        return null;
    };
    Client.prototype.updateClientBag = function (hostData) {
        var formattingData = this._customControlProperties.propBagData.formattingData;
        var clientData = this._customControlProperties.propBagData.clientData;
        var utilsData = this._customControlProperties.propBagData.utilsData;
        this.formFactor = clientData.formFactor || this.getFormFactor();
        this.userAgent = clientData.userAgent;
        this.languageCode = clientData.languageCode ? clientData.languageCode.toString() : null;
        this.isRTL = this._xrmProxy.UserSettings.isRTL;
        this.locale = clientData.locale;
        this.orgSettings = clientData.orgSettingsData;
        this.dateFormattingInfo = formattingData.dateTimeFormatInfo;
        this.numberFormattingInfo = formattingData.numberFormatInfo;
        this.userTimeZoneUtcOffsetMinutes = formattingData.timeZoneUtcOffsetMinutes;
        // Potentially break this out into a public method for testing
        this.getUserTimeZoneUtcOffset = function (d) {
            return (formattingData.timeZoneUtcOffsetMinutes +
                utilsData.dateTimeUtils.getDSTAdjustmentMinutes(d, formattingData.timeZoneAdjusters));
        };
        // Get size info coming from parent container? on Props? Non-static
        this.allocatedWidth = CCFUtils.IsNullOrUndefined(hostData.allocatedWidth) ? -1 : hostData.allocatedWidth;
        this.allocatedHeight = CCFUtils.IsNullOrUndefined(hostData.allocatedHeight) ? -1 : hostData.allocatedHeight;
        this.trackContainerResize = hostData.trackResize;
        this.setFullScreen = hostData.updateFullscreen;
        this.setFullscreen = hostData.updateFullscreen;
        this.ignoreSelfUpdates = hostData.ignoreUpdates;
        this.disableScroll = clientData.disableScroll || false;
    };
    return Client;
}());
exports.Client = Client;

},{"./../CustomControlUtilityPointers":67}],71:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Communication = /** @class */ (function () {
    function Communication(customControlProperties) {
        this.getPresenceMappedField = customControlProperties.actions.getPresenceMappedField;
        this.isPresenceEnabled = customControlProperties.actions.isPresenceEnabledEntity;
    }
    Communication.prototype.getPresenceMappedField = function (_entityName) {
        return null;
    };
    Communication.prototype.isPresenceEnabled = function (_entityName) {
        return null;
    };
    return Communication;
}());
exports.Communication = Communication;

},{}],72:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var XrmProxy_1 = require("../../Utilities/XrmProxy");
var Device = /** @class */ (function () {
    function Device(customControlProperties) {
        this._bagProps = customControlProperties.propBagMethods.device;
    }
    Device.prototype.captureImage = function (options) {
        return XrmProxy_1.default.captureImage(options);
    };
    Device.prototype.captureAudio = function () {
        return XrmProxy_1.default.captureAudio();
    };
    Device.prototype.captureVideo = function () {
        return XrmProxy_1.default.captureVideo();
    };
    Device.prototype.pickFile = function (options) {
        return XrmProxy_1.default.pickFile(options);
    };
    Device.prototype.getBarcodeValue = function () {
        return XrmProxy_1.default.getBarcodeValue();
    };
    Device.prototype.getCurrentPosition = function () {
        return XrmProxy_1.default.getCurrentPosition();
    };
    Device.prototype.isGetBarcodeValueOperationAvailable = function () {
        return this._bagProps.isGetBarcodeValueOperationAvailable();
    };
    Device.prototype.isTakePictureOperationAvailable = function () {
        return this._bagProps.isTakePictureOperationAvailable();
    };
    Device.prototype.isCaptureVideoOperationAvailable = function () {
        return this._bagProps.isCaptureVideoOperationAvailable();
    };
    Device.prototype.isCaptureAudioOperationAvailable = function () {
        return this._bagProps.isCaptureAudioOperationAvailable();
    };
    return Device;
}());
exports.Device = Device;

},{"../../Utilities/XrmProxy":110}],73:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Diagnostics = /** @class */ (function () {
    function Diagnostics(customControlProperties, externalUtils) {
        this._traceLocation = "CustomControl.";
        this._externalUtils = externalUtils;
        this._controlId = customControlProperties.controlId;
    }
    Diagnostics.prototype.addControlId = function (message) {
        return message + "[CustomControlId = " + this._controlId + "]";
    };
    Diagnostics.prototype.traceError = function (componentName, message) {
        return this._externalUtils.xrmProxy.Diagnostics.traceError(this._traceLocation + componentName, this.addControlId(message));
    };
    Diagnostics.prototype.traceWarning = function (componentName, message) {
        return this._externalUtils.xrmProxy.Diagnostics.traceWarning(this._traceLocation + componentName, this.addControlId(message));
    };
    Diagnostics.prototype.traceInfo = function (componentName, message) {
        return this._externalUtils.xrmProxy.Diagnostics.traceInfo(this._traceLocation + componentName, this.addControlId(message));
    };
    Diagnostics.prototype.traceDebug = function (componentName, message) {
        return this._externalUtils.xrmProxy.Diagnostics.traceDebug(this._traceLocation + componentName, this.addControlId(message));
    };
    return Diagnostics;
}());
exports.Diagnostics = Diagnostics;

},{}],74:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var XrmProxy_1 = require("../../Utilities/XrmProxy");
var ExternalContext = /** @class */ (function () {
    function ExternalContext() {
    }
    ExternalContext.prototype.getAvailableExternalContexts = function () {
        return XrmProxy_1.default.getAvailableExternalContexts();
    };
    ExternalContext.prototype.getExternalContextProperty = function (externalContextId, externalContextPropertyId, options) {
        return XrmProxy_1.default.getExternalContextProperty(externalContextId, externalContextPropertyId, options);
    };
    ExternalContext.prototype.invokeExternalContextAction = function (externalContextId, externalContextActionId, options) {
        return XrmProxy_1.default.invokeExternalContextAction(externalContextId, externalContextActionId, options);
    };
    ExternalContext.prototype.removeExternalContextPropertyListener = function (externalContextId, externalContextPropertyId, listener) {
        return XrmProxy_1.default.removeExternalContextPropertyListener(externalContextId, externalContextPropertyId, listener);
    };
    return ExternalContext;
}());
exports.ExternalContext = ExternalContext;

},{"../../Utilities/XrmProxy":110}],75:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var VirtualComponent_1 = require("../../Components/VirtualComponent");
var CCFUtils = require("./../CustomControlUtilityPointers");
var DefaultControlMapper_1 = require("../../Utilities/DefaultControlMapper");
var Factory = /** @class */ (function () {
    function Factory(customControlProperties, externalUtils) {
        this._customControlProperties = customControlProperties;
        this._externalUtils = externalUtils;
    }
    Factory.prototype.createElement = function (type, properties, children) {
        return new VirtualComponent_1.VirtualComponent(type, properties ? properties.id : "", properties, children);
    };
    Factory.prototype.createComponent = function (type, id, properties) {
        return new VirtualComponent_1.VirtualComponent(type, id, properties, null);
    };
    Factory.prototype.bindDOMElement = function (virtualComponent, DOMNode) {
        this._externalUtils.bindDOMElement(virtualComponent, DOMNode);
    };
    Factory.prototype.bindDOMComponent = function (virtualComponent, DOMNode) {
        this._externalUtils.bindDOMElement(virtualComponent, DOMNode);
    };
    Factory.prototype.fireEvent = function (eventName, params) {
        var parentDefinedControlProps = this._customControlProperties.parentDefinedControlProps;
        if (!CCFUtils.IsNullOrUndefined(parentDefinedControlProps) &&
            !CCFUtils.IsNullOrUndefined(parentDefinedControlProps.eventListeners)) {
            var index = -1;
            var listeners = parentDefinedControlProps.eventListeners;
            for (var iterator = 0; iterator < listeners.length; iterator++) {
                if (listeners[iterator].eventname === eventName) {
                    index = iterator;
                }
            }
            if (index !== -1) {
                var handlersPair = parentDefinedControlProps.eventListeners[index];
                for (var iterator in handlersPair.eventhandler) {
                    if (!CCFUtils.IsNullOrUndefined(handlersPair.eventhandler[iterator])) {
                        handlersPair.eventhandler[iterator](params);
                    }
                }
            }
        }
    };
    Factory.prototype.getControlDefaultMapping = function (dataType, attributes) {
        return DefaultControlMapper_1.retrieveDefaultManifestNameByDataType(dataType, attributes);
    };
    Factory.prototype.getPopupService = function () {
        return this._externalUtils.getPopupService();
    };
    Factory.prototype.requestRender = function (callback) {
        this._externalUtils.forceUpdate(callback);
    };
    Factory.prototype.unbindDOMComponent = function (componentId) {
        return this._externalUtils.unbindDOMComponent(componentId);
    };
    Factory.prototype.updateComponent = function (id, props) {
        this._externalUtils.updateComponent(id, props);
    };
    return Factory;
}());
exports.Factory = Factory;

},{"../../Components/VirtualComponent":63,"../../Utilities/DefaultControlMapper":100,"./../CustomControlUtilityPointers":67}],76:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleFormatters_1 = require("./../PropertyFallbacks/Formatting/SimpleFormatters");
var CultureInfo_1 = require("../../Utilities/CultureInfo");
var Formatting = /** @class */ (function () {
    function Formatting(customControlProperties) {
        this._defaultFormatting = {
            timeZoneUtcOffsetMinutes: new Date().getTimezoneOffset(),
            dateTimeFormatInfo: CultureInfo_1.CultureInfo.CurrentCulture.dateTimeFormat,
            numberFormatInfo: CultureInfo_1.CultureInfo.CurrentCulture.numberFormat,
            timeZoneAdjusters: [],
            formatInfoCultureName: CultureInfo_1.CultureInfo.CurrentCulture.name,
            formatter: SimpleFormatters_1.SimpleFormatter,
            languagesByCode: {},
        };
        var overrideFormatter = customControlProperties.propBagData.formattingData
            ? Object.assign(this._defaultFormatting.formatter, customControlProperties.propBagData.formattingData.formatter)
            : this._defaultFormatting.formatter;
        this._formattingData = Object.assign(this._defaultFormatting, customControlProperties.propBagData.formattingData, {
            formatter: overrideFormatter,
        });
        this._utilsData = customControlProperties.propBagData.utilsData;
        this._adjusters = this._formattingData.timeZoneAdjusters;
        this._dateTimeFormatInfo = this._formattingData.dateTimeFormatInfo;
        this._currentCultureInfo = new CultureInfo_1.CultureInfo(this._formattingData.formatInfoCultureName, this._formattingData.numberFormatInfo, this._formattingData.dateTimeFormatInfo);
        this._timeZoneOffsetMinutes = this._formattingData.timeZoneUtcOffsetMinutes;
    }
    Formatting.prototype.parseDateFromString = function (value, format) {
        var formatterProperties = { cultureInfo: this._currentCultureInfo };
        return this._formattingData.formatter.ParseDateFromString(value, format, this._currentCultureInfo, formatterProperties);
    };
    Formatting.prototype.formatDateShort = function (value, showTime) {
        if (showTime) {
            return this._formattingData.formatter.formatShortDateTimeValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
        }
        else {
            return this._formattingData.formatter.formatShortDateValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
        }
    };
    Formatting.prototype.formatDateLongAbbreviated = function (value) {
        return this._formattingData.formatter.formatDateLongAbbreviated(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
    };
    Formatting.prototype.formatDateLong = function (value) {
        return this._formattingData.formatter.formatLongDateValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
    };
    Formatting.prototype.formatDateYearMonth = function (value) {
        return this._formattingData.formatter.formatDateYearMonthValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
    };
    Formatting.prototype.formatInteger = function (value) {
        return this._formattingData.formatter.formatIntegerValue(value, this._currentCultureInfo);
    };
    Formatting.prototype.formatDecimal = function (value, precision) {
        return this._formattingData.formatter.formatDecimalValue(value, this._currentCultureInfo, precision);
    };
    Formatting.prototype.formatCurrency = function (value, precision, symbol) {
        return this._formattingData.formatter.formatCurrencyValue(value, this._currentCultureInfo, symbol, precision);
    };
    Formatting.prototype.formatTime = function (value, behavior) {
        return this._formattingData.formatter.formatShortDateTimeValue(value, this._currentCultureInfo, behavior, this._timeZoneOffsetMinutes, this._adjusters);
    };
    Formatting.prototype.getWeekOfYear = function (value) {
        return this._utilsData.dateTimeUtils.getWeekOfYear(value, this._dateTimeFormatInfo.firstDayOfWeek, this._dateTimeFormatInfo.calendarWeekRule);
    };
    Formatting.prototype.formatDateAsFilterStringInUTC = function (value, showTime) {
        if (showTime) {
            return this._formattingData.formatter.formatSortableDateTimeValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
        }
        else {
            return this._formattingData.formatter.formatSortableDateValue(value, this._currentCultureInfo, 0 /* None */);
        }
    };
    Formatting.prototype.formatLanguage = function (value) {
        return this._formattingData.formatter.formatLanguageValue(value, this._formattingData.languagesByCode);
    };
    return Formatting;
}());
exports.Formatting = Formatting;

},{"../../Utilities/CultureInfo":97,"./../PropertyFallbacks/Formatting/SimpleFormatters":92}],77:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CCFUtils = require("./../CustomControlUtilityPointers");
var Mode = /** @class */ (function () {
    function Mode(customControlProperties, _externalUtils, hostData) {
        // TODO : changing this to true, since without this control would always render as "--"
        // because the mode never changes to edit without focus.
        // Once accessibility is in place, the hard coding will go away.
        this.hasFocus = true;
        // Global, not yet brought down
        this.isPreview = false;
        // Unknown as of yet whether this value will be relevant
        this.isActive = false;
        // Hopefully deprecated value, will set with same value as hasFocus during implementation
        this.isRead = false;
        this._customControlProperties = customControlProperties;
        this._descriptor = customControlProperties ? customControlProperties.descriptor : null;
        this._modeData = customControlProperties ? customControlProperties.propBagData.modeData : null;
        this._hostData = hostData;
        this.allocatedWidth = CCFUtils.IsNullOrUndefined(this._hostData.allocatedWidth)
            ? -1
            : this._hostData.allocatedWidth;
        this.allocatedHeight = CCFUtils.IsNullOrUndefined(this._hostData.allocatedHeight)
            ? -1
            : this._hostData.allocatedHeight;
        this.trackContainerResize = this._hostData.trackResize;
        this.setFullScreen = this._hostData.updateFullscreen;
        this.isControlDisabled = this._descriptor ? this._descriptor.Disabled : false;
        this.isVisible = this._descriptor ? this._descriptor.Visible : true;
        this.label = this._descriptor ? (this._descriptor.ShowLabel ? this._descriptor.Label : "") : "";
        this.accessibilityLabel = this._descriptor ? (!this._descriptor.ShowLabel ? this._descriptor.Label : null) : null;
        this.isOffline = this._modeData.isOffline;
        this.isRead = !!this._modeData.isRead;
        this.fullPageParam =
            customControlProperties &&
                customControlProperties.descriptor &&
                customControlProperties.descriptor.FullPageParamers
                ? customControlProperties.descriptor.FullPageParamers
                : null;
        this.rowSpan = this._customControlProperties ? this._customControlProperties.rowSpan : 0;
        this.contextInfo = {
            entityTypeName: this._modeData && this._modeData.entityTypeName,
            entityId: this._modeData && this._modeData.entityId,
            /**
             * EntityRecordName contains record name of a Entity
             */
            entityRecordName: this._modeData && this._modeData.entityRecordName,
        };
    }
    Mode.prototype.setNotification = function (message, id) {
        if (message &&
            message.trim().length > 0 &&
            this.isVisible &&
            !this.isControlDisabled &&
            this._customControlProperties.descriptor.parentFieldSectionItem) {
            var baseControlName = this._customControlProperties.descriptor.parentFieldSectionItem;
            return this._customControlProperties.propBagMethods.mode.setNotification(message, id, this._customControlProperties.id, baseControlName, this._customControlProperties.contextToken, this._modeData.entityTypeName, this._modeData.entityId);
        }
        return false;
    };
    Mode.prototype.clearNotification = function (id) {
        if (this._customControlProperties.descriptor.parentFieldSectionItem) {
            var baseControlName = this._customControlProperties.descriptor.parentFieldSectionItem;
            return this._customControlProperties.propBagMethods.mode.clearNotification(this._customControlProperties.id, baseControlName, this._customControlProperties.contextToken, this._modeData.entityTypeName, this._modeData.entityId, id);
        }
        else
            return false;
    };
    Mode.prototype.setControlState = function (state, globalSetting) {
        var personalizationConfig = this._customControlProperties.personalizationConfiguration;
        if (personalizationConfig) {
            if (globalSetting) {
                //For global setting, we are overriding the controlUniqueId
                //ControlUniqueId should be the control name defined in the manifest
                if (this._customControlProperties.manifest.CustomControlId) {
                    this._customControlProperties.actions.setGlobalControlPersonalization(this._customControlProperties.manifest.CustomControlId, state);
                }
                return;
            }
            if (personalizationConfig.areaType === "form") {
                this._customControlProperties.actions.setFieldControlPersonalization(personalizationConfig, state);
            }
            if (personalizationConfig.areaType === "grid") {
                this._customControlProperties.actions.setGridControlPersonalization(personalizationConfig, state);
            }
            if (personalizationConfig.areaType === "dashboard") {
                this._customControlProperties.actions.setDashboardControlPersonalization(personalizationConfig, state);
            }
        }
        return this._customControlProperties.propBagMethods.utils.setState(state);
    };
    Mode.prototype.blur = function () { };
    Mode.prototype.focus = function () { };
    return Mode;
}());
exports.Mode = Mode;

},{"./../CustomControlUtilityPointers":67}],78:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var XrmProxy_1 = require("../../Utilities/XrmProxy");
var Navigation = /** @class */ (function () {
    function Navigation(customControlProperties) {
        this._customControlProperties = customControlProperties;
        if (customControlProperties.manifest && customControlProperties.manifest.Properties.DataSetDefinitions !== null) {
            for (var dataSetKey in customControlProperties.manifest.Properties.DataSetDefinitions) {
                if (customControlProperties.manifest.Properties.DataSetDefinitions[dataSetKey].Primary) {
                    this._paramKey = dataSetKey;
                }
            }
        }
    }
    Navigation.prototype.openEditForm = function (entityReference, processId, processInstanceId, selectedStageId, isCrossEntityNavigate) {
        if (processId) {
            this._customControlProperties.propBagMethods.navigation.openEditForm(entityReference, processId, processInstanceId, selectedStageId, isCrossEntityNavigate);
        }
        else {
            var entityName = entityReference.entityName || entityReference.LogicalName;
            var entityReferenceId = entityReference.id || (entityReference.Id && entityReference.Id.toString());
            var recordSetQueryKey = this._getRecordSetQueryFromProps(this._paramKey);
            XrmProxy_1.default.openForm({
                entityName: entityName,
                entityId: entityReferenceId,
                recordSetQueryKey: recordSetQueryKey,
                processInstanceId: processInstanceId,
                selectedStageId: selectedStageId,
                isCrossEntityNavigate: isCrossEntityNavigate,
            });
        }
    };
    Navigation.prototype.openGridPage = function (entityTypeName, viewId, showChart, visualizationId, filterExpression) {
        this._customControlProperties.propBagMethods.navigation.openGridPage(entityTypeName, viewId, showChart, null, visualizationId, filterExpression);
    };
    Navigation.prototype.openGrid = function (entityTypeName, viewId, showChart, visualizationType, visualizationId, filterExpression, chartDrillDownParameters) {
        this._customControlProperties.propBagMethods.navigation.openGridPage(entityTypeName, viewId, showChart, visualizationType, visualizationId, filterExpression, chartDrillDownParameters);
    };
    Navigation.prototype.openDashboard = function (id) {
        this._customControlProperties.propBagMethods.navigation.openDashboard(id);
    };
    Navigation.prototype.openCreateForm = function (logicalName, initialValues, createFromEntity) {
        this._customControlProperties.propBagMethods.navigation.openCreateForm(logicalName, initialValues, createFromEntity);
    };
    Navigation.prototype.openForm = function (options, parameters) {
        options.recordSetQueryKey = this._getRecordSetQueryFromProps(this._paramKey);
        if (this._customControlProperties.parentDefinedControlProps &&
            this._customControlProperties.parentDefinedControlProps.propertyBagOverrides &&
            this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm) {
            return this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm(options, parameters);
        }
        return XrmProxy_1.default.openForm(options, parameters);
    };
    Navigation.prototype.openSearch = function (query) {
        this._customControlProperties.propBagMethods.navigation.openSearch(query);
    };
    Navigation.prototype.openPowerBIFullScreenPage = function (powerBIEmbedUrl, powerBIGroupId, powerBIDashboardId, powerBITileId, powerBIReportId, powerBIReportUrl, powerBIComponentTypeCode) {
        this._customControlProperties.propBagMethods.navigation.openPowerBIFullScreenPage(powerBIEmbedUrl, powerBIGroupId, powerBIDashboardId, powerBITileId, powerBIReportId, powerBIReportUrl, powerBIComponentTypeCode);
    };
    Navigation.prototype.openUrl = function (url, options) {
        // Needs to call the navigation.openUrl inside CustomControlHost and passing in context
        //return bagProps.openUrl(url);
        XrmProxy_1.default.openUrl(url, options);
    };
    Navigation.prototype.openUrlWithProtocol = function (url, protocol) {
        this._customControlProperties.propBagMethods.navigation.openUrlWithProtocol(url, protocol);
    };
    Navigation.prototype.openPhoneNumber = function (phoneNumber, useForm, passedEtn, passedId, passedName) {
        var etn = passedEtn || this._customControlProperties.propBagData.modeData.entityTypeName;
        var id = passedId || this._customControlProperties.propBagData.modeData.entityId;
        var name = passedName || this._customControlProperties.propBagData.modeData.entityRecordName;
        this._customControlProperties.propBagMethods.navigation.openPhoneNumber(phoneNumber, etn, id, name, useForm);
    };
    Navigation.prototype.openMaps = function (address) {
        this._customControlProperties.propBagMethods.navigation.openMaps(address);
    };
    Navigation.prototype.openMap = function (address) {
        this._customControlProperties.propBagMethods.navigation.openMap(address);
    };
    Navigation.prototype.openAlertDialog = function (alertStrings, options) {
        return XrmProxy_1.default.openAlertDialog(alertStrings, options);
    };
    Navigation.prototype.openConfirmDialog = function (confirmStrings, options) {
        return XrmProxy_1.default.openConfirmDialog(confirmStrings, options);
    };
    Navigation.prototype.openErrorDialog = function (options) {
        return XrmProxy_1.default.openErrorDialog(options);
    };
    Navigation.prototype.openDialog = function (name, options, parameters) {
        return XrmProxy_1.default.openDialog(name, options, parameters);
    };
    Navigation.prototype.openFile = function (file, options) {
        return XrmProxy_1.default.openFile(file, options);
    };
    Navigation.prototype.openTaskFlow = function (name, options, parameters) {
        return XrmProxy_1.default.openTaskFlow(name, options, parameters);
    };
    Navigation.prototype.openWebResource = function (name, options, data) {
        XrmProxy_1.default.openWebResource(name, options, data);
    };
    Navigation.prototype._getRecordSetQueryFromProps = function (paramKey) {
        var params = paramKey && this._customControlProperties.dynamicData
            ? this._customControlProperties.dynamicData.parameters[paramKey]
            : null;
        return this._customControlProperties.actions &&
            this._customControlProperties.actions.getRecordSetQueryKey &&
            params !== null
            ? this._customControlProperties.actions.getRecordSetQueryKey(params)
            : null;
    };
    return Navigation;
}());
exports.Navigation = Navigation;

},{"../../Utilities/XrmProxy":110}],79:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var OrgSettings = /** @class */ (function () {
    function OrgSettings(customControlProperties, externalUtils) {
        this._customControlExposedOrgSettings = customControlProperties.propBagData.clientData.orgSettingsData;
        this._xrmProxy = externalUtils.xrmProxy;
        this.languageId = this._xrmProxy.OrgSettings.languageId;
        this.attributes = this._xrmProxy.OrgSettings.attributes;
        this.uniqueName = this._xrmProxy.OrgSettings.uniqueName;
        this.isAutoSaveEnabled = this._xrmProxy.OrgSettings.isAutoSaveEnabled;
        this.isRTL = this._customControlExposedOrgSettings.isRTL;
        this.fiscalYearStartDate = this._customControlExposedOrgSettings.fiscalYearStartDate;
        this.fiscalPeriodFormat = this._customControlExposedOrgSettings.fiscalPeriodFormat;
        this.fiscalPeriodType = this._customControlExposedOrgSettings.fiscalPeriodType;
        this.fiscalYearFormatYear = this._customControlExposedOrgSettings.fiscalYearFormatYear;
        this.fiscalYearFormatPrefix = this._customControlExposedOrgSettings.fiscalYearFormatPrefix;
        this.fiscalYearFormatSuffix = this._customControlExposedOrgSettings.fiscalYearFormatSuffix;
        this.fiscalYearDisplayCode = this._customControlExposedOrgSettings.fiscalYearDisplayCode;
        this.fiscalPeriodConnector = this._customControlExposedOrgSettings.fiscalPeriodConnector;
        this.showWeekNumber = this._customControlExposedOrgSettings.showWeekNumber;
        this.boundDashboardDefaultCardExpanded = this._customControlExposedOrgSettings.boundDashboardDefaultCardExpanded;
        this.allowUnresolvedPartiesOnEmailSend = this._customControlExposedOrgSettings.allowUnresolvedPartiesOnEmailSend;
        this.webResourceHash = this._customControlExposedOrgSettings.webResourceHash;
        this.enableBingMapsIntegration = this._customControlExposedOrgSettings.enableBingMapsIntegration;
        this.bingMapsApiKey = this._customControlExposedOrgSettings.bingMapsApiKey;
        this.availableBingMapLocales = this._customControlExposedOrgSettings.availableBingMapLocales;
        this.excludedCountriesForMaps = this._customControlExposedOrgSettings.excludedCountriesForMaps;
        this.bFDatacenter = this._customControlExposedOrgSettings.bFDatacenter;
        this.securitySettingForEmail = this._customControlExposedOrgSettings.securitySettingForEmail;
        this.appointmentRichEditorExperience = this._customControlExposedOrgSettings.appointmentRichEditorExperience;
        this.gridTotalRecordCountLimit = this._customControlExposedOrgSettings.gridTotalRecordCountLimit;
    }
    return OrgSettings;
}());
exports.OrgSettings = OrgSettings;

},{}],80:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Page = /** @class */ (function () {
    function Page(customControlProperties, externalUtils) {
        this.updateBag(customControlProperties);
        this.getClientUrl = function () {
            return externalUtils.xrmProxy.Page.getClientUrl();
        };
    }
    Page.prototype.updateBag = function (customControlProperties) {
        var pageData = customControlProperties.propBagData.pageData;
        var modeData = customControlProperties.propBagData.modeData;
        this.appId = pageData.appId;
        this.entityTypeName = modeData.entityTypeName;
        this.entityId = modeData.entityId;
        this.isPageReadOnly = pageData.isPageReadOnly;
    };
    return Page;
}());
exports.Page = Page;

},{}],81:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CCFPerformanceTracker_1 = require("../../Utilities/CCFPerformanceTracker");
var Performance = /** @class */ (function () {
    function Performance(customControlProperties) {
        this._performanceEvents = {};
        this._customControlProperties = customControlProperties;
    }
    Performance.prototype.createPerformanceStopwatch = function (name, parameters, alwaysDisplay) {
        if (alwaysDisplay === void 0) { alwaysDisplay = false; }
        if (!this._performanceEvents[name]) {
            this._performanceEvents[name] = CCFPerformanceTracker_1.default.createPerformanceEvent(name, alwaysDisplay ? undefined : this._customControlProperties.logLevel, this._customControlProperties.configuration.CustomControlId);
        }
        return this._performanceEvents[name].startStopwatch(parameters);
    };
    Performance.prototype.trackWork = function (diagnosticId) {
        return CCFPerformanceTracker_1.default.trackWork(diagnosticId);
    };
    Performance.prototype.addKeyPerformanceIndicator = function (name, parameters, retroactiveTimestamp) {
        CCFPerformanceTracker_1.default.addKeyPerformanceIndicator(name, parameters, retroactiveTimestamp);
    };
    Performance.prototype.addKeyPerformanceIndicatorOnIdle = function (name, parameters) {
        CCFPerformanceTracker_1.default.addKeyPerformanceIndicatorOnIdle(name, parameters);
    };
    return Performance;
}());
exports.Performance = Performance;

},{"../../Utilities/CCFPerformanceTracker":96}],82:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Reporting = /** @class */ (function () {
    function Reporting(customControlProperties, externalUtils) {
        this._externalUtils = externalUtils;
        this._controlId = customControlProperties.controlId;
    }
    Reporting.prototype.addControlId = function (params) {
        if (params == null) {
            params = [];
        }
        var controlParameter = {
            name: "CustomControlId",
            value: this._controlId,
        };
        params.push(controlParameter);
        return params;
    };
    Reporting.prototype.reportSuccess = function (componentName, params) {
        return this._externalUtils.xrmProxy.Reporting.reportSuccess(componentName, this.addControlId(params));
    };
    Reporting.prototype.reportFailure = function (componentName, error, suggestedMitigation, params) {
        return this._externalUtils.xrmProxy.Reporting.reportFailure(componentName, error, suggestedMitigation, this.addControlId(params));
    };
    Reporting.prototype.reportEvent = function (event) {
        var controlParam = this.addControlId([]);
        event.eventParameters.push(controlParam[0]);
        return this._externalUtils.xrmProxy.Reporting.reportEvent(event);
    };
    return Reporting;
}());
exports.Reporting = Reporting;

},{}],83:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Resources = /** @class */ (function () {
    function Resources(customControlProperties) {
        this._manifest = customControlProperties.manifest;
        this._getResource = customControlProperties.actions.getResource;
        this._bagPropsResource = customControlProperties.propBagData.resourcesData;
    }
    Resources.prototype.getString = function (id) {
        return !id || !this._bagPropsResource || !this._bagPropsResource.strings[id]
            ? id
            : this._bagPropsResource.strings[id];
    };
    Resources.prototype.getResource = function (id, success, failure) {
        var resource = this._manifest.Properties.Resources.filter(function (res) {
            if (res) {
                return res.Name.endsWith(id);
            }
        })[0];
        if (resource) {
            this._getResource(resource).then(function (data) {
                success(data);
            }, function () {
                failure();
            });
        }
        else {
            failure();
        }
    };
    return Resources;
}());
exports.Resources = Resources;

},{}],84:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Theming = /** @class */ (function () {
    function Theming(customControlProperties) {
        this._themingData = customControlProperties.propBagData.themingData;
        this.normalfontcolor = this._themingData.defaultThemingData.normalfontcolor;
        this.normalfontfamily = this._themingData.defaultThemingData.normalfontfamily;
        this.normalfontsize = this._themingData.defaultThemingData.normalfontsize;
        this.solidborderstyle = this._themingData.defaultThemingData.solidborderstyle;
        this.noneborderstyle = this._themingData.defaultThemingData.noneborderstyle;
        this.colors = this._themingData.defaultThemingData.colors;
        this.textbox = this._themingData.defaultThemingData.textbox;
        this.spacings = this._themingData.defaultThemingData.spacings;
        this.fontfamilies = this._themingData.defaultThemingData.fontfamilies;
        this.fontsizes = this._themingData.defaultThemingData.fontsizes;
        this.breakpoints = this._themingData.defaultThemingData.breakpoints;
        this.measures = this._themingData.defaultThemingData.measures;
        this.lookup = this._themingData.defaultThemingData.lookup;
        this.borders = this._themingData.defaultThemingData.borders;
        this.shadows = this._themingData.defaultThemingData.shadows;
        this.buttons = this._themingData.defaultThemingData.buttons;
    }
    Theming.prototype.getEntityColor = function (entityLogicalName) {
        return this._themingData.getEntityColor ? this._themingData.getEntityColor(entityLogicalName) : "";
    };
    Theming.prototype.disableUiTransitions = function () { };
    Theming.prototype.rightAlignEdit = function () { };
    Theming.prototype.inlineLayout = function () { };
    return Theming;
}());
exports.Theming = Theming;

},{}],85:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var UserSettings = /** @class */ (function () {
    function UserSettings(customControlProperties, externalUtils) {
        this._formattingData = customControlProperties.propBagData.formattingData;
        this._xrmProxy = externalUtils.xrmProxy;
        this._utilsData = customControlProperties.propBagData.utilsData;
        this.userId = this._xrmProxy.UserSettings.userId;
        this.userName = this._xrmProxy.UserSettings.userName;
        this.dateFormattingInfo = this._formattingData.dateTimeFormatInfo;
        this.numberFormattingInfo = this._formattingData.numberFormatInfo;
        this.isRTL = this._xrmProxy.UserSettings.isRTL;
        this.languageId = this._xrmProxy.UserSettings.languageId;
        this.securityRoles = this._xrmProxy.UserSettings.securityRoles;
        this.isHighContrastEnabled = this._xrmProxy.UserSettings.isHighContrastEnabled;
        this.timeZoneUtcOffsetMinutes = this._formattingData.timeZoneUtcOffsetMinutes;
        this.pagingLimit = this._xrmProxy.UserSettings.pagingLimit;
    }
    UserSettings.prototype.getTimeZoneOffsetMinutes = function (date) {
        if (!date) {
            return this._formattingData.timeZoneUtcOffsetMinutes;
        }
        else {
            return (this._formattingData.timeZoneUtcOffsetMinutes +
                this._utilsData.dateTimeUtils.getDSTAdjustmentMinutes(date, this._formattingData.timeZoneAdjusters));
        }
    };
    return UserSettings;
}());
exports.UserSettings = UserSettings;

},{}],86:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var XrmProxy_1 = require("../../Utilities/XrmProxy");
var CCFUtils = require("./../CustomControlUtilityPointers");
var DefaultControlMapper_1 = require("../../Utilities/DefaultControlMapper");
var CCFPerformanceTracker_1 = require("../../Utilities/CCFPerformanceTracker");
var PerformanceStopwatch_1 = require("../../Utilities/PerformanceStopwatch");
var CustomControlHelper_1 = require("../../Utilities/CustomControlHelper");
var TelemetryManager_1 = require("../../Utilities/TelemetryManager");
var GLOBAL_COMMAND_MANAGER_ID = "crm_header_global";
var Utility = /** @class */ (function () {
    function Utility(customControlProperties, externalUtils) {
        this._customControlProperties = customControlProperties;
        this._externalUtils = externalUtils;
        this._globalCommandManagerInitialized = customControlProperties.globalCommandManagerInitialized;
        this._internalEventListeners = this._generateInternalEventListeners();
    }
    /**
     * Generate an array of internal event listeners
     * NOTE: This is kept as an array to match the structure given from controls/system.
     * However, should this array become larger, an easy perf improvement here would be to switch this to a key/value pairing
     * @returns the array of listeners
     */
    Utility.prototype._generateInternalEventListeners = function () {
        return [
            {
                eventname: "systemKeyDown",
                eventhandler: [this._handleSystemKeydown.bind(this)],
            },
        ];
    };
    /**
     * Internal handler for a system key down event
     * @param data Data passed by the fireEvent
     */
    Utility.prototype._handleSystemKeydown = function (data) {
        if (this._customControlProperties.actions &&
            this._customControlProperties.actions.fireXrmEvent &&
            this._customControlProperties.controlId) {
            this._customControlProperties.actions.fireXrmEvent(this._customControlProperties.controlId.split(".")[0], this._customControlProperties.id, this._customControlProperties.contextToken, 0 /* KeyDown */, data);
        }
    };
    Utility.prototype.doesControlExist = function (customControlName) {
        if (!this._customControlProperties ||
            !this._customControlProperties.actions ||
            !this._customControlProperties.actions.loadManifest) {
            return Promise.resolve(false); // Ideally we should never hit this, but if we have that means we have no way of knowing ss return false
        }
        return this._customControlProperties.actions.loadManifest(customControlName).then(function () {
            return true;
        }, function () {
            return false;
        });
    };
    Utility.prototype.beginSecureSessionForResource = function (resource, cookieName, cookieDomain, allowPrompt) {
        return XrmProxy_1.default.Utils.beginSecureSessionForResource(resource, cookieName, cookieDomain, allowPrompt);
    };
    Utility.prototype.createPerformanceMarker = function (id) {
        CCFPerformanceTracker_1.default.createPerformanceEvent(id, this._customControlProperties.logLevel, this._customControlProperties.configuration.CustomControlId).createMarker();
    };
    Utility.prototype.createPerformanceStopwatch = function (id) {
        return new PerformanceStopwatch_1.PerformanceStopwatch(CCFPerformanceTracker_1.default.createPerformanceEvent(id, this._customControlProperties.logLevel, this._customControlProperties.configuration.CustomControlId));
    };
    Utility.prototype.log = function (customControlName, message, logType) {
        this._customControlProperties.propBagMethods.utils.logMessage(customControlName, message, logType);
    };
    Utility.prototype.getEntityMetadata = function (entityType, attributes) {
        return XrmProxy_1.default.Utils.getEntityMetadata(entityType, attributes);
    };
    Utility.prototype.getEntitiesMetadata = function (entityToAttributes) {
        if (XrmProxy_1.default.Utils.getEntitiesMetadata) {
            return XrmProxy_1.default.Utils.getEntitiesMetadata(entityToAttributes);
        }
        else {
            var promises = [];
            for (var entityType in entityToAttributes) {
                promises.push(XrmProxy_1.default.Utils.getEntityMetadata(entityType, entityToAttributes[entityType]));
            }
            return Promise.all(promises).then(function (values) {
                return values;
            });
        }
    };
    Utility.prototype.getParentControlName = function () {
        return ((this._customControlProperties &&
            this._customControlProperties.parentContextToken &&
            this._customControlProperties.parentContextToken.controlName) ||
            "");
    };
    Utility.prototype.getResourceString = function (webResourceName, key) {
        return XrmProxy_1.default.Utils.getResourceString(webResourceName, key);
    };
    Utility.prototype.isFeatureEnabled = function (featureName) {
        return XrmProxy_1.default.Utils.isFeatureEnabled(featureName);
    };
    Utility.prototype.canOpenUrl = function (url) {
        return XrmProxy_1.default.Utils.canOpenUrl(url);
    };
    Utility.prototype.getFormId = function (entityType, formType) {
        return XrmProxy_1.default.Utils.getFormId(entityType, formType);
    };
    Utility.prototype.lookupObjects = function (lookupOptions) {
        return XrmProxy_1.default.Utils.lookupObjects(lookupOptions);
    };
    Utility.prototype.bindDOMElement = function (virtualComponent, DOMNode) {
        this._externalUtils.bindDOMElement(virtualComponent, DOMNode);
    };
    Utility.prototype.fireEvent = function (eventName, params) {
        var parentDefinedControlProps = this._customControlProperties.parentDefinedControlProps;
        if (!CCFUtils.IsNullOrUndefined(parentDefinedControlProps) &&
            !CCFUtils.IsNullOrUndefined(parentDefinedControlProps.eventListeners)) {
            var index = -1;
            var listeners = parentDefinedControlProps.eventListeners;
            for (var iterator = 0; iterator < listeners.length; iterator++) {
                if (listeners[iterator].eventname === eventName) {
                    index = iterator;
                }
            }
            if (index !== -1) {
                var handlers = parentDefinedControlProps.eventListeners[index];
                for (var iterator in handlers.eventhandler) {
                    if (!CCFUtils.IsNullOrUndefined(handlers.eventhandler[iterator])) {
                        handlers.eventhandler[iterator](params);
                    }
                }
            }
        }
        if (!CCFUtils.IsNullOrUndefined(this._internalEventListeners)) {
            for (var i = 0; i < this._internalEventListeners.length; i++) {
                if (this._internalEventListeners[i].eventname === eventName) {
                    var handlers = this._internalEventListeners[i];
                    for (var j in handlers.eventhandler) {
                        if (!CCFUtils.IsNullOrUndefined(handlers.eventhandler[j])) {
                            handlers.eventhandler[j](params);
                        }
                    }
                }
            }
        }
    };
    Utility.prototype.getControlDefaultMapping = function (dataType, attributes) {
        return DefaultControlMapper_1.retrieveDefaultManifestNameByDataType(dataType, attributes);
    };
    Utility.prototype.getPopupService = function () {
        return this._externalUtils.getPopupService();
    };
    Utility.prototype.requestRender = function (callback) {
        this._externalUtils.forceUpdate(callback);
    };
    Utility.prototype.unbindDOMComponent = function (componentId) {
        return this._externalUtils.unbindDOMComponent(componentId);
    };
    Utility.prototype.updateComponent = function (id, props) {
        this._externalUtils.updateComponent(id, props);
    };
    Utility.prototype.createCrmUri = function (url) {
        if (!this._customControlProperties ||
            !this._customControlProperties.propBagData ||
            !this._customControlProperties.propBagData.clientData) {
            return url;
        }
        return CustomControlHelper_1.createCrmUri(url, this._customControlProperties.propBagData.clientData);
    };
    Utility.prototype.createServerUri = function (url) {
        if (!this._customControlProperties ||
            !this._customControlProperties.propBagData ||
            !this._customControlProperties.propBagData.clientData) {
            return url;
        }
        return CustomControlHelper_1.createCrmUri(url, this._customControlProperties.propBagData.clientData);
    };
    // Partially/unimplemented, requires work by non CCF workstreams
    Utility.prototype.openInBrowser = function (url) {
        if (url) {
            // TODO: Native bridge part
            window.open(url);
        }
    };
    Utility.prototype.getServiceUri = function () {
        return "";
    };
    // CCF owned, need implementation
    Utility.prototype.setState = function (state) {
        var personalizationConfig = this._customControlProperties.personalizationConfiguration;
        if (personalizationConfig) {
            if (personalizationConfig.areaType === "form") {
                this._customControlProperties.actions.setFieldControlPersonalization(personalizationConfig, state);
            }
            if (personalizationConfig.areaType === "grid") {
                this._customControlProperties.actions.setGridControlPersonalization(personalizationConfig, state);
            }
            if (personalizationConfig.areaType === "dashboard") {
                this._customControlProperties.actions.setDashboardControlPersonalization(personalizationConfig, state);
            }
        }
        return this._customControlProperties.propBagMethods.utils.setState(state);
    };
    Utility.prototype.crmUrlEncode = function (s) {
        return this._customControlProperties.propBagData.utilsData.encoder.CrmUrlEncode(s);
    };
    /**
     * Function to return if the user has Privilege for one specific entity
     * @entityTypeName entity type name
     * @privilegeType privilege type i.e. Create, Read, Write etc.
     * @privilegeDepth privilege depth i.e. basic, Global etc.
     */
    Utility.prototype.hasEntityPrivilege = function (entityTypeName, privilegeType, privilegeDepth) {
        return this._customControlProperties.propBagData.utilsData.hasEntityPrivilege(entityTypeName, privilegeType, privilegeDepth);
    };
    Utility.prototype.crmHtmlEncode = function (s) {
        return this._customControlProperties.propBagData.utilsData.encoder.CrmHtmlEncode(s);
    };
    Utility.prototype.isNullOrUndefined = function (object) {
        return CCFUtils.IsNullOrUndefined(object);
    };
    Utility.prototype.isNullOrEmptyString = function (object) {
        return CCFUtils.IsNullOrEmptyString(object);
    };
    Utility.prototype.notifyOutputChanged = function () { };
    Utility.prototype.eventListenerExists = function (eventName) {
        var parentDefinedControlProps = this._customControlProperties.parentDefinedControlProps;
        if (!CCFUtils.IsNullOrUndefined(parentDefinedControlProps) &&
            !CCFUtils.IsNullOrUndefined(parentDefinedControlProps.eventListeners)) {
            var listeners = parentDefinedControlProps.eventListeners;
            for (var iterator = 0; iterator < listeners.length; iterator++) {
                if (listeners[iterator].eventname.toLowerCase() === eventName.toLowerCase()) {
                    return true;
                }
            }
        }
        return false;
    };
    Utility.prototype.getElementByRef = function () {
        return null;
    };
    // These utils are candidates for deprecation, no-op for now
    Utility.prototype.disablePanoramaScroll = function () {
        return false;
    };
    Utility.prototype.scrollToView = function () { };
    Utility.prototype.setNotification = function () {
        return false;
    };
    Utility.prototype.clearNotification = function () {
        return false;
    };
    Utility.prototype.triggerOfflineMetadataSync = function () {
        return this._customControlProperties.actions.triggerOfflineMetadataSync();
    };
    Utility.prototype.addGlobalNotification = function (type, level, message, title, action, onCloseHandler) {
        return XrmProxy_1.default.addGlobalNotification(type, level, message, title, action, onCloseHandler);
    };
    Utility.prototype.clearGlobalNotification = function (id) {
        return XrmProxy_1.default.clearGlobalNotification(id);
    };
    Utility.prototype.clearGlobalNotifications = function () {
        return XrmProxy_1.default.clearGlobalNotifications();
    };
    Utility.prototype.retrieveChartDrilldownAttributes = function (etn) {
        return this._customControlProperties.actions.retrieveChartDrilldownAttributes(etn);
    };
    Utility.prototype.retrieveFormWithAttributes = function (entityName, formId, formType) {
        return this._customControlProperties.actions.retrieveFormWithAttributes(entityName, formId, formType);
    };
    Utility.prototype.getEntityName = function (entityTypeCode) {
        return XrmProxy_1.default.Utils.getEntityName(entityTypeCode);
    };
    Utility.prototype.retrieveRecordCommand = function (allRecords, commandManagerId, records, commandButtonIds, filterByPriority, useNestedFormat) {
        var _this = this;
        var controlConstructorName = this._customControlProperties &&
            this._customControlProperties.manifest &&
            this._customControlProperties.manifest.ConstructorName
            ? this._customControlProperties.manifest.ConstructorName
            : null;
        var pageId = this._customControlProperties.id;
        if (commandManagerId === GLOBAL_COMMAND_MANAGER_ID) {
            if (this._globalCommandManagerInitialized) {
                return this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
            }
            var globalCommandManagerPromise = this._externalUtils.getGlobalCommandManagerPromise();
            if (globalCommandManagerPromise) {
                if (globalCommandManagerPromise.isResolved()) {
                    this._globalCommandManagerInitialized = true;
                    return this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
                }
                return globalCommandManagerPromise.then(function () {
                    _this._globalCommandManagerInitialized = true;
                    return _this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, _this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
                }, function () {
                    var error = new Error("Global command manager initialization failed");
                    XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Models", error, "Rejected promise", [
                        { name: "commandManagerId", value: commandManagerId },
                        { name: "APIName", value: TelemetryManager_1.COMPONENT_NAME + ".Models.PropertyClasses.Utility.retrieveRecordCommand" },
                    ]);
                    throw error;
                });
            }
            var promise = this._customControlProperties.actions.addPendingCommandManagerId(pageId, this._customControlProperties.contextToken, this._customControlProperties.controlId, commandManagerId);
            this._externalUtils.setGlobalCommandManagerPromise(promise);
            return promise.then(function () {
                _this._globalCommandManagerInitialized = true;
                return _this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, _this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
            });
        }
        return this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
    };
    return Utility;
}());
exports.Utility = Utility;

},{"../../Utilities/CCFPerformanceTracker":96,"../../Utilities/CustomControlHelper":99,"../../Utilities/DefaultControlMapper":100,"../../Utilities/PerformanceStopwatch":105,"../../Utilities/TelemetryManager":109,"../../Utilities/XrmProxy":110,"./../CustomControlUtilityPointers":67}],87:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var XrmProxy_1 = require("../../Utilities/XrmProxy");
var WebAPI = /** @class */ (function () {
    function WebAPI() {
    }
    WebAPI.prototype.retrieveRecord = function (entityType, id, options) {
        return XrmProxy_1.default.retrieveRecord(entityType, id, options);
    };
    WebAPI.prototype.createRecord = function (entityType, data) {
        return XrmProxy_1.default.createRecord(entityType, data);
    };
    WebAPI.prototype.updateRecord = function (entityType, id, data) {
        return XrmProxy_1.default.updateRecord(entityType, id, data);
    };
    WebAPI.prototype.deleteRecord = function (entityType, id) {
        return XrmProxy_1.default.deleteRecord(entityType, id);
    };
    WebAPI.prototype.retrieveMultipleRecords = function (entityType, options, maxPageSize) {
        return XrmProxy_1.default.retrieveMultipleRecords(entityType, options, maxPageSize);
    };
    WebAPI.prototype.execute = function (request) {
        return XrmProxy_1.default.execute(request);
    };
    WebAPI.prototype.executeMultiple = function (requests) {
        return XrmProxy_1.default.executeMultiple(requests);
    };
    return WebAPI;
}());
exports.WebAPI = WebAPI;

},{"../../Utilities/XrmProxy":110}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_FLUID_DL = {
    base: {
        font: {
            landing_48_600: '600 48px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            subheader_34_600: '600 34px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            pageheader_24_600: '600 24px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            sectiontitle_20_600: '600 20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            smalltitle_16_600: '600 16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            lrgbody_16_400: '400 16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            body_14_600: '600 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            body_14_400: '400 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            cap_12_600: '600 12px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            cap_12_400: '400 12px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            button_14_600: '600 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
        },
        font_size: {
            px12: "12px",
            px14: "14px",
            px16: "16px",
            px20: "20px",
            px24: "24px",
            px34: "34px",
            px48: "48px",
        },
        font_weight: {
            semibold: "600",
            normal: "400",
        },
        font_family: {
            segoe_ui: '"Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
        },
        box_shadow: {
            box_shadow_1: "0px 0.3px 0.9px rgba(0, 0, 0, 0.108), 0px 1.6px 3.6px rgba(0, 0, 0, 0.132)",
            box_shadow_2: "0px 0.6px 1.8px rgba(0, 0, 0, 0.108), 0px 3.2px 7.2px rgba(0, 0, 0, 0.132)",
            box_shadow_3: "0px 1.2px 3.6px rgba(0, 0, 0, 0.108), 0px 6.4px 14.4px rgba(0, 0, 0, 0.132)",
            box_shadow_4: "0px 4.8px 14.4px rgba(0, 0, 0, 0.18), 0px 25.6px 57.6px rgba(0, 0, 0, 0.22)",
        },
        color: {
            grey_10: "#F8F8F9",
            grey_20: "#F1F2F4",
            grey_30: "#E8EAEC",
            grey_40: "#D8DADE",
            grey_50: "#CED0D4",
            grey_60: "#C6C8CC",
            grey_90: "#A4A6AC",
            grey_130: "#6E6F77",
            grey_150: "#3A3C42",
            grey_160: "#31333A",
            grey_190: "#1F2126",
        },
    },
    control: {
        button: {
            border_radius: "2px",
            border: "none",
            box_shadow: "0px 2px 4px rgba(0, 0, 0, 0.14)",
            font: '600 14px/20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            height: "32px",
            min_width: "100px",
            padding: "0 20px",
            _disabled: {
                background_color: "#E8EAEC",
                text_color: "#A4A6AD",
            },
            _enabled: {
                cursor: "pointer",
                _hover: {
                    box_shadow: "0px 1.2px 3.6px rgba(0, 0, 0, 0.12), 0px 6.4px 7.2px rgba(0, 0, 0, 0.1)",
                },
                _primary: {
                    text_color: "white",
                    background_color: "#2266E3",
                    _hover: {
                        text_color: "#2266E3",
                        background_color: "white",
                    },
                },
                _secondary: {
                    text_color: "#2266E3",
                    background_color: "white",
                    _hover: {
                        text_color: "white",
                        background_color: "#2266E3",
                    },
                },
            },
        },
        label: {
            font: '600 12px/16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            text_color: "#6E6F77",
            _required: {
                asterisk_color: "#A80000",
            },
        },
        text_input: {
            box_sizing: "border-box",
            font: '400 14px/20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',
            height: "32px",
            border_radius: "2px 2px 0 0",
            padding: "6px",
            border_width: "0 0 1px 0",
            border_color: "#A4A6AC",
            _disabled: {
                text_color: "#A4A6AD",
                background_color: "#E8EAEC",
            },
            _enabled: {
                text_color: "#1F2126",
                background_color: "transparent",
                _valid: {
                    _hover: {
                        border_color: "#2266E3",
                    },
                    _focus: {
                        border_color: "#2266E3",
                    },
                },
                _invalid: {
                    border_color: "#A80000",
                },
            },
        },
        form_field: {
            text_input_to_label_margin_top: "4px",
        },
    },
};

},{}],89:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var StringBuilder_1 = require("../../../Utilities/StringBuilder");
var AjaxDate = /** @class */ (function () {
    function AjaxDate() {
    }
    AjaxDate._getValueFromDictionary = function (dict, propertyName) {
        return dict[propertyName];
    };
    AjaxDate._appendPreOrPostMatch = function (preMatch, strBuilder) {
        var quoteCount = 0;
        var escaped = false;
        for (var i = 0, il = preMatch.length; i < il; i++) {
            var c = preMatch.charAt(i);
            switch (c) {
                case "'":
                    if (escaped)
                        strBuilder.append("'");
                    else
                        quoteCount++;
                    escaped = false;
                    break;
                case "\\":
                    if (escaped)
                        strBuilder.append("\\");
                    escaped = !escaped;
                    break;
                default:
                    strBuilder.append(c);
                    escaped = false;
                    break;
            }
        }
        return quoteCount;
    };
    AjaxDate._expandFormat = function (dtf, format) {
        if (!format) {
            format = "F";
        }
        var len = format.length;
        if (len === 1) {
            switch (format) {
                case "d":
                    return AjaxDate._getValueFromDictionary(dtf, "ShortDatePattern");
                case "D":
                    return AjaxDate._getValueFromDictionary(dtf, "LongDatePattern");
                case "t":
                    return AjaxDate._getValueFromDictionary(dtf, "ShortTimePattern");
                case "T":
                    return AjaxDate._getValueFromDictionary(dtf, "LongTimePattern");
                case "f":
                    return AjaxDate._getValueFromDictionary(dtf, "LongDatePattern") + " " + AjaxDate._getValueFromDictionary(dtf, "ShortTimePattern");
                case "F":
                    return AjaxDate._getValueFromDictionary(dtf, "FullDateTimePattern");
                case "M":
                case "m":
                    return AjaxDate._getValueFromDictionary(dtf, "MonthDayPattern");
                case "s":
                    return AjaxDate._getValueFromDictionary(dtf, "SortableDateTimePattern");
                case "Y":
                case "y":
                    return AjaxDate._getValueFromDictionary(dtf, "YearMonthPattern");
                default:
                    throw Error("Res.formatInvalidString");
            }
        }
        else if (len === 2 && format.charAt(0) === "%") {
            format = format.charAt(1);
        }
        return format;
    };
    AjaxDate._getEra = function (date, eras) {
        if (!eras)
            return 0;
        var start;
        var ticks = date.getTime();
        for (var i = 0, l = 4; i < l; i += 4) {
            //eras.length TODO Dictionary doesn't have length property. Hardcoded to 4
            start = eras[i + 2];
            if (start === null || ticks >= start) {
                return i;
            }
        }
        return 0;
    };
    AjaxDate._getEraYear = function (date, dtf, era, sortable) {
        var year = date.getFullYear();
        if (!sortable && AjaxDate._getValueFromDictionary(dtf, "eras")) {
            year -= AjaxDate._getValueFromDictionary(dtf, "eras")[era + 3];
        }
        return year;
    };
    AjaxDate._getTokenRegExp = function () {
        return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
    };
    AjaxDate._toFormattedString = function (value, format, cultureInfo) {
        var dtf = cultureInfo.dateTimeFormat;
        var temp = "convert";
        //TODO convert doesn't appear to exist on dateTimeFormat's calendar.
        var convert = AjaxDate._getValueFromDictionary(dtf, "Calendar")[temp];
        if (!format || !format.length || format === "i") {
            if (cultureInfo && cultureInfo.name.length) {
                if (convert) {
                    return AjaxDate._toFormattedString(value, AjaxDate._getValueFromDictionary(dtf, "FullDateTimePattern"), cultureInfo);
                }
                else {
                    var eraDate = new Date(value.getTime());
                    var era = AjaxDate._getEra(value, AjaxDate._getValueFromDictionary(dtf, "eras"));
                    eraDate.setFullYear(AjaxDate._getEraYear(value, dtf, era));
                    return eraDate.toLocaleString();
                }
            }
            else {
                return value.toString(); //TODO need to verify
            }
        }
        var eras = AjaxDate._getValueFromDictionary(dtf, "eras"), sortable = format === "s";
        format = AjaxDate._expandFormat(dtf, format);
        var ret = new StringBuilder_1.StringBuilder();
        var hour;
        function addLeadingZero(num) {
            if (num < 10) {
                return "0" + num;
            }
            return num.toString();
        }
        function addLeadingZeros(num) {
            if (num < 10) {
                return "00" + num;
            }
            if (num < 100) {
                return "0" + num;
            }
            return num.toString();
        }
        function padYear(year) {
            if (year < 10) {
                return "000" + year;
            }
            else if (year < 100) {
                return "00" + year;
            }
            else if (year < 1000) {
                return "0" + year;
            }
            return year.toString();
        }
        var foundDay;
        var checkedDay;
        var dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g;
        function hasDay() {
            if (foundDay || checkedDay) {
                return foundDay;
            }
            foundDay = dayPartRegExp.test(format);
            checkedDay = true;
            return foundDay;
        }
        var quoteCount = 0;
        var tokenRegExp = AjaxDate._getTokenRegExp();
        var converted;
        if (!sortable && convert) {
            converted = convert.fromGregorian(value); //TODO convert doesn't seem to exist on Calendar. Is this ever hit?
        }
        function getPart(date, part) {
            if (converted) {
                return converted[part];
            }
            switch (part) {
                case 0:
                    return date.getFullYear();
                case 1:
                    return date.getMonth();
                case 2:
                    return date.getDate();
            }
        }
        for (;;) {
            var index = tokenRegExp.lastIndex;
            var ar = tokenRegExp.exec(format);
            var preMatch = format.slice(index, ar ? ar.index : format.length);
            quoteCount += AjaxDate._appendPreOrPostMatch(preMatch, ret);
            if (!ar)
                break;
            if (quoteCount % 2 === 1) {
                ret.append(ar[0]);
                continue;
            }
            switch (ar[0]) {
                case "dddd":
                    ret.append(AjaxDate._getValueFromDictionary(dtf, "DayNames")[value.getDay()]);
                    break;
                case "ddd":
                    ret.append(AjaxDate._getValueFromDictionary(dtf, "AbbreviatedDayNames")[value.getDay()]);
                    break;
                case "dd":
                    foundDay = true;
                    ret.append(addLeadingZero(getPart(value, 2)));
                    break;
                case "d":
                    foundDay = true;
                    ret.append(getPart(value, 2).toString());
                    break;
                case "MMMM":
                    ret.append(AjaxDate._getValueFromDictionary(dtf, "MonthGenitiveNames") && hasDay()
                        ? AjaxDate._getValueFromDictionary(dtf, "MonthGenitiveNames")[getPart(value, 1)]
                        : AjaxDate._getValueFromDictionary(dtf, "MonthNames")[getPart(value, 1)]);
                    break;
                case "MMM":
                    ret.append(AjaxDate._getValueFromDictionary(dtf, "AbbreviatedMonthGenitiveNames") && hasDay()
                        ? AjaxDate._getValueFromDictionary(dtf, "AbbreviatedMonthGenitiveNames")[getPart(value, 1)]
                        : AjaxDate._getValueFromDictionary(dtf, "AbbreviatedMonthNames")[getPart(value, 1)]);
                    break;
                case "MM":
                    ret.append(addLeadingZero(getPart(value, 1) + 1));
                    break;
                case "M":
                    ret.append((getPart(value, 1) + 1).toString());
                    break;
                case "yyyy":
                    ret.append(padYear(converted ? converted[0] : AjaxDate._getEraYear(value, dtf, AjaxDate._getEra(value, eras), sortable)));
                    break;
                case "yy":
                    ret.append(addLeadingZero((converted ? converted[0] : AjaxDate._getEraYear(value, dtf, AjaxDate._getEra(value, eras), sortable)) %
                        100));
                    break;
                case "y":
                    ret.append(converted
                        ? converted[0].toString()
                        : (AjaxDate._getEraYear(value, dtf, AjaxDate._getEra(value, eras), sortable) % 100).toString());
                    break;
                case "hh":
                    hour = value.getHours() % 12;
                    if (hour === 0)
                        hour = 12;
                    ret.append(addLeadingZero(hour));
                    break;
                case "h":
                    hour = value.getHours() % 12;
                    if (hour === 0)
                        hour = 12;
                    ret.append(hour.toString());
                    break;
                case "HH":
                    ret.append(addLeadingZero(value.getHours()));
                    break;
                case "H":
                    ret.append(value.getHours().toString());
                    break;
                case "mm":
                    ret.append(addLeadingZero(value.getMinutes()));
                    break;
                case "m":
                    ret.append(value.getMinutes().toString());
                    break;
                case "ss":
                    ret.append(addLeadingZero(value.getSeconds()));
                    break;
                case "s":
                    ret.append(value.getSeconds().toString());
                    break;
                case "tt":
                    ret.append(value.getHours() < 12
                        ? AjaxDate._getValueFromDictionary(dtf, "AMDesignator")
                        : AjaxDate._getValueFromDictionary(dtf, "PMDesignator"));
                    break;
                case "t":
                    ret.append((value.getHours() < 12
                        ? AjaxDate._getValueFromDictionary(dtf, "AMDesignator")
                        : AjaxDate._getValueFromDictionary(dtf, "PMDesignator")).charAt(0));
                    break;
                case "f":
                    ret.append(addLeadingZeros(value.getMilliseconds()).charAt(0));
                    break;
                case "ff":
                    ret.append(addLeadingZeros(value.getMilliseconds()).substr(0, 2));
                    break;
                case "fff":
                    ret.append(addLeadingZeros(value.getMilliseconds()));
                    break;
                case "z":
                    hour = value.getTimezoneOffset() / 60;
                    ret.append((hour <= 0 ? "+" : "-") + Math.floor(Math.abs(hour)));
                    break;
                case "zz":
                    hour = value.getTimezoneOffset() / 60;
                    ret.append((hour <= 0 ? "+" : "-") + addLeadingZero(Math.floor(Math.abs(hour))));
                    break;
                case "zzz":
                    hour = value.getTimezoneOffset() / 60;
                    ret.append((hour <= 0 ? "+" : "-") + addLeadingZero(Math.floor(Math.abs(hour))) + ":" + addLeadingZero(Math.abs(value.getTimezoneOffset() % 60)));
                    break;
                case "g":
                case "gg":
                    if (AjaxDate._getValueFromDictionary(dtf, "eras")) {
                        ret.append(AjaxDate._getValueFromDictionary(dtf, "eras")[AjaxDate._getEra(value, eras) + 1]);
                    }
                    break;
                case "/":
                    ret.append(AjaxDate._getValueFromDictionary(dtf, "DateSeparator"));
                    break;
                default:
                    throw Error("Invalid date format pattern");
            }
        }
        return ret.toString();
    };
    AjaxDate._getParseRegExp = function (dtf, format) {
        var expFormat = this._expandFormat(dtf, format);
        expFormat = expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1");
        var regexp = new StringBuilder_1.StringBuilder("^");
        var groups = [];
        var index = 0;
        var quoteCount = 0;
        var tokenRegExp = this._getTokenRegExp();
        var match;
        while ((match = tokenRegExp.exec(expFormat)) !== null) {
            var preMatch = expFormat.slice(index, match.index);
            index = tokenRegExp.lastIndex;
            quoteCount += this._appendPreOrPostMatch(preMatch, regexp);
            if (quoteCount % 2 === 1) {
                regexp.append(match[0]);
                continue;
            }
            switch (match[0]) {
                case "dddd":
                case "ddd":
                case "MMMM":
                case "MMM":
                case "gg":
                case "g":
                    regexp.append("(\\D+)");
                    break;
                case "tt":
                case "t":
                    regexp.append("(\\D*)");
                    break;
                case "yyyy":
                    regexp.append("(\\d{4})");
                    break;
                case "fff":
                    regexp.append("(\\d{3})");
                    break;
                case "ff":
                    regexp.append("(\\d{2})");
                    break;
                case "f":
                    regexp.append("(\\d)");
                    break;
                case "dd":
                case "d":
                case "MM":
                case "M":
                case "yy":
                case "y":
                case "HH":
                case "H":
                case "hh":
                case "h":
                case "mm":
                case "m":
                case "ss":
                case "s":
                    regexp.append("(\\d\\d?)");
                    break;
                case "zzz":
                    regexp.append("([+-]?\\d\\d?:\\d{2})");
                    break;
                case "zz":
                case "z":
                    regexp.append("([+-]?\\d\\d?)");
                    break;
                case "/":
                    regexp.append("(\\" + AjaxDate._getValueFromDictionary(dtf, "DateSeparator") + ")");
                    break;
                default:
                    throw Error("Invalid date format pattern");
            }
            groups.push(match[0]);
        }
        this._appendPreOrPostMatch(expFormat.slice(index), regexp);
        regexp.append("$");
        var regexpStr = regexp.toString().replace(/\s+/g, "\\s+");
        var parseRegExp = { regExp: regexpStr, groups: groups };
        //dtf._parseRegExp[format] = parseRegExp;
        return parseRegExp;
    };
    AjaxDate._toUpper = function (value) {
        return value
            .split("\u00A0")
            .join(" ")
            .toUpperCase(); //No break space
    };
    AjaxDate._toUpperArray = function (arr) {
        var result = [];
        for (var i = 0, il = arr.length; i < il; i++) {
            result[i] = this._toUpper(arr[i]);
        }
        return result;
    };
    AjaxDate._getIndex = function (value, a1, a2) {
        var upper = this._toUpper(value);
        var i = a1.indexOf(upper);
        if (i === -1) {
            i = a2.indexOf(upper);
        }
        return i;
    };
    AjaxDate._getMonthIndex = function (cultureInfo, value) {
        var monthNames = "MonthNames";
        var monthGenitiveNames = "MonthGenitiveNames";
        var _upperMonths = this._toUpperArray(cultureInfo.dateTimeFormat[monthNames]);
        var _upperMonthsGenitive = this._toUpperArray(cultureInfo.dateTimeFormat[monthGenitiveNames]);
        return this._getIndex(value, _upperMonths, _upperMonthsGenitive);
    };
    AjaxDate._getAbbrMonthIndex = function (cultureInfo, value) {
        var _upperAbbrMonths = this._toUpperArray(AjaxDate._getValueFromDictionary(cultureInfo.dateTimeFormat, "AbbreviatedMonthNames"));
        var _upperAbbrMonthsGenitive = this._toUpperArray(AjaxDate._getValueFromDictionary(cultureInfo.dateTimeFormat, "AbbreviatedMonthGenitiveNames"));
        return this._getIndex(value, _upperAbbrMonths, _upperAbbrMonthsGenitive);
    };
    AjaxDate._getDayIndex = function (cultureInfo, value) {
        var _upperDays = this._toUpperArray(AjaxDate._getValueFromDictionary(cultureInfo.dateTimeFormat, "DayNames"));
        return _upperDays.indexOf(this._toUpper(value));
    };
    AjaxDate._getAbbrDayIndex = function (cultureInfo, value) {
        var _upperAbbrDays = this._toUpperArray(AjaxDate._getValueFromDictionary(cultureInfo.dateTimeFormat, "AbbreviatedDayNames"));
        return _upperAbbrDays.indexOf(this._toUpper(value));
    };
    AjaxDate._expandYear = function (dtf, year) {
        var now = new Date(), era = this._getEra(now, AjaxDate._getValueFromDictionary(dtf, "eras"));
        if (year < 100) {
            var curr = this._getEraYear(now, dtf, era);
            year += curr - (curr % 100);
            if (year >
                AjaxDate._getValueFromDictionary(AjaxDate._getValueFromDictionary(dtf, "Calendar"), "TwoDigitYearMax")) {
                year -= 100;
            }
        }
        return year;
    };
    /**
     * Format Date value
     * @param value Date value to format
     * @param format Format to apply
     * @param culture Current culture info
     */
    AjaxDate.localeFormat = function (value, format, culture) {
        return AjaxDate._toFormattedString(value, format, culture);
    };
    AjaxDate.parse = function (value, format, cultureInfo) {
        value = value.trim();
        var dtf = cultureInfo.dateTimeFormat, parseInfo = this._getParseRegExp(dtf, format), match = new RegExp(parseInfo.regExp).exec(value);
        if (match === null)
            return null;
        var groups = parseInfo.groups;
        var era = null;
        var year = null;
        var month = null;
        var date = null;
        var weekDay = null;
        var hour = 0;
        var hourOffset;
        var min = 0;
        var sec = 0;
        var msec = 0;
        var tzMinOffset = null;
        var pmHour = false;
        for (var j = 0, jl = groups.length; j < jl; j++) {
            var matchGroup = match[j + 1];
            if (matchGroup) {
                switch (groups[j]) {
                    case "dd":
                    case "d":
                        date = parseInt(matchGroup, 10);
                        if (date < 1 || date > 31)
                            return null;
                        break;
                    case "MMMM":
                        month = this._getMonthIndex(cultureInfo, matchGroup);
                        if (month < 0 || month > 11)
                            return null;
                        break;
                    case "MMM":
                        month = this._getAbbrMonthIndex(cultureInfo, matchGroup);
                        if (month < 0 || month > 11)
                            return null;
                        break;
                    case "M":
                    case "MM":
                        month = parseInt(matchGroup, 10) - 1;
                        if (month < 0 || month > 11)
                            return null;
                        break;
                    case "y":
                    case "yy":
                        year = this._expandYear(dtf, parseInt(matchGroup, 10));
                        if (year < 0 || year > 9999)
                            return null;
                        break;
                    case "yyyy":
                        year = parseInt(matchGroup, 10);
                        if (year < 0 || year > 9999)
                            return null;
                        break;
                    case "h":
                    case "hh":
                        hour = parseInt(matchGroup, 10);
                        if (hour === 12)
                            hour = 0;
                        if (hour < 0 || hour > 11)
                            return null;
                        break;
                    case "H":
                    case "HH":
                        hour = parseInt(matchGroup, 10);
                        if (hour < 0 || hour > 23)
                            return null;
                        break;
                    case "m":
                    case "mm":
                        min = parseInt(matchGroup, 10);
                        if (min < 0 || min > 59)
                            return null;
                        break;
                    case "s":
                    case "ss":
                        sec = parseInt(matchGroup, 10);
                        if (sec < 0 || sec > 59)
                            return null;
                        break;
                    case "tt":
                    case "t":
                        var upperToken = matchGroup.toUpperCase();
                        pmHour = upperToken === AjaxDate._getValueFromDictionary(dtf, "PMDesignator").toUpperCase();
                        if (!pmHour && upperToken !== AjaxDate._getValueFromDictionary(dtf, "AMDesignator").toUpperCase())
                            return null;
                        break;
                    case "f":
                        msec = parseInt(matchGroup, 10) * 100;
                        if (msec < 0 || msec > 999)
                            return null;
                        break;
                    case "ff":
                        msec = parseInt(matchGroup, 10) * 10;
                        if (msec < 0 || msec > 999)
                            return null;
                        break;
                    case "fff":
                        msec = parseInt(matchGroup, 10);
                        if (msec < 0 || msec > 999)
                            return null;
                        break;
                    case "dddd":
                        weekDay = this._getDayIndex(cultureInfo, matchGroup);
                        if (weekDay < 0 || weekDay > 6)
                            return null;
                        break;
                    case "ddd":
                        weekDay = this._getAbbrDayIndex(cultureInfo, matchGroup);
                        if (weekDay < 0 || weekDay > 6)
                            return null;
                        break;
                    case "zzz":
                        var offsets = matchGroup.split(/:/);
                        if (offsets.length !== 2)
                            return null;
                        hourOffset = parseInt(offsets[0], 10);
                        if (hourOffset < -12 || hourOffset > 13)
                            return null;
                        var minOffset = parseInt(offsets[1], 10);
                        if (minOffset < 0 || minOffset > 59)
                            return null;
                        tzMinOffset = hourOffset * 60 + (matchGroup.startsWith("-") ? -minOffset : minOffset);
                        break;
                    case "z":
                    case "zz":
                        hourOffset = parseInt(matchGroup, 10);
                        if (hourOffset < -12 || hourOffset > 13)
                            return null;
                        tzMinOffset = hourOffset * 60;
                        break;
                    case "g":
                    case "gg":
                        var eraName = matchGroup;
                        var eras = AjaxDate._getValueFromDictionary(dtf, "eras");
                        if (!eraName || !eras)
                            return null;
                        eraName = eraName.toLowerCase().trim();
                        for (var i = 0, l = Object.keys(eras).length; i < l; i += 4) {
                            if (eraName === eras[i + 1].toLowerCase()) {
                                era = i;
                                break;
                            }
                        }
                        if (era === null)
                            return null;
                        break;
                }
            }
        }
        var result = new Date();
        var defaultYear;
        var temp = "convert";
        //TODO convert doesn't appear to exist on dateTimeFormat's calendar.
        var convert = AjaxDate._getValueFromDictionary(dtf, "Calendar")[temp];
        if (convert) {
            defaultYear = convert.fromGregorian(result)[0];
        }
        else {
            defaultYear = result.getFullYear();
        }
        if (year === null) {
            year = defaultYear;
        }
        else if (AjaxDate._getValueFromDictionary(dtf, "eras")) {
            year += AjaxDate._getValueFromDictionary(dtf, "eras")[(era || 0) + 3];
        }
        if (month === null) {
            month = 0;
        }
        if (date === null) {
            date = 1;
        }
        if (convert) {
            result = convert.toGregorian(year, month, date);
            if (result === null)
                return null;
        }
        else {
            result.setFullYear(year, month, date);
            if (result.getDate() !== date)
                return null;
            if (weekDay !== null && result.getDay() !== weekDay) {
                return null;
            }
        }
        if (pmHour && hour < 12) {
            hour += 12;
        }
        result.setHours(hour, min, sec, msec);
        if (tzMinOffset !== null) {
            var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
            //result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);
            result.setHours(result.getHours() + adjustedMin / 60, adjustedMin % 60);
        }
        return result;
    };
    return AjaxDate;
}());
exports.AjaxDate = AjaxDate;

},{"../../../Utilities/StringBuilder":107}],90:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var AjaxNumber = /** @class */ (function () {
    function AjaxNumber() {
    }
    AjaxNumber._getValueFromDictionary = function (dict, propertyName) {
        return dict[propertyName];
    };
    AjaxNumber._toFormattedString = function (num, format, cultureInfo) {
        if (!format || format.length === 0 || format === "i") {
            if (cultureInfo && cultureInfo.name.length > 0) {
                return this.toLocaleString();
            }
            else {
                return this.toString();
            }
        }
        var _percentPositivePattern = ["n %", "n%", "%n"];
        var _percentNegativePattern = ["-n %", "-n%", "-%n"];
        var _numberNegativePattern = ["(n)", "-n", "- n", "n-", "n -"];
        var _currencyPositivePattern = ["$n", "n$", "$ n", "n $"];
        var _currencyNegativePattern = [
            "($n)",
            "-$n",
            "$-n",
            "$n-",
            "(n$)",
            "-n$",
            "n-$",
            "n$-",
            "-n $",
            "-$ n",
            "n $-",
            "$ n-",
            "$ -n",
            "n- $",
            "($ n)",
            "(n $)",
        ];
        function zeroPad(str, count, left) {
            for (var l = str.length; l < count; l++) {
                str = left ? "0" + str : str + "0";
            }
            return str;
        }
        function expandNumber(numb, precision, groupSizes, sep, decimalChar) {
            var curSize = groupSizes[0];
            var curGroupIndex = 1;
            var factor = Math.pow(10, precision);
            var rounded = Math.round(numb * factor) / factor;
            if (!isFinite(rounded)) {
                rounded = numb;
            }
            numb = rounded;
            var numberString = numb.toString();
            var right = "";
            var exponent;
            var split = numberString.split(/e/i);
            numberString = split[0];
            exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
            split = numberString.split(".");
            numberString = split[0];
            right = split.length > 1 ? split[1] : "";
            if (exponent > 0) {
                right = zeroPad(right, exponent, false);
                numberString += right.slice(0, exponent);
                right = right.substr(exponent);
            }
            else if (exponent < 0) {
                exponent = -exponent;
                numberString = zeroPad(numberString, exponent + 1, true);
                right = numberString.slice(-exponent, numberString.length) + right;
                numberString = numberString.slice(0, -exponent);
            }
            if (precision > 0) {
                if (right.length > precision) {
                    right = right.slice(0, precision);
                }
                else {
                    right = zeroPad(right, precision, false);
                }
                right = decimalChar + right;
            }
            else {
                right = "";
            }
            var stringIndex = numberString.length - 1;
            var ret = "";
            while (stringIndex >= 0) {
                if (curSize === 0 || curSize > stringIndex) {
                    if (ret.length > 0)
                        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
                    else
                        return numberString.slice(0, stringIndex + 1) + right;
                }
                if (ret.length > 0)
                    ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + sep + ret;
                else
                    ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1);
                stringIndex -= curSize;
                if (curGroupIndex < groupSizes.length) {
                    curSize = groupSizes[curGroupIndex];
                    curGroupIndex++;
                }
            }
            return numberString.slice(0, stringIndex + 1) + sep + ret + right;
        }
        var nf = cultureInfo.numberFormat;
        var number = Math.abs(num).toString();
        if (!format)
            format = "D";
        var precision = -1;
        if (format.length > 1)
            precision = parseInt(format.slice(1), 10);
        var pattern;
        switch (format.charAt(0)) {
            case "d":
            case "D":
                pattern = "n";
                if (precision !== -1) {
                    number = zeroPad("" + number, precision, true);
                }
                if (num < 0)
                    number = (-number).toString();
                break;
            case "c":
            case "C":
                if (num < 0)
                    pattern = _currencyNegativePattern[this._getValueFromDictionary(nf, "CurrencyNegativePattern")];
                else
                    pattern = _currencyPositivePattern[this._getValueFromDictionary(nf, "CurrencyPositivePattern")];
                if (precision === -1)
                    precision = this._getValueFromDictionary(nf, "CurrencyDecimalDigits");
                number = expandNumber(Math.abs(num), precision, this._getValueFromDictionary(nf, "CurrencyGroupSizes"), this._getValueFromDictionary(nf, "CurrencyGroupSeparator"), this._getValueFromDictionary(nf, "CurrencyDecimalSeparator"));
                break;
            case "n":
            case "N":
                if (num < 0)
                    pattern = _numberNegativePattern[this._getValueFromDictionary(nf, "NumberNegativePattern")];
                else
                    pattern = "n";
                if (precision === -1)
                    precision = this._getValueFromDictionary(nf, "NumberDecimalDigits");
                number = expandNumber(Math.abs(num), precision, this._getValueFromDictionary(nf, "NumberGroupSizes"), this._getValueFromDictionary(nf, "NumberGroupSeparator"), this._getValueFromDictionary(nf, "NumberDecimalSeparator"));
                break;
            case "p":
            case "P":
                if (num < 0)
                    pattern = _percentNegativePattern[this._getValueFromDictionary(nf, "PercentNegativePattern")];
                else
                    pattern = _percentPositivePattern[this._getValueFromDictionary(nf, "PercentPositivePattern")];
                if (precision === -1)
                    precision = this._getValueFromDictionary(nf, "PercentDecimalDigits");
                number = expandNumber(Math.abs(num) * 100, precision, this._getValueFromDictionary(nf, "PercentGroupSizes"), this._getValueFromDictionary(nf, "PercentGroupSeparator"), this._getValueFromDictionary(nf, "PercentDecimalSeparator"));
                break;
            default:
                throw Error("Res.formatBadFormatSpecifier");
        }
        var regex = /n|\$|-|%/g;
        var ret = "";
        for (;;) {
            var index = regex.lastIndex;
            var ar = regex.exec(pattern);
            ret += pattern.slice(index, ar ? ar.index : pattern.length);
            if (!ar)
                break;
            switch (ar[0]) {
                case "n":
                    ret += number;
                    break;
                case "$":
                    ret += this._getValueFromDictionary(nf, "CurrencySymbol");
                    break;
                case "-":
                    if (/[1-9]/.test(number)) {
                        ret += this._getValueFromDictionary(nf, "NegativeSign");
                    }
                    break;
                case "%":
                    ret += this._getValueFromDictionary(nf, "PercentSymbol");
                    break;
                default:
                    throw Error("Invalid number format pattern");
            }
        }
        return ret;
    };
    /**
     * Format number
     * @param num Number to format
     * @param format Format to apply
     * @param cultureInfo Current culture info
     */
    AjaxNumber.localeFormat = function (num, format, cultureInfo) {
        return this._toFormattedString(num, format, cultureInfo);
    };
    return AjaxNumber;
}());
exports.AjaxNumber = AjaxNumber;

},{}],91:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var AjaxNumber_1 = require("./AjaxNumber");
/**
 * Unicode character of 'NO-BREAK SPACE'
 */
// TODO this char does not render in UTs
// const _ZeroWidthNoBreakSpace = String.fromCharCode(65279); ///"\uFEFF"; //65279
var NoBreakSpace = String.fromCharCode(41); /// "\u00A0";
function getNegativeNumberFormatString(negativeNumberFormatCode) {
    switch (negativeNumberFormatCode) {
        //TODO: why does the zero width no break space not work in UTs
        //case 0: return "(" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + ")";  // i.e. "({0})" => "(123,456.78)"
        //case 1: return "-" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}"; // i.e. "-{0}" => "-123,456.78"
        //case 2: return "-" + CrmFormatter.NoBreakSpace + "{0}"; // i.e. "- {0}" => "- 123,456.78"
        //case 3: return "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + "-"; // i.e. "{0}-" => "123,456.78-"
        //case 4: return "{0}" + CrmFormatter.NoBreakSpace + "-"; // i.e. "{0} -" => "123,456.78 -"
        //default: return "(" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + ")";  // i.e. "({0})" => "(123,456.78)"			//case 0: return "(" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + ")";  // i.e. "({0})" => "(123,456.78)"
        // TODO check if there are other negative formats
        case 1:
            return "-{0}"; // i.e. "-{0}" => "-123,456.78"
        case 2:
            return "-" + NoBreakSpace + "{0}"; // i.e. "- {0}" => "- 123,456.78"
        case 3:
            return "{0}-"; // i.e. "{0}-" => "123,456.78-"
        case 4:
            return "{0}" + NoBreakSpace + "-"; // i.e. "{0} -" => "123,456.78 -"
        default:
            return "({0})"; // i.e. "({0})" => "(123,456.78)"
    }
}
function getNumberDecimalPlaces(cultureInfo) {
    return getValueFromNumberFormat(cultureInfo, "NumberDecimalDigits");
}
function formatPositiveDecimalValue(input, cultureInfo, precision) {
    return AjaxNumber_1.AjaxNumber.localeFormat(input, "N" + (precision !== null && precision !== undefined ? precision : getNumberDecimalPlaces(cultureInfo)), cultureInfo);
}
exports.formatPositiveDecimalValue = formatPositiveDecimalValue;
function formatNegativeDecimalValue(input, cultureInfo, precision) {
    var absInput = Math.abs(input);
    return String.format(getNegativeNumberFormatString(getValueFromNumberFormat(cultureInfo, "NumberNegativePattern")), formatPositiveDecimalValue(absInput, cultureInfo, precision));
}
exports.formatNegativeDecimalValue = formatNegativeDecimalValue;
function getValueFromNumberFormat(cultureInfo, propertyName) {
    return cultureInfo.numberFormat[propertyName];
}
function getCurrencySymbol(cultureInfo) {
    return getValueFromNumberFormat(cultureInfo, "CurrencySymbol");
}
exports.getCurrencySymbol = getCurrencySymbol;
function getCurrencyDecimalPlaces(cultureInfo) {
    return getValueFromNumberFormat(cultureInfo, "CurrencyDecimalDigits");
}
function basicFormatCurrencyValue(input, cultureInfo, attributePrecision) {
    var precision = attributePrecision;
    if (precision === null || precision === undefined) {
        var culturePrecision = getCurrencyDecimalPlaces(cultureInfo);
        if (precision === null || precision === undefined) {
            precision = culturePrecision;
        }
    }
    return AjaxNumber_1.AjaxNumber.localeFormat(input, "C" + precision, cultureInfo);
}
exports.basicFormatCurrencyValue = basicFormatCurrencyValue;
function getShortDatePattern(cultureInfo) {
    return _replaceDateTimeSeperator(cultureInfo, "ShortDatePattern", "DateSeparator", "/");
}
exports.getShortDatePattern = getShortDatePattern;
function getLongDatePattern(cultureInfo) {
    return _replaceDateTimeSeperator(cultureInfo, "LongDatePattern", "DateSeparator", "/");
}
exports.getLongDatePattern = getLongDatePattern;
function getShortTimePattern(cultureInfo) {
    return _replaceDateTimeSeperator(cultureInfo, "ShortTimePattern", "TimeSeparator", ":");
}
exports.getShortTimePattern = getShortTimePattern;
function _replaceDateTimeSeperator(cultureInfo, formatName, seperatorName, seperator) {
    return cultureInfo.dateTimeFormat[formatName]
        .toString()
        .replace(new RegExp(seperator, "g"), cultureInfo.dateTimeFormat[seperatorName].toString());
}
/**
 * Get the date format from the format description
 * @param cultureInfo Given culture info
 * @param format Format of date or datetime
 */
function getFormatPattern(cultureInfo, format) {
    switch (format) {
        case "datetime":
        case "dateandtime":
            var shortDatePattern = getShortDatePattern(cultureInfo);
            var shortTimePattern = getShortTimePattern(cultureInfo);
            return shortDatePattern + " " + shortTimePattern;
        case "date":
        case "dateonly":
        default:
            // Default to "dateonly" when there is no specified format.
            return getShortDatePattern(cultureInfo);
    }
}
exports.getFormatPattern = getFormatPattern;

},{"./AjaxNumber":90}],92:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var FormatterUtils = require("./FormatterUtils");
var AjaxDate_1 = require("./AjaxDate");
var CultureInfo_1 = require("../../../Utilities/CultureInfo");
var SimpleFormatter = /** @class */ (function () {
    function SimpleFormatter() {
    }
    /**
     * Converts date from String to dateObject
     * @param {string} value - the source string
     * @param format Format description of date or datetime
     * @param cultureInfo Current culture info
     * @param formatterProperties Formatter properties
     */
    SimpleFormatter.ParseDateFromString = function (value, format, cultureInfo) {
        var controlFormat = format;
        if (controlFormat) {
            controlFormat = controlFormat.toLowerCase();
        }
        var indexOfSpace = value.indexOf(" ");
        switch (format) {
            case "date":
            case "dateonly":
                if (indexOfSpace > 0) {
                    // The value is a datetime but trying to be parsed as a date. Force parsing as a datetime with 0 time.
                    controlFormat = "datetime";
                }
                break;
            case "datetime":
            case "dateandtime":
                if (indexOfSpace < 0) {
                    controlFormat = "date"; // The value is a date but trying to be parsed as a datetime. Force parsing as a date
                }
                break;
        }
        var formatPattern = FormatterUtils.getFormatPattern(cultureInfo, controlFormat);
        return AjaxDate_1.AjaxDate.parse(value, formatPattern, cultureInfo);
    };
    /**
     * Returns a formatted string represents a given integer value
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @returns {string} A formatted string represents a given integer value
     */
    SimpleFormatter.formatIntegerValue = function (input, cultureInfo) {
        return SimpleFormatter.formatDecimalValue(input, cultureInfo, 0);
    };
    /**
     * Returns a string represents the currency value after being formatted
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @param currencySymbol The currency symbol/code to be added while currency value
     * @param precision The precision value to be used for formatting
     * @returns {string} A string represents the currency value after being formatted
     */
    SimpleFormatter.formatCurrencyValue = function (input, cultureInfo, currencySymbol, precision) {
        var formattedCurrencyValue = FormatterUtils.basicFormatCurrencyValue(input, cultureInfo, precision);
        return currencySymbol !== null && currencySymbol !== undefined
            ? formattedCurrencyValue.replace(FormatterUtils.getCurrencySymbol(cultureInfo), currencySymbol)
            : formattedCurrencyValue;
    };
    /**
     * Returns a string represents the date value after being formatted
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @returns {string} A string represents the date value after being formatted
     */
    SimpleFormatter.formatShortDateValue = function (input, cultureInfo) {
        return AjaxDate_1.AjaxDate.localeFormat(input, "d", cultureInfo);
    };
    /**
     * Returns a string represents the date value after being formatted
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @returns {string} A string represents the date value after being formatted
     */
    SimpleFormatter.formatLongDateValue = function (input, cultureInfo) {
        return AjaxDate_1.AjaxDate.localeFormat(input, "D", cultureInfo);
    };
    /**
     * Returns a string represents the decimal value after being formatted
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @param precision The precision value to be used for formatting
     * @returns {string} A string represents the decimal value after being formatted
     */
    SimpleFormatter.formatDecimalValue = function (input, cultureInfo, precision) {
        if (input < 0) {
            return FormatterUtils.formatNegativeDecimalValue(input, cultureInfo, precision);
        }
        else {
            return FormatterUtils.formatPositiveDecimalValue(input, cultureInfo, precision);
        }
    };
    /**
     * Returns a string represents the date value after being formatted in Sortable("s") format.
     * @param input A value object to be formatted.
     * @return {string} A string represents the date value after being formatted.
     */
    SimpleFormatter.formatSortableDateValue = function (input) {
        var formattedValue = SimpleFormatter.formatSortableDateTimeValue(input);
        return formattedValue.split("T")[0];
    };
    /**
     * Returns a string represents the datetime value after being formatted in Sortable("s") format.
     * @param input A value object to be formatted.
     * @return {string} A string represents the datetime value after being formatted.
     */
    SimpleFormatter.formatSortableDateTimeValue = function (input) {
        return AjaxDate_1.AjaxDate.localeFormat(input, "s", CultureInfo_1.CultureInfo.CurrentCulture);
    };
    /**
     * Returns a string represents the datetime value after being formatted
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @returns {string} A string represents the datetime value after being formatted
     */
    SimpleFormatter.formatShortDateTimeValue = function (input, cultureInfo) {
        // TODO: convert to DateTime.LocaleFormat("g").
        // Note: we manually use a combination of shortDatePattern and shortTimePattern because the
        //		 current version of S# is lack of support for DateTime.LocaleFormat("g").
        var shortDatePattern = FormatterUtils.getShortDatePattern(cultureInfo);
        var shortTimePattern = FormatterUtils.getShortTimePattern(cultureInfo);
        return AjaxDate_1.AjaxDate.localeFormat(input, shortDatePattern + " " + shortTimePattern, cultureInfo);
    };
    /**
     * Returns a string represents the datetime value after being formatted
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @returns {string} A string represents the datetime value after being formatted
     */
    SimpleFormatter.formatDateLongAbbreviated = function (input, cultureInfo) {
        var longDatePattern = FormatterUtils.getLongDatePattern(cultureInfo);
        longDatePattern = longDatePattern.replace("MMMM", "MMM");
        longDatePattern = longDatePattern.replace("dddd", "ddd");
        return AjaxDate_1.AjaxDate.localeFormat(input, longDatePattern, cultureInfo);
    };
    /**
     * Returns a string representing the datetime value after being formatted with the Year Month format
     * @param input A value object to be formatted
     * @param cultureInfo Culture info to apply to format
     * @returns {string} A string represents the datetime value after being formatted
     */
    SimpleFormatter.formatDateYearMonthValue = function (input, cultureInfo) {
        return AjaxDate_1.AjaxDate.localeFormat(input, "Y", cultureInfo);
    };
    /**
     * Returns a formatted string represents a given language
     * @param input A value object to be formatted
     * @param languagesByCode The list of languages and their localized labels
     * @returns {string} A formatted string represents a given language value
     */
    SimpleFormatter.formatLanguageValue = function (input, languagesByCode) {
        if (isNaN(input) || input < -1)
            //need to allow -1 as we have -1 value for "All languages"
            return undefined;
        else if (input !== null && (!languagesByCode || !languagesByCode[input]))
            return input.toString();
        else
            return languagesByCode[input];
    };
    return SimpleFormatter;
}());
exports.SimpleFormatter = SimpleFormatter;

},{"../../../Utilities/CultureInfo":97,"./AjaxDate":89,"./FormatterUtils":91}],93:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
function generateDummySystemParameters() {
    var deviceSizeMode = {
        Usage: 1 /* Input */,
        Static: true,
        Type: "WholeNumber.None",
        Value: 0,
        Primary: false,
    };
    var viewportSizeMode = {
        Usage: 1 /* Input */,
        Static: true,
        Type: "WholeNumber.None",
        Value: 0,
        Primary: false,
    };
    var scope = {
        Usage: 1 /* Input */,
        Static: true,
        Type: "WholeNumber.None",
        Value: 1,
        Primary: false,
    };
    var syncError = {
        Usage: 1 /* Input */,
        Static: true,
        Type: "TwoOptions",
        Value: false,
        Primary: false,
    };
    var isEmpty = {
        Usage: 1 /* Input */,
        Static: true,
        Type: "TwoOptions",
        Value: false,
        Primary: false,
    };
    return {
        deviceSizeMode: deviceSizeMode,
        viewportSizeMode: viewportSizeMode,
        scope: scope,
        syncError: syncError,
        isEmpty: isEmpty,
    };
}
exports.generateDummySystemParameters = generateDummySystemParameters;

},{}],94:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var PropertyBagFactory = /** @class */ (function () {
    function PropertyBagFactory(customControlProperties, externalUtils, hostData) {
        this._customControlProperties = customControlProperties;
        this._externalUtils = externalUtils;
        this._hostData = hostData;
    }
    PropertyBagFactory.prototype.getInstance = function (instance) {
        return new instance(this._customControlProperties, this._externalUtils, this._hostData);
    };
    return PropertyBagFactory;
}());
exports.PropertyBagFactory = PropertyBagFactory;

},{}],95:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var LAYOUT_PROPERTY = "layout";
exports.LAYOUT_PROPERTY = LAYOUT_PROPERTY;
var FULLSCREEN_OPEN_PROPERTY = "fullscreen_open";
exports.FULLSCREEN_OPEN_PROPERTY = FULLSCREEN_OPEN_PROPERTY;
var FULLSCREEN_CLOSE_PROPERTY = "fullscreen_close";
exports.FULLSCREEN_CLOSE_PROPERTY = FULLSCREEN_CLOSE_PROPERTY;
var PARAMETERS = "parameters";
exports.PARAMETERS = PARAMETERS;

},{}],96:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Default performance event creator
 */
var DefaultCreatePerformanceEvent = {
    createMarker: function () { },
    startStopwatch: function () {
        return function stop() { };
    },
    createRetroactiveStopwatch: function () { },
};
/**
 * Interface for creating performance events
 */
var CCFPerformanceTracker = /** @class */ (function () {
    function CCFPerformanceTracker() {
        this._creator = null;
    }
    /**
     * Sets the performance event creator
     * @param eventCreator Creator for performance events
     * @param addKpi Function that creates KPIs
     * @param addKpiOnIdle Function that creates a KPI once the app is idle
     * @param trackWork Tracks a block of work in the PerformanceTracker
     */
    CCFPerformanceTracker.prototype.setPerformanceHooks = function (eventCreator, addKpi, addKpiOnIdle, trackWork, scheduleControlUpdate) {
        this._creator = eventCreator;
        this._addKpi = addKpi;
        this._addKpiOnIdle = addKpiOnIdle;
        this._trackWork = trackWork;
        this._scheduleControlUpdate = scheduleControlUpdate;
    };
    /**
     * Creates a performance event
     * @param eventName The event name
     * @param logLevel Level of the log message
     * @param zone The event zone. If omitted defaults to "CustomControlsFramework"
     */
    CCFPerformanceTracker.prototype.createPerformanceEvent = function (eventName, logLevel, zone) {
        if (logLevel === void 0) { logLevel = 3 /* Info */; }
        if (zone === void 0) { zone = "CustomControlsFramework"; }
        if (this._creator && logLevel > 2 /* Warning */) {
            return this._creator(eventName, zone);
        }
        return DefaultCreatePerformanceEvent;
    };
    /**
     * Starts a stopwatch for a control lifecycle method
     * @param methodName The lifecycle method name
     * @param controlId The ID of the control
     * @param manifestControlName The name of the control
     */
    CCFPerformanceTracker.prototype.startLifecycleStopwatch = function (methodName, controlId, manifestControlName) {
        return this.createPerformanceEvent(methodName, undefined, "CustomControls").startStopwatch({
            controlId: controlId,
            manifestControlName: manifestControlName,
        });
    };
    /**
     * Logs a key performance indicator at the current or given time.
     * The indicator will appear as a marker in the timeline.
     * @param name The name of the key performance indicator.
     * @param parameters Additional parameters to attach to the performance indicator, if any.
     * @param retroactiveTimestamp Timestamp for the marker for this KPI. If null, current time will be used.
     */
    CCFPerformanceTracker.prototype.addKeyPerformanceIndicator = function (name, parameters, retroactiveTimestamp) {
        if (this._addKpi) {
            this._addKpi(name, parameters, retroactiveTimestamp);
        }
    };
    /**
     * Logs a key performance indicator at the point when the current block of work ends.
     * The indicator will appear as a marker in the timeline.
     * @param name The name of the key performance indicator.
     * @param parameters Additional parameters to attach to the performance indicator, if any.
     */
    CCFPerformanceTracker.prototype.addKeyPerformanceIndicatorOnIdle = function (name, parameters) {
        if (this._addKpiOnIdle) {
            this._addKpiOnIdle(name, parameters);
        }
    };
    /**
     * Tracks a block of work in the PerformanceTracker.
     * @param diagnosticId A human-readable ID that describes the work.
     */
    CCFPerformanceTracker.prototype.trackWork = function (diagnosticId) {
        if (this._trackWork) {
            return this._trackWork(diagnosticId);
        }
        return function () { };
    };
    /**
     * Schedule a control update.
     */
    CCFPerformanceTracker.prototype.scheduleControlUpdate = function (update) {
        if (this._scheduleControlUpdate) {
            this._scheduleControlUpdate(update);
        }
        else {
            update();
        }
    };
    return CCFPerformanceTracker;
}());
exports.CCFPerformanceTracker = CCFPerformanceTracker;
/**
 * Singleton instance of the tracker.
 */
var instance = new CCFPerformanceTracker();
exports.default = instance;

},{}],97:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Implement a stripped down version of MicrosoftAjax to provide the basic functionality without
 * the non-complient code
 */
var CultureInfo = /** @class */ (function () {
    function CultureInfo(name, numberFormat, dateTimeFormat) {
        this.name = name;
        this.dateTimeFormat = dateTimeFormat;
        this.numberFormat = numberFormat;
    }
    CultureInfo._getCurrentCulture = function () {
        // Check for existing culture info
        if (typeof __cultureInfo === "object") {
            return new CultureInfo(__cultureInfo.name, __cultureInfo.numberFormat, __cultureInfo.dateTimeFormat);
        }
        return new CultureInfo("en-US", {
            // number format
            CurrencyDecimalDigits: 2,
            CurrencyDecimalSeparator: ".",
            IsReadOnly: false,
            CurrencyGroupSizes: [3],
            NumberGroupSizes: [3],
            PercentGroupSizes: [3],
            CurrencyGroupSeparator: ",",
            CurrencySymbol: "$",
            NaNSymbol: "NaN",
            CurrencyNegativePattern: 0,
            NumberNegativePattern: 1,
            PercentPositivePattern: 0,
            PercentNegativePattern: 0,
            NegativeInfinitySymbol: "-Infinity",
            NegativeSign: "-",
            NumberDecimalDigits: 2,
            NumberDecimalSeparator: ".",
            NumberGroupSeparator: ",",
            CurrencyPositivePattern: 0,
            PositiveInfinitySymbol: "Infinity",
            PositiveSign: "+",
            PercentDecimalDigits: 2,
            PercentDecimalSeparator: ".",
            PercentGroupSeparator: ",",
            PercentSymbol: "%",
            PerMilleSymbol: "\u2030",
            NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
            DigitSubstitution: 1,
        }, {
            // date time format
            AMDesignator: "AM",
            Calendar: {
                MinSupportedDateTime: "@-62135568000000@",
                MaxSupportedDateTime: "@253402300799999@",
                AlgorithmType: 1,
                CalendarType: 1,
                Eras: [1],
                TwoDigitYearMax: 2029,
                IsReadOnly: false,
            },
            DateSeparator: "/",
            FirstDayOfWeek: 0,
            CalendarWeekRule: 0,
            FullDateTimePattern: "dddd, MMMM dd, yyyy h:mm:ss tt",
            LongDatePattern: "dddd, MMMM dd, yyyy",
            LongTimePattern: "h:mm:ss tt",
            MonthDayPattern: "MMMM dd",
            PMDesignator: "PM",
            RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
            ShortDatePattern: "M/d/yyyy",
            ShortTimePattern: "h:mm tt",
            SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
            TimeSeparator: ":",
            UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
            YearMonthPattern: "MMMM, yyyy",
            AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            DayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            AbbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
            MonthNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
            IsReadOnly: false,
            NativeCalendarName: "Gregorian Calendar",
            AbbreviatedMonthGenitiveNames: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
                "",
            ],
            MonthGenitiveNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
        });
    };
    CultureInfo._getInvariantCulture = function () {
        return new CultureInfo("", {
            // number format
            CurrencyDecimalDigits: 2,
            CurrencyDecimalSeparator: ".",
            IsReadOnly: true,
            CurrencyGroupSizes: [3],
            NumberGroupSizes: [3],
            PercentGroupSizes: [3],
            CurrencyGroupSeparator: ",",
            CurrencySymbol: "\u00A4",
            NaNSymbol: "NaN",
            CurrencyNegativePattern: 0,
            NumberNegativePattern: 1,
            PercentPositivePattern: 0,
            PercentNegativePattern: 0,
            NegativeInfinitySymbol: "-Infinity",
            NegativeSign: "-",
            NumberDecimalDigits: 2,
            NumberDecimalSeparator: ".",
            NumberGroupSeparator: ",",
            CurrencyPositivePattern: 0,
            PositiveInfinitySymbol: "Infinity",
            PositiveSign: "+",
            PercentDecimalDigits: 2,
            PercentDecimalSeparator: ".",
            PercentGroupSeparator: ",",
            PercentSymbol: "%",
            PerMilleSymbol: "\u2030",
            NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
            DigitSubstitution: 1,
        }, {
            // date time format
            AMDesignator: "AM",
            Calendar: {
                MinSupportedDateTime: "@-62135568000000@",
                MaxSupportedDateTime: "@253402300799999@",
                AlgorithmType: 1,
                CalendarType: 1,
                Eras: [1],
                TwoDigitYearMax: 2029,
                IsReadOnly: true,
            },
            DateSeparator: "/",
            FirstDayOfWeek: 0,
            CalendarWeekRule: 0,
            FullDateTimePattern: "dddd, dd MMMM yyyy HH:mm:ss",
            LongDatePattern: "dddd, dd MMMM yyyy",
            LongTimePattern: "HH:mm:ss",
            MonthDayPattern: "MMMM dd",
            PMDesignator: "PM",
            RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
            ShortDatePattern: "MM/dd/yyyy",
            ShortTimePattern: "HH:mm",
            SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
            TimeSeparator: ":",
            UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
            YearMonthPattern: "yyyy MMMM",
            AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            DayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            AbbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
            MonthNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
            IsReadOnly: true,
            NativeCalendarName: "Gregorian Calendar",
            AbbreviatedMonthGenitiveNames: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
                "",
            ],
            MonthGenitiveNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
        });
    };
    CultureInfo.CurrentCulture = CultureInfo._getCurrentCulture();
    CultureInfo.InvariantCulture = CultureInfo._getInvariantCulture();
    return CultureInfo;
}());
exports.CultureInfo = CultureInfo;

},{}],98:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Custom Control Constants
 */
var CustomControlConstants = /** @class */ (function () {
    function CustomControlConstants() {
    }
    /**
     * LearningPath DOM Attribute Name
     */
    CustomControlConstants.LearningPathAttributeSuffix = "lp-id";
    CustomControlConstants.LearningPathAttributeName = "data-" + CustomControlConstants.LearningPathAttributeSuffix;
    /**
     * CCF telemetry component name .
     */
    CustomControlConstants.CCF = "CustomControlFramework";
    return CustomControlConstants;
}());
exports.CustomControlConstants = CustomControlConstants;

},{}],99:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var XrmProxy_1 = require("./XrmProxy");
var CustomControlUtilityPointers_1 = require("../Models/CustomControlUtilityPointers");
var ManifestType_1 = require("../Utilities/ManifestType");
var TelemetryManager_1 = require("../Utilities/TelemetryManager");
var DefaultControlMapper_1 = require("../Utilities/DefaultControlMapper");
var CUSTOM_CONTROL_ID_SEPARATOR = "-";
var DEFAULT_OPENRECORD_BUTTONID = "Mscrm.OpenRecordItem";
/**
 * Get unique id for custom control
 * @param props The custom control hosts props
 * @param id The id of component
 * @param absoluteId The absolute id of component
 * @returns The unique id for custom control
 */
function buildUniqueCustomControlId(props, id, absoluteId) {
    if (absoluteId) {
        return absoluteId;
    }
    if (!id) {
        return id;
    }
    var childDomId = buildChildDomId(props);
    return (childDomId ? childDomId + CUSTOM_CONTROL_ID_SEPARATOR : "") + id;
}
exports.buildUniqueCustomControlId = buildUniqueCustomControlId;
/**
 * Get child DomId for custom control
 * @param props The custom control hosts props
 * @returns The child unique id prefix for custom control
 */
function buildChildDomId(props) {
    if (props.configuration && props.configuration.CustomControlId === DefaultControlMapper_1.FIELD_SECTION_ITEM_ID) {
        return buildFieldSectionItemChildDomId(props);
    }
    var domId = "";
    if (props.descriptor) {
        domId = props.descriptor.DomId ? props.descriptor.DomId : "";
    }
    var controlId = props.controlId ? props.controlId : "";
    return (domId ? domId + CUSTOM_CONTROL_ID_SEPARATOR : "") + (controlId ? controlId : "");
}
exports.buildChildDomId = buildChildDomId;
/**
 * When you're within a field section item custom control, use the schema that control expects
 * @param props
 */
function buildFieldSectionItemChildDomId(props) {
    return props.descriptor.DomId + CUSTOM_CONTROL_ID_SEPARATOR + props.descriptor.Id;
}
/**
 * Get a unique deterministic id for the custom control, to be used as the value for a data attribute for automated tests.
 * @param props The custom control hosts props
 * @param testhookId An id unique to the base custom control to be used as the suffix of the testhook id
 */
function buildTesthookId(props, testhookId) {
    var controlId = props && props.controlId ? props.controlId : "";
    if (!testhookId) {
        return controlId || "";
    }
    return (controlId ? controlId + CUSTOM_CONTROL_ID_SEPARATOR : "") + testhookId;
}
exports.buildTesthookId = buildTesthookId;
/**
 * Get tabindex value for the control
 * @param props The custom control hosts props
 * @returns The tabindex value for custom control
 */
function buildTabIndexValue(props) {
    if (!CustomControlUtilityPointers_1.IsNullOrUndefined(props) &&
        !CustomControlUtilityPointers_1.IsNullOrUndefined(props.propBagData) &&
        !CustomControlUtilityPointers_1.IsNullOrUndefined(props.propBagData.accessibilityData) &&
        !CustomControlUtilityPointers_1.IsNullOrUndefined(props.propBagData.accessibilityData.assignedTabIndex)) {
        return props.propBagData.accessibilityData.assignedTabIndex;
    }
    return 0;
}
exports.buildTabIndexValue = buildTabIndexValue;
// Cached value for getHighContrastEnabled
var isHighContrastEnabled;
/**
 * Gets whether the high contrast setting is enabled or not
 * @returns The high contrast enabled value
 */
function getHighContrastEnabled() {
    if (isHighContrastEnabled === undefined) {
        var highContrastMediaFeatue = "(-ms-high-contrast: active)";
        var mediaQuery = window.matchMedia(highContrastMediaFeatue);
        if (mediaQuery.matches) {
            isHighContrastEnabled = true;
        }
        else {
            var htmlTag = document.getElementsByTagName("html");
            isHighContrastEnabled = htmlTag[0].getAttribute("hc") != null;
        }
    }
    return isHighContrastEnabled;
}
exports.getHighContrastEnabled = getHighContrastEnabled;
/**
 * Focus element with required identifier
 * @param props The custom control hosts props
 * @param id The id of component
 * @param isAbsoluteId Flag is "id" parameter it is absolute id or parted accessibility id
 */
function focusElementById(props, id, isAbsoluteId) {
    var identifier = _extractAccessibilityIdentifier(props, id, isAbsoluteId);
    if (!identifier || identifier === null) {
        return;
    }
    var element = document.getElementById(identifier);
    if (!element || element === null) {
        return;
    }
    element.focus();
}
exports.focusElementById = focusElementById;
/**
 * Blur element with required identifier
 * @param props The custom control hosts props
 * @param id The id of component
 * @param isAbsoluteId Flag is "id" parameter it is absolute id or parted accessibility id
 */
function blurElementById(props, id, isAbsoluteId) {
    var identifier = _extractAccessibilityIdentifier(props, id, isAbsoluteId);
    if (!identifier || identifier === null) {
        return;
    }
    var element = document.getElementById(identifier);
    if (!element || element === null) {
        return;
    }
    element.blur();
}
exports.blurElementById = blurElementById;
/**
 * To make decisions about what type of identity we want, and returns it
 * @param props The custom control hosts props
 * @param id The id of component
 * @param isAbsoluteId Flag is "id" parameter it is absolute id or parted accessibility id
 */
function _extractAccessibilityIdentifier(props, id, isAbsoluteId) {
    if (!id) {
        return;
    }
    return isAbsoluteId === true ? id : buildUniqueCustomControlId(props, id);
}
/**
 * Create a CRM URI based on a relative path, prepending the org name if necessary
 * @param url The relative path
 * @param data Client data from property bag
 * @return The relative path with the org name prepended if necessary
 */
function createCrmUri(url, data) {
    var organizationUniqueName = data.organizationUniqueName ? data.organizationUniqueName : "";
    var usePathBasedUrls = data.usePathBasedUrls ? data.usePathBasedUrls : false;
    if (usePathBasedUrls && organizationUniqueName) {
        return "/" + organizationUniqueName + url;
    }
    return url;
}
exports.createCrmUri = createCrmUri;
/**
 * Create an action for openDatasetItem usage
 */
function openDatasetItemAction(ownProps, param, paramKey, entityReference, openDataSetItemOptions) {
    if (!entityReference) {
        return;
    }
    var entityName = entityReference.entityName || entityReference.LogicalName;
    var entityReferenceId = entityReference.id || (entityReference.Id && entityReference.Id.toString());
    var recordSetQueryKey = getRecordSetQueryFromProps(ownProps, paramKey);
    var openFormAction = function () {
        try {
            var options = { entityName: entityName, entityId: entityReferenceId, recordSetQueryKey: recordSetQueryKey };
            if (ownProps.parentDefinedControlProps &&
                ownProps.parentDefinedControlProps.propertyBagOverrides &&
                ownProps.parentDefinedControlProps.propertyBagOverrides.openForm) {
                ownProps.parentDefinedControlProps.propertyBagOverrides.openForm(options);
            }
            else {
                if (options.entityName) {
                    // Forms has asked that we only call openForm when we have a usable entityName.
                    // To alleviate burden on their metrics, we throw an error ourselves, which we'd be doing anyway.
                    XrmProxy_1.default.openForm(options);
                }
                else {
                    throw new Error("EntityName was not passed in to method, cannot call openForm");
                }
            }
        }
        catch (e) {
            var jsonOwnProps = "";
            try {
                jsonOwnProps = JSON.stringify(ownProps);
            }
            catch (exception) {
                jsonOwnProps = "Unable to parse ownProps";
            }
            try {
                if (ownProps.propBagMethods.navigation && ownProps.propBagMethods.navigation.openEditForm) {
                    ownProps.propBagMethods.navigation.openEditForm(entityReference);
                }
            }
            catch (exception) {
                XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Utilities", e, "propBagMethods.navigation.openEditForm failed", [
                    { name: "ownProps", value: jsonOwnProps },
                    { name: "APIName", value: TelemetryManager_1.COMPONENT_NAME + ".Utilities.CustomControlHelper.openDatasetItemAction" },
                ]);
            }
            XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Utilities", e, "XrmProxyInstance.openForm failed", [
                { name: "ownProps", value: jsonOwnProps },
                { name: "APIName", value: TelemetryManager_1.COMPONENT_NAME + "Utilities.CustomControlHelper.openFormAction" },
            ]);
        }
    };
    // For non-primary attribute always default to openFormAction
    if (entityName !== param.getTargetEntityType()) {
        openFormAction();
        return;
    }
    if (param.retrieveRecordCommand) {
        var successCallback = function (commandObjectWrappers) {
            if (commandObjectWrappers && commandObjectWrappers.length > 0) {
                commandObjectWrappers[0].execute();
            }
            else {
                openFormAction();
            }
        };
        var failureCallback = function () {
            openFormAction();
        };
        var openRecordId = openDataSetItemOptions && openDataSetItemOptions.CommandButtonId
            ? openDataSetItemOptions.CommandButtonId
            : DEFAULT_OPENRECORD_BUTTONID;
        param
            .retrieveRecordCommand([entityReferenceId], [openRecordId], false, false, false)
            .then(successCallback, failureCallback);
    }
    else {
        openFormAction();
    }
}
exports.openDatasetItemAction = openDatasetItemAction;
function getRecordSetQueryFromProps(ownProps, paramKey) {
    var params = paramKey && ownProps.dynamicData ? ownProps.dynamicData.parameters[paramKey] : null;
    return ownProps.actions && ownProps.actions.getRecordSetQueryKey && params !== null
        ? ownProps.actions.getRecordSetQueryKey(params)
        : null;
}
exports.getRecordSetQueryFromProps = getRecordSetQueryFromProps;
/**
 * determines parentId from props
 * @param props custom control props
 */
function getParentIdFromProps(props) {
    var uniqueId = buildChildDomId(props);
    var idComponents = uniqueId.split(CUSTOM_CONTROL_ID_SEPARATOR);
    var i;
    for (i = 0; i < idComponents.length - 1; i++)
        if (idComponents[i] !== "id" && isNaN(Number(idComponents[i]))) {
            return idComponents[i];
        }
    return "";
}
exports.getParentIdFromProps = getParentIdFromProps;
/**
 * Convert FetchXml Snippet to Custom Control Filtering Expression
 * @param inputFetchXmlSnippet
 * @returns Converted String
 */
function convertFetchXmlToFilterExpression(inputFetchXmlSnippet) {
    try {
        if (!inputFetchXmlSnippet) {
            return null;
        }
        var domParser = new DOMParser();
        var inputXmlDocument = domParser.parseFromString(inputFetchXmlSnippet, "text/xml");
        if (inputXmlDocument) {
            var filterElements = inputXmlDocument.getElementsByTagName("filter");
            if (!filterElements || filterElements.length === 0) {
                return null;
            }
            return generateFilteringExpression(filterElements[0]);
        }
        XrmProxy_1.default.Diagnostics.traceInfo(TelemetryManager_1.COMPONENT_NAME + ".convertFetchXmlToFilterExpression", "return null");
        return null;
    }
    catch (exception) {
        XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Utilities", exception, "convert xml failed", [
            { name: "inputFetchXmlSnippet", value: inputFetchXmlSnippet },
            { name: "APIName", value: TelemetryManager_1.COMPONENT_NAME + ".Utilities.CustomControlHelper.convertFetchXmlToFilterExpression" },
        ]);
    }
}
exports.convertFetchXmlToFilterExpression = convertFetchXmlToFilterExpression;
/**
 * Convert Custom Control Filtering Expression Snippet to filterXml
 * @param filterExpression The Filter expression to be converted
 * @param xmlEncode XmlEncoding method to be used to xmlEncode the attribute values
 * @returns Converted String
 */
function convertFilterExpressionToFetchXml(filterExpression, xmlEncode) {
    // Check if passed encoding method is not null or defined. If it is, don't encode.
    if (!xmlEncode) {
        xmlEncode = function (s) { return s; };
    }
    var xml = "";
    if (CustomControlUtilityPointers_1.IsNullOrUndefined(filterExpression) ||
        ((CustomControlUtilityPointers_1.IsNullOrUndefined(filterExpression.filters) || filterExpression.filters.length === 0) &&
            (CustomControlUtilityPointers_1.IsNullOrUndefined(filterExpression.conditions) || filterExpression.conditions.length === 0))) {
        return xml;
    }
    else if (!CustomControlUtilityPointers_1.IsNullOrUndefined(filterExpression.conditions) && filterExpression.conditions.length > 0) {
        xml += '<filter type="' + getFilterOperator(filterExpression.filterOperator) + '"';
        xml += ">";
        for (var i = 0; i < filterExpression.conditions.length; i++) {
            var condition = filterExpression.conditions[i];
            xml += "<condition ";
            if (!CustomControlUtilityPointers_1.IsNullOrEmptyString(condition.entityAliasName)) {
                xml += 'entityname="' + condition.entityAliasName + '" ';
            }
            if (condition.value == null) {
                xml +=
                    'attribute="' +
                        condition.attributeName +
                        '" operator="' +
                        getConditionOperator(condition.conditionOperator) +
                        '"/>';
            }
            else if (typeof condition.value === "string" || typeof condition.value === "number") {
                xml +=
                    'attribute="' +
                        condition.attributeName +
                        '" operator="' +
                        getConditionOperator(condition.conditionOperator) +
                        '" value="' +
                        xmlEncode(condition.value) +
                        '" />';
            }
            else {
                var argValues = condition.value;
                xml +=
                    'attribute="' +
                        condition.attributeName +
                        '" operator="' +
                        getConditionOperator(condition.conditionOperator) +
                        '">';
                for (var j = 0; j < argValues.length; j++) {
                    xml += "<value>" + xmlEncode(argValues[j]) + "</value>";
                }
                xml += "</condition>";
            }
        }
        xml += "</filter>";
    }
    else {
        if (filterExpression.filters.length > 0) {
            xml += '<filter type="' + getFilterOperator(filterExpression.filterOperator) + '">';
        }
        for (var i = 0; i < filterExpression.filters.length; i++) {
            xml += convertFilterExpressionToFetchXml(filterExpression.filters[i], xmlEncode);
        }
        if (filterExpression.filters.length > 0) {
            xml += "</filter>";
        }
    }
    return xml;
}
exports.convertFilterExpressionToFetchXml = convertFilterExpressionToFetchXml;
/**
 * Convert Filter Operator string value from the CustomControlInterfaces.FilterOperator
 * @param filter operator value defined in CustomControlInterfaces.FilterOperator
 * @return mapped filter opeartor value
 */
function getFilterOperator(filterOperator) {
    switch (filterOperator) {
        case 0:
            return "and";
        case 1:
            return "or";
    }
}
/**
 * Convert Condition Operator string value from the CustomControlInterfaces.ConditionOperator
 * @param condition operator value defined in CustomControlInterfaces.ConditionOperator
 * @return mapped condition opeartor value
 */
function getConditionOperator(conditionOperator) {
    switch (conditionOperator) {
        case 0:
            return "eq";
        case 1:
            return "ne";
        case 2:
            return "gt";
        case 3:
            return "lt";
        case 4:
            return "ge";
        case 5:
            return "le";
        case 6:
            return "like";
        case 7:
            return "not-like";
        case 8:
            return "in";
        case 9:
            return "not-in";
        case 10:
            return "between";
        case 11:
            return "not-between";
        case 12:
            return "null";
        case 13:
            return "not-null";
        case 14:
            return "yesterday";
        case 15:
            return "today";
        case 16:
            return "tomorrow";
        case 17:
            return "last-seven-days";
        case 18:
            return "next-seven-days";
        case 19:
            return "last-week";
        case 20:
            return "this-week";
        case 21:
            return "next-week";
        case 22:
            return "last-month";
        case 23:
            return "this-month";
        case 24:
            return "next-month";
        case 25:
            return "on";
        case 26:
            return "on-or-before";
        case 27:
            return "on-or-after";
        case 28:
            return "last-year";
        case 29:
            return "this-year";
        case 30:
            return "next-year";
        case 31:
            return "last-x-hours";
        case 32:
            return "next-x-hours";
        case 35:
            return "last-x-weeks";
        case 36:
            return "next-x-weeks";
        case 39:
            return "last-x-years";
        case 40:
            return "next-x-years";
        case 49:
            return "contain-values";
        case 53:
            return "olderthan-x-months";
        case 58:
            return "this-fiscal-year";
        case 59:
            return "this-fiscal-period";
        case 60:
            return "next-fiscal-year";
        case 61:
            return "next-fiscal-period";
        case 62:
            return "last-fiscal-year";
        case 63:
            return "last-fiscal-period";
        case 64:
            return "last-x-fiscal-years";
        case 65:
            return "last-x-fiscal-periods";
        case 66:
            return "next-x-fiscal-years";
        case 67:
            return "next-x-fiscal-periods";
        case 68:
            return "in-fiscal-year";
        case 69:
            return "in-fiscal-period";
        case 70:
            return "in-fiscal-period-and-year";
        case 71:
            return "in-or-before-fiscal-period-and-year";
        case 72:
            return "in-or-after-fiscal-period-and-year";
        case 75:
            return "above";
        case 76:
            return "under";
        case 77:
            return "not-under";
        case 78:
            return "eq-or-above";
        case 79:
            return "eq-or-under";
        case 82:
            return "olderthan-x-years";
        case 83:
            return "olderthan-x-weeks";
        case 84:
            return "olderthan-x-days";
        case 85:
            return "olderthan-x-hours";
        case 86:
            return "olderthan-x-minutes";
    }
}
/**
 * Generate Filtering Expression
 * @param inputFilterElement inputFilterElement
 * @return generated filter expression
 */
function generateFilteringExpression(inputFilterElement) {
    if (!inputFilterElement || typeof inputFilterElement === "string") {
        return null;
    }
    var filterElement = inputFilterElement;
    var filterOperator = getNodeAttributeValueFromName(filterElement, "type");
    var convertedFilterOperator = convertFilterOperator(filterOperator);
    if (convertedFilterOperator === null || !filterElement.childNodes || filterElement.childNodes.length === 0) {
        return null;
    }
    var childFilterExpressions = [];
    var conditionExpressions = [];
    for (var index = 0; index < filterElement.childNodes.length; index++) {
        var currentElement = filterElement.childNodes.item(index);
        if (typeof currentElement === "string" ||
            (currentElement.nodeName !== "filter" && currentElement.nodeName !== "condition")) {
            continue;
        }
        if (currentElement.nodeName === "filter") {
            var generatedChildFilterExpression = generateFilteringExpression(currentElement);
            if (generatedChildFilterExpression) {
                childFilterExpressions.push(generatedChildFilterExpression);
            }
        }
        else if (currentElement.nodeName === "condition") {
            var attributeValue = getNodeAttributeValueFromName(currentElement, "attribute");
            var operatorValue = getNodeAttributeValueFromName(currentElement, "operator");
            var entityNode = currentElement.parentElement && currentElement.parentElement.parentElement;
            var entityName = getNodeAttributeValueFromName(entityNode, "name");
            var entityAliasName = getNodeAttributeValueFromName(currentElement, "entityname");
            var convertedConditionOperator = convertConditionOperator(operatorValue);
            if (convertedConditionOperator !== null && attributeValue) {
                var value = void 0;
                if (isOperatorSupportsMultipleValues(operatorValue)) {
                    value = [];
                    if (currentElement.childNodes) {
                        for (var valueElementIndex = 0; valueElementIndex < currentElement.childNodes.length; valueElementIndex++) {
                            var childValueElement = currentElement.childNodes.item(valueElementIndex);
                            if (typeof childValueElement === "string" || childValueElement.nodeName !== "value") {
                                continue;
                            }
                            // TODO: there needs to be a better way to do this
                            var rawValueString = childValueElement.firstChild ? childValueElement.firstChild.nodeValue : null;
                            if (typeof rawValueString !== "string") {
                                continue;
                            }
                            var valueString = rawValueString.toString();
                            value.push(valueString);
                        }
                    }
                }
                else {
                    value = getNodeAttributeValueFromName(currentElement, "value");
                }
                var condtionExpression = {
                    attributeName: attributeValue,
                    conditionOperator: convertedConditionOperator,
                    entityName: entityName,
                    entityAliasName: entityAliasName,
                    value: value,
                };
                conditionExpressions.push(condtionExpression);
            }
        }
    }
    return {
        filters: childFilterExpressions,
        filterOperator: convertedFilterOperator,
        conditions: conditionExpressions,
    };
}
/**
 * Return if the operator supports multiple values
 * @param operatorName operator Name
 * @return if the operatorName supports multiple value
 */
function isOperatorSupportsMultipleValues(operatorName) {
    return operatorName === "in" || operatorName === "in-fiscal-period-and-year" || operatorName === "contain-values";
}
/**
 * Convert condition operator to MS CRM number
 * @param conditionOperator conditionOperator name
 * @return Mscrm operator value
 */
function convertConditionOperator(conditionOperator) {
    if (!conditionOperator) {
        return null;
    }
    switch (conditionOperator) {
        case "eq":
            return 0 /* Equal */;
        case "ne":
            return 1 /* NotEqual */;
        case "neq":
            return 1 /* NotEqual */;
        case "ge":
            return 4 /* GreaterEqual */;
        case "gt":
            return 2 /* GreaterThan */;
        case "le":
            return 5 /* LessEqual */;
        case "lt":
            return 3 /* LessThan */;
        case "on":
            return 25 /* On */;
        case "on-or-before":
            return 26 /* OnOrBefore */;
        case "on-or-after":
            return 27 /* OnOrAfter */;
        case "like":
            return 6 /* Like */;
        case "not-like":
            return 7 /* NotLike */;
        case "in":
            return 8 /* In */;
        case "not-in":
            return 9 /* NotIn */;
        case "between":
            return 10 /* Between */;
        case "not-between":
            return 11 /* NotBetween */;
        case "null":
            return 12 /* Null */;
        case "not-null":
            return 13 /* NotNull */;
        case "yesterday":
            return 14 /* Yesterday */;
        case "today":
            return 15 /* Today */;
        case "tomorrow":
            return 16 /* Tomorrow */;
        case "last-seven-days":
            return 17 /* Last7Days */;
        case "next-seven-days":
            return 18 /* Next7Days */;
        case "last-week":
            return 19 /* LastWeek */;
        case "this-week":
            return 20 /* ThisWeek */;
        case "next-week":
            return 21 /* NextWeek */;
        case "last-month":
            return 22 /* LastMonth */;
        case "this-month":
            return 23 /* ThisMonth */;
        case "next-month":
            return 24 /* NextMonth */;
        case "last-year":
            return 28 /* LastYear */;
        case "this-year":
            return 29 /* ThisYear */;
        case "next-year":
            return 30 /* NextYear */;
        case "last-x-hours":
            return 31 /* LastXHours */;
        case "next-x-hours":
            return 32 /* NextXHours */;
        case "last-x-days":
            return 33 /* LastXDays */;
        case "next-x-days":
            return 34 /* NextXDays */;
        case "last-x-weeks":
            return 35 /* LastXWeeks */;
        case "next-x-weeks":
            return 36 /* NextXWeeks */;
        case "last-x-months":
            return 37 /* LastXMonths */;
        case "next-x-months":
            return 38 /* NextXMonths */;
        case "last-x-years":
            return 39 /* LastXYears */;
        case "next-x-years":
            return 40 /* NextXYears */;
        case "this-fiscal-year":
            return 58 /* ThisFiscalYear */;
        case "this-fiscal-period":
            return 59 /* ThisFiscalPeriod */;
        case "next-fiscal-year":
            return 60 /* NextFiscalYear */;
        case "next-fiscal-period":
            return 61 /* NextFiscalPeriod */;
        case "last-fiscal-year":
            return 62 /* LastFiscalYear */;
        case "last-fiscal-period":
            return 63 /* LastFiscalPeriod */;
        case "last-x-fiscal-years":
            return 64 /* LastXFiscalYears */;
        case "last-x-fiscal-periods":
            return 65 /* LastXFiscalPeriods */;
        case "next-x-fiscal-years":
            return 66 /* NextXFiscalYears */;
        case "next-x-fiscal-periods":
            return 67 /* NextXFiscalPeriods */;
        case "in-fiscal-year":
            return 68 /* InFiscalYear */;
        case "in-fiscal-period":
            return 69 /* InFiscalPeriod */;
        case "in-fiscal-period-and-year":
            return 70 /* InFiscalPeriodAndYear */;
        case "in-or-before-fiscal-period-and-year":
            return 71 /* InOrBeforeFiscalPeriodAndYear */;
        case "in-or-after-fiscal-period-and-year":
            return 72 /* InOrAfterFiscalPeriodAndYear */;
        case "above":
            return 75 /* Above */;
        case "under":
            return 76 /* Under */;
        case "not-under":
            return 77 /* NotUnder */;
        case "eq-or-above":
            return 78 /* AboveOrEqual */;
        case "eq-or-under":
            return 79 /* UnderOrEqual */;
        case "olderthan-x-months":
            return 53 /* OlderThanXMonths */;
        case "olderthan-x-years":
            return 82 /* OlderThanXYears */;
        case "olderthan-x-weeks":
            return 83 /* OlderThanXWeeks */;
        case "olderthan-x-days":
            return 84 /* OlderThanXDays */;
        case "olderthan-x-hours":
            return 85 /* OlderThanXHours */;
        case "olderthan-x-minutes":
            return 86 /* OlderThanXMinutes */;
        case "contain-values":
            return 87 /* ContainValues */;
    }
    return null;
}
/**
 * Convert filter operator to MS CRM number
 * @param filterOperator conditionOperator name
 * @return Mscrm operator value
 */
function convertFilterOperator(filterOperator) {
    if (!filterOperator) {
        // From schema, the default operator is 'And'
        return 0 /* And */;
    }
    switch (filterOperator) {
        case "and":
            return 0 /* And */;
        case "or":
            return 1 /* Or */;
    }
    return null;
}
/**
 * Get Node attribute value from name
 * @param inputNode input node
 * @param attribuetName attribute name
 * @returns return the attribute value
 */
function getNodeAttributeValueFromName(inputNode, attribuetName) {
    if (!inputNode) {
        return null;
    }
    var nodeAttributeMap = inputNode.attributes.getNamedItem(attribuetName);
    return nodeAttributeMap ? nodeAttributeMap.value : null;
}
exports.getNodeAttributeValueFromName = getNodeAttributeValueFromName;
function willUpdatePagingIndex(existedFirstPageNumber, existedLastPageNumber, nextFirstPageNumber, nextLastPageNumber) {
    if (pagingInputValid(existedFirstPageNumber, nextFirstPageNumber, existedLastPageNumber, nextLastPageNumber)) {
        return ((existedFirstPageNumber < nextFirstPageNumber && existedLastPageNumber >= nextLastPageNumber) ||
            (existedFirstPageNumber <= nextFirstPageNumber && existedLastPageNumber > nextLastPageNumber));
    }
    return false;
}
exports.willUpdatePagingIndex = willUpdatePagingIndex;
function willLoadNextPage(existedFirstPageNumber, nextFirstPageNumber, existedLastPageNumber, nextLastPageNumber) {
    if (pagingInputValid(existedFirstPageNumber, nextFirstPageNumber, existedLastPageNumber, nextLastPageNumber)) {
        return nextLastPageNumber - existedLastPageNumber === 1 && existedFirstPageNumber <= nextFirstPageNumber;
    }
    return false;
}
exports.willLoadNextPage = willLoadNextPage;
function willLoadExactPage(nextFirstPageNumber, nextLastPageNumber, oldPagingRefreshInput, newPagingRefreshInput, existedFirstPageNumber, existedLastPageNumber) {
    // Load exact page whenever the requested (next) first page and last page numbers are the same and:
    // either the existing and requested pagingRefreshInputs do not match, or
    // the requested page number is different from the existing page number
    if (nextFirstPageNumber &&
        nextLastPageNumber &&
        nextFirstPageNumber === nextLastPageNumber &&
        ((!!oldPagingRefreshInput && !!newPagingRefreshInput && oldPagingRefreshInput !== newPagingRefreshInput) ||
            (nextFirstPageNumber > existedLastPageNumber || existedFirstPageNumber > nextLastPageNumber))) {
        return true;
    }
    return false;
}
exports.willLoadExactPage = willLoadExactPage;
function willLoadPrevPage(existedFirstPageNumber, nextFirstPageNumber, existedLastPageNumber, nextLastPageNumber) {
    if (pagingInputValid(existedFirstPageNumber, nextFirstPageNumber, existedLastPageNumber, nextLastPageNumber)) {
        return existedFirstPageNumber - nextFirstPageNumber === 1 && existedLastPageNumber >= nextLastPageNumber;
    }
    return false;
}
exports.willLoadPrevPage = willLoadPrevPage;
function pagingInputValid(pageNumber1, pageNumber2, pageNumber3, pageNumber4) {
    if (pageNumber1 &&
        pageNumber2 &&
        pageNumber3 &&
        pageNumber4 &&
        pageNumber1 > 0 &&
        pageNumber2 > 0 &&
        pageNumber3 > 0 &&
        pageNumber4 > 0) {
        return true;
    }
    return false;
}
exports.pagingInputValid = pagingInputValid;
/**
 * Returns true if the control is a dataset
 * @param manifest the manifest for the control
 */
function isDataSetControl(manifest) {
    if (manifest && manifest.Properties && manifest.Properties.DataSetDefinitions) {
        var definitions = manifest.Properties
            .DataSetDefinitions;
        // Find the primary dataset, if any
        for (var dataSetKey in definitions) {
            if (manifest.Properties.DataSetDefinitions[dataSetKey] &&
                manifest.Properties.DataSetDefinitions[dataSetKey].Primary) {
                var manifestProperties = manifest.Properties
                    .Properties;
                var hasBoundProperty = false;
                // Check that the dataset doesn't have a bound property
                for (var _i = 0, manifestProperties_1 = manifestProperties; _i < manifestProperties_1.length; _i++) {
                    var property = manifestProperties_1[_i];
                    if (property.Usage === 0 /* Bound */) {
                        hasBoundProperty = true;
                        break;
                    }
                }
                // If the data set doesn't have a bound property, then it is not a data set
                if (!hasBoundProperty) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
    }
    return false;
}
exports.isDataSetControl = isDataSetControl;
/**
 * Returns true if the control has a DataSetWrapper
 * @param parameters The parameters of the control configuration
 */
function hasDataProvider(parameters) {
    for (var parameterKey in parameters) {
        var parameter = parameters[parameterKey];
        if (parameter && parameter.DataProvider) {
            return true;
        }
    }
    return false;
}
exports.hasDataProvider = hasDataProvider;
/**
 * Returns true if the control is a quick view form.
 * @param configuration The control configuration
 */
function isQuickFormControl(configuration) {
    if (configuration && configuration.Parameters) {
        for (var paramKey in configuration.Parameters) {
            if (configuration.Parameters[paramKey] && configuration.Parameters[paramKey].Type === ManifestType_1.ManifestType.QuickForm) {
                return true;
            }
        }
    }
    return false;
}
exports.isQuickFormControl = isQuickFormControl;
/**
 * Parses the entity name from the descriptor. This should only be used for cases where the
 * contextString is not available.
 * @param descriptor The control's descriptor
 */
function getEntityTypeFromDescriptor(descriptor) {
    var entityName;
    for (var paramKey in descriptor.Parameters) {
        if (descriptor.Parameters[paramKey] && descriptor.Parameters[paramKey].Value) {
            var xmlSplit = descriptor.Parameters[paramKey].Value.split('"');
            if (xmlSplit.length > 1 && xmlSplit[0].indexOf("entityname") > -1) {
                entityName = xmlSplit[1];
                break;
            }
        }
    }
    return entityName;
}
exports.getEntityTypeFromDescriptor = getEntityTypeFromDescriptor;
function getRecordInfoFromControlProps(props) {
    var paramKey = _getQuickFormParameterNameFromConfig(props.configuration);
    var newProps = props.dynamicData.parameters[paramKey];
    var entityTypeName;
    var recordId;
    if (newProps && newProps.getLatestData) {
        var latestData = newProps.getLatestData();
        entityTypeName = latestData
            ? latestData.entityName
            : getEntityTypeFromQuickFormDefaultConfiguration(props.configuration);
        recordId = latestData ? latestData.recordId : getRecordIdFromQuickFormDefaultConfiguration(props.configuration);
    }
    return {
        recordId: recordId,
        entityTypeName: entityTypeName,
    };
}
exports.getRecordInfoFromControlProps = getRecordInfoFromControlProps;
function _getQuickFormParameterNameFromConfig(configuration) {
    if (configuration && configuration.Parameters) {
        for (var paramKey in configuration.Parameters) {
            if (configuration.Parameters[paramKey] &&
                configuration.Parameters[paramKey].Type === ManifestType_1.ManifestType.QuickForm &&
                configuration.Parameters[paramKey]
                    .Primary) {
                return paramKey;
            }
        }
    }
    return "value";
}
/**
 * Parses a data value from the configuration.
 * @param configuration The control's configuration.
 * @param index The index for the data to retrieve.
 */
function _getQuickFormParameterValueFromDefaultConfiguration(configuration, index) {
    var valueParameter = "value";
    var result;
    if (configuration && configuration.Parameters && configuration.Parameters[valueParameter]) {
        var value = configuration.Parameters[valueParameter];
        var data = value.Value ? value.Value.split("|") : null;
        if (data && data.length > index) {
            result = data[index];
        }
    }
    return result;
}
/**
 * Parses the entity name from the configuration.
 * @param descriptor The control's configuration.
 */
function getEntityTypeFromQuickFormDefaultConfiguration(configuration) {
    var entityTypeIndex = 1;
    return _getQuickFormParameterValueFromDefaultConfiguration(configuration, entityTypeIndex);
}
exports.getEntityTypeFromQuickFormDefaultConfiguration = getEntityTypeFromQuickFormDefaultConfiguration;
/**
 * Parses the record Id from the configuration.
 * @param descriptor The control's configuration.
 */
function getRecordIdFromQuickFormDefaultConfiguration(configuration) {
    var recordIdIndex = 2;
    return _getQuickFormParameterValueFromDefaultConfiguration(configuration, recordIdIndex);
}
exports.getRecordIdFromQuickFormDefaultConfiguration = getRecordIdFromQuickFormDefaultConfiguration;

},{"../Models/CustomControlUtilityPointers":67,"../Utilities/DefaultControlMapper":100,"../Utilities/ManifestType":104,"../Utilities/TelemetryManager":109,"./XrmProxy":110}],100:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ManifestType_1 = require("./ManifestType");
var GuidHelper_1 = require("./GuidHelper");
var XrmProxy_1 = require("./XrmProxy");
/**
 * Name of the field section item
 */
var FIELD_SECTION_ITEM_ID = "MscrmControls.Containers.FieldSectionItem";
exports.FIELD_SECTION_ITEM_ID = FIELD_SECTION_ITEM_ID;
var DUMMY_CONTROL_ITEM_ID = "MscrmControls.FieldControls.DummyControl";
var LABEL_CONTROL_ID = "MscrmControls.FieldControls.LabelControl";
var GRID_CONTROL_ID = "MscrmControls.Grid.GridControl";
var READ_ONLY_GRID_CONTROL_ID = "MscrmControls.Grid.ReadOnlyGrid";
var SHAREPOINT_GRID_CONTROL_ID = "MscrmControls.SharepointAssociatedGrid.SharepointControl";
var RELEVANCE_SEARCH_CONTROL_ID = "MscrmControls.Containers.RelevanceSearchControl";
var SEARCH_WIDGET_CONTROL_ID = "MscrmControls.KbSearchControl.KbSearchControl";
var KB_ARTICLE_CONTROL_ID = "MscrmControls.KbArticleControl.KbArticleControl";
var KB_CONTENT_CONTROL_ID = "MscrmControls.KbContentControl.KbContentControl";
var EMAILENGAGEMENT_CONTROL_ID = "MscrmControls.EmailEngagement.EmailView";
var NEWEMAILEDITOR_CONTROL_ID = "MscrmControls.ActivityControls.ActivityEditorControl";
var CALENDAR_CONTROL_ID = "MscrmControls.Calendar.CalendarControl";
var TIMELINE_CONTROL_ID = "MscrmControls.Timeline.TimelineControl";
var ACTIONCARD_CONTROL_ID = "MscrmControls.ActionCard.ActionCardView";
var EMAILENGAGEMENT_ACTIONS_CONTROL_ID = "MscrmControls.EmailEngagement.EmailEngagementActionsControl";
var SOCIAL_INSIGHTS_CONTROL_ID = "MscrmControls.SocialInsightsControl.SocialInsightsControl";
var DASHBOARD_CONTROL_ID = "MscrmControls.Containers.DashboardControl";
var CHART_CONTROL_ID = "MscrmControls.Chart.ChartControl";
var BINGMAP_CONTROL_ID = "MscrmControls.Map.MapControl";
var BINGMAP_NAME = "mapcontrol";
var POWERBI_ID = "MscrmControls.PowerBI.PowerBIControl";
var BINGMAP_CLASS_ID = "62b0df79-0464-470f-8af7-4483cfea0c7d";
var GRID_CLASS_ID = "{E7A81278-8635-4D9E-8D4D-59480B391C5B}";
var SUBGRID_CLASS_ID = "{02d4264b-47e2-4b4c-aa95-f439f3f4d458}";
var LABEL_CLASS_ID = "{39354E4A-5015-4D74-8031-EA9EB73A1322}";
var SEARCH_WIDGET_CLASS_ID = "{e616a57f-20e0-4534-8662-a101b5ddf4e0}";
var KB_ARTICLE_CONTROL_CLASS_ID = "{03c5aed6-ee88-404e-b63c-4c53429c8bfb}";
var KB_CONTENT_CONTROL_CLASS_ID = "{1b9fc842-b45e-4fc1-b080-81e96b6d857f}";
var EMAILENGAGEMENT_CLASS_ID = "{26E9760F-7454-40DE-BB07-F6DCCCB82040}";
var REFERENCE_PANEL_SEARCH_WIDGET_CLASS_ID = "{7CCD1494-1F7A-4E3A-8BDE-F32069DAEB9F}";
var EMAILEDITOR_CLASS_ID = "{6F3FB987-393B-4d2d-859F-9D0F0349B6AD}";
var ISHEDITOR_CLASS_ID = "{F94DB24F-263D-44A7-B38E-A35E9854812B}";
var EMAILENGAGEMENT_ACTIONS_CLASS_ID = "{F454228D-1D25-4319-E12F-D27968BC0234}";
var SOCIAL_INSIGHTS_CLASS_ID = "{86b9e25e-695e-4fef-ac69-f05cfa96739c}";
var IFRAME_CLASS_ID = "{fd2a7985-3187-444e-908d-6624b21f69c0}";
exports.IFRAME_CLASS_ID = IFRAME_CLASS_ID;
var TWO_OPTION_PICKLIST = "3ef39988-22bb-4f0b-bbbe-64b5a3748aee";
var TWO_OPTION_RADIO = "67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed";
var TWO_OPTION_CHECKBOX = "b0c6723a-8503-4fd7-bb28-c8a06ac933c2";
var TWO_OPTION_CLASS_ID_MAP = {
    "3ef39988-22bb-4f0b-bbbe-64b5a3748aee": "picklist",
    "67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed": "radio",
    "b0c6723a-8503-4fd7-bb28-c8a06ac933c2": "checkbox",
};
var SUBGRID_ALL_STAKEHOLDERS_VIEWID = "{4E3600FA-B9C8-49F4-B69A-51EBA06D9BDF}";
var SUBGRID_ALL_SALESTEAMMEMBERS_VIEWID = "{FE4BC089-8901-466C-A41B-1C1090F204D4}";
/**
 * Names of the Quick Form controls
 */
var QUICK_FORM_ID = "MscrmControls.Containers.QuickForm";
var QUICK_FORM_CARD_ID = "MscrmControls.Containers.QuickFormCardControl";
var WEBRESOURCEHTML_ID = "MscrmControls.WebResource.WebResourceHtmlControl";
var TIMELINEWALL_ID = "MscrmControls.TimelineWallControl.TimelineWall";
var READ_ONLY_GRID_CONTROL_DISPLAY_NAME_KEY = "CC_ReadOnlyGrid_Name";
var VALUE_KEY = "value";
/**
 * Memoized configuration
 */
var memoizedProcessControlDefaultConfigs = {};
var memoizedSocialInsightsControlConfigs = {};
var memoizedDummyControlDefaultConfigs = {};
var memoizedFieldSectionControlDefaultConfigs = {};
var memoizedQuickFormDefaultConfigs = {};
var memoizedCardDefaultConfigs = {};
var memorizedWebResourceDefaultConfigs = {};
var memoizedLabelControlDefaultConfigs = {};
/**
 * Enum for control modes of component.
 * IMPORTANT: in case of changes please sync them with FieldSectionItem control - it has an equal enum due to impossibility of import this one
 */
var ControlMode;
(function (ControlMode) {
    ControlMode[ControlMode["Read"] = 0] = "Read";
    ControlMode[ControlMode["Edit"] = 1] = "Edit";
    ControlMode[ControlMode["Both"] = 2] = "Both";
})(ControlMode || (ControlMode = {}));
/**
 * Enum for displayMode
 */
var DisplayMode;
(function (DisplayMode) {
    DisplayMode[DisplayMode["Normal"] = 0] = "Normal";
    DisplayMode[DisplayMode["Card"] = 1] = "Card";
})(DisplayMode || (DisplayMode = {}));
/**
 * Enum for labelMode
 */
var LabelMode;
(function (LabelMode) {
    LabelMode[LabelMode["Text"] = 0] = "Text";
    LabelMode[LabelMode["Icon"] = 1] = "Icon";
})(LabelMode || (LabelMode = {}));
var ContainerControlType;
(function (ContainerControlType) {
    ContainerControlType[ContainerControlType["GridContainer"] = 0] = "GridContainer";
    ContainerControlType[ContainerControlType["DashboardContainer"] = 1] = "DashboardContainer";
    ContainerControlType[ContainerControlType["QuickCreateForm"] = 2] = "QuickCreateForm";
    ContainerControlType[ContainerControlType["FieldSectionContainer"] = 3] = "FieldSectionContainer";
    ContainerControlType[ContainerControlType["TimelineContainer"] = 4] = "TimelineContainer";
    ContainerControlType[ContainerControlType["ChartControl"] = 5] = "ChartControl";
    ContainerControlType[ContainerControlType["WebresourceControl"] = 6] = "WebresourceControl";
    ContainerControlType[ContainerControlType["DummyControl"] = 7] = "DummyControl";
    ContainerControlType[ContainerControlType["CalendarControl"] = 8] = "CalendarControl";
})(ContainerControlType || (ContainerControlType = {}));
exports.ContainerControlType = ContainerControlType;
var KNOWN_FALLBACK_CONTROLS = {
    "MscrmControls.MultiSelectPicklist.UpdMSPicklistControl": "MscrmControls.MultiSelectPicklist.MultiSelectPicklistControl",
};
exports.KNOWN_FALLBACK_CONTROLS = KNOWN_FALLBACK_CONTROLS;
var _manifestFallbacks = {};
function updateManifestFallback(controlName, fallback) {
    _manifestFallbacks[controlName] = fallback;
}
exports.updateManifestFallback = updateManifestFallback;
function getManifestFallback(controlName) {
    return _manifestFallbacks.hasOwnProperty(controlName) ? _manifestFallbacks[controlName] : controlName;
}
exports.getManifestFallback = getManifestFallback;
/**
 * Get the primary parameter in a config
 * @param config The config
 * @returns the primary parameter
 */
function _getPrimaryParameter(config) {
    for (var propKey in config.Parameters) {
        var fieldParam = config.Parameters[propKey];
        if (fieldParam.Primary) {
            return fieldParam;
        }
    }
    return null;
}
/**
 * Wrap a form XML defined field config in a fieldSectionItem
 * @param primaryParameter Control primary parameter definition
 * @returns A config for the field section item containing the value specification parameter
 */
function _getValueSpecificationParameterConfig(primaryParameter) {
    return {
        Usage: 1 /* Input */,
        Static: true,
        Type: ManifestType_1.ManifestType.SingleLineText,
        Value: JSON.stringify(primaryParameter),
        Primary: false,
    };
}
/**
 * Wrap a form XML defined field config in a fieldSectionItem
 * @param primaryParameter Control primary parameter definition
 * @returns A config for the field section item containing the value specification parameter
 */
function _getFieldRenderParameterConfig(classId) {
    return {
        Usage: 1 /* Input */,
        Static: true,
        Type: ManifestType_1.ManifestType.SingleLineText,
        Value: TWO_OPTION_CLASS_ID_MAP[classId],
        Primary: false,
    };
}
/**
 * Gets the control ControlMode based on Control DataType
 */
function getControlMode(dataType) {
    return dataType === ManifestType_1.ManifestType.Timer ? ControlMode.Read : ControlMode.Both;
}
/**
 * Gets the control PropertyUsage based on Control DataType
 */
function getPropertyUsage(dataType) {
    return dataType === ManifestType_1.ManifestType.Timer
        ? 2 /* Output */
        : 1 /* Input */;
}
/**
 * Get DataFieldName for Timer control
 * Timer control is not bound to a DataFieldName but still needs to be used with FieldSection control
 * Hence we explictly set the DataFieldName to FailureTimeField of the Timer
 * @param descriptor
 * @returns A string with DataFieldName
 */
function getDataFieldNameForTimer(descriptor, TIMER_CONTROL_DATAFIELDNAME_KEY) {
    if (descriptor.Parameters != null) {
        if (descriptor.Parameters.hasOwnProperty(TIMER_CONTROL_DATAFIELDNAME_KEY) &&
            descriptor.Parameters[TIMER_CONTROL_DATAFIELDNAME_KEY] != null) {
            return descriptor.Parameters[TIMER_CONTROL_DATAFIELDNAME_KEY];
        }
    }
    return "";
}
exports.getDataFieldNameForTimer = getDataFieldNameForTimer;
/**
 * Wrap a form XML defined field config in a fieldSectionItem
 * @param explicitConfig The form XML config
 * @returns A config for the field section item containing the value specification parameter
 */
function getFieldSectionItemSpecificationParameters(explicitConfig, classId) {
    if (explicitConfig.CustomControlId !== FIELD_SECTION_ITEM_ID) {
        return null;
    }
    var primaryParameter = _getPrimaryParameter(explicitConfig);
    if (isRequiredTwoOptionRenderMode(classId)) {
        return {
            valueSpecification: _getValueSpecificationParameterConfig(primaryParameter),
            twoOptionRenderParam: _getFieldRenderParameterConfig(classId),
        };
    }
    else {
        return {
            valueSpecification: _getValueSpecificationParameterConfig(primaryParameter),
        };
    }
}
exports.getFieldSectionItemSpecificationParameters = getFieldSectionItemSpecificationParameters;
/**
 * Checks if the control with given ID is supposed to be a FieldSectionItem.
 * @param controlId string containing control identifier.
 * @returns True if the control id is the FieldSectionItem known ID, false otherwise.
 */
function isFieldSectionItemControl(controlId) {
    return controlId === FIELD_SECTION_ITEM_ID || controlId === WEBRESOURCEHTML_ID;
}
exports.isFieldSectionItemControl = isFieldSectionItemControl;
/**
 * Checks if the control need renderMode property to be added.
 * @param classId string containing guid class Id for the given control.
 * @returns True if the control required renderMode property
 */
function isRequiredTwoOptionRenderMode(classId) {
    return ((classId && classId === TWO_OPTION_CHECKBOX) || classId === TWO_OPTION_RADIO || classId === TWO_OPTION_PICKLIST);
}
/**
 * Wrap a form XML defined field config in a fieldSectionItem
 * @param explicitConfig The form XML config
 * @returns A config for the field section item containing the control config
 */
function wrapFieldLevelConfig(explicitConfig, manifest) {
    var primaryParameter = _getPrimaryParameter(explicitConfig);
    if (!primaryParameter) {
        return explicitConfig;
    }
    return {
        FormFactor: 2,
        CustomControlId: FIELD_SECTION_ITEM_ID,
        Name: name,
        Version: "1.0.0",
        Parameters: {
            value: primaryParameter,
            valueSpecification: _getValueSpecificationParameterConfig(primaryParameter),
            controlMode: {
                Usage: 1 /* Input */,
                Static: true,
                Type: "Enum",
                Value: ControlMode[manifest.ControlMode],
                Primary: false,
            },
            displayMode: {
                Usage: 1 /* Input */,
                Static: true,
                Type: "Enum",
                Value: DisplayMode.Normal,
                Primary: false,
            },
            labelMode: {
                Usage: 1 /* Input */,
                Static: true,
                Type: "Enum",
                Value: LabelMode.Text,
                Primary: false,
            },
        },
        ShouldOverrideControlVisible: explicitConfig.ShouldOverrideControlVisible,
        Children: {
            fieldControl: explicitConfig,
        },
    };
}
exports.wrapFieldLevelConfig = wrapFieldLevelConfig;
/**
 * Create Timer Parameter object
 * @param timerParameters with values available as array of objects
 * @return timerParameters constrcuted in the format of ITimerParameter
 */
function constructTimerParameters(timerParameters) {
    var constructedTimerParameters = {};
    constructedTimerParameters.CancelConditionName = timerParameters.CancelConditionName;
    constructedTimerParameters.CancelConditionValue = timerParameters.CancelConditionValue;
    constructedTimerParameters.FailureConditionName = timerParameters.FailureConditionName;
    constructedTimerParameters.FailureConditionValue = timerParameters.FailureConditionValue;
    constructedTimerParameters.FailureTimeField = timerParameters.FailureTimeField;
    constructedTimerParameters.PauseConditionName = timerParameters.PauseConditionName;
    constructedTimerParameters.PauseConditionValue = timerParameters.PauseConditionValue;
    constructedTimerParameters.SuccessConditionName = timerParameters.SuccessConditionName;
    constructedTimerParameters.SuccessConditionValue = timerParameters.SuccessConditionValue;
    constructedTimerParameters.WarningConditionName = timerParameters.WarningConditionName;
    constructedTimerParameters.WarningConditionValue = timerParameters.WarningConditionValue;
    return constructedTimerParameters;
}
exports.constructTimerParameters = constructTimerParameters;
/**
 * Extend default "value" parameter definition by parameter-specific metadata from control manifest. Modifies parameter definition object.
 * @param defaultValueParameter Parameter definition to extend.
 * @param descriptor Control descriptor
 * @returns Returns defaultValueParameter argument.
 */
function extendDefaultValueParameterByControlDescriptor(defaultValueParameter, descriptor) {
    switch (defaultValueParameter.Type) {
        case ManifestType_1.ManifestType.Grid: {
            var gridDescriptor = descriptor;
            var parameters = gridDescriptor.Parameters;
            var gridParameter = defaultValueParameter;
            gridParameter.EnableViewPicker = parameters.EnableViewPicker === "true";
            gridParameter.RelationshipName = parameters.RelationshipName;
            gridParameter.TargetEntityType = parameters.TargetEntityType;
            gridParameter.ViewId = parameters.ViewId || parameters.DefaultViewId || parameters.defaultviewid;
            break;
        }
        case ManifestType_1.ManifestType.LookupSimple: {
            var lookupDescriptor = descriptor;
            var parameters = lookupDescriptor.Parameters;
            var lookupParameter = defaultValueParameter;
            // DataSet related parameter fields
            //In grid, the param is EnableViewPicker. However in lookup, the fetched param is actually disableViewPicker
            lookupParameter.EnableViewPicker =
                (parameters.DisableViewPicker && parameters.DisableViewPicker !== "true") || !parameters.DisableViewPicker;
            lookupParameter.TargetEntityType = parameters.TargetEntityType;
            lookupParameter.ViewId = parameters.ViewId || parameters.DefaultViewId || parameters.defaultviewid;
            // Lookup specific parameter fields
            lookupParameter.AllowFilterOff = parameters.AllowFilterOff === "true";
            lookupParameter.AvailableViewIds = parameters.AvailableViewIds;
            lookupParameter.DependentAttributeName = parameters.DependentAttributeName;
            lookupParameter.DependentAttributeType = parameters.DependentAttributeType;
            lookupParameter.DisableQuickFind = parameters.DisableQuickFind === "true";
            lookupParameter.ExtraCondition = parameters.ExtraCondition;
            lookupParameter.FilterRelationshipName = parameters.FilterRelationshipName;
            lookupParameter.DisableMru = parameters.DisableMru;
            // checking for MDD lookup parameter structure
            for (var i = 0; i < parameters.length; i++) {
                var parameter = parameters[i];
                if (parameter && parameter.TargetEntities && parameter.TargetEntities.length) {
                    if (parameter.TargetEntities.length > 1) {
                        lookupParameter.Type = ManifestType_1.ManifestType.LookupMultiEntity;
                    }
                    var targetEntity = parameter.TargetEntities[0];
                    if (!lookupParameter.ViewId && targetEntity.DefaultViewId) {
                        lookupParameter.ViewId = targetEntity.DefaultViewId;
                    }
                    if (!lookupParameter.TargetEntityType && targetEntity.EntityLogicalName) {
                        lookupParameter.TargetEntityType = targetEntity.EntityLogicalName;
                    }
                }
            }
            break;
        }
        case ManifestType_1.ManifestType.SingleLineText: {
            if (GuidHelper_1.areGuidsSame(LABEL_CLASS_ID, descriptor.ClassId.guid)) {
                var fieldParameter = defaultValueParameter;
                fieldParameter.Value = descriptor.Label;
            }
            break;
        }
        case ManifestType_1.ManifestType.Timer: {
            var timerDescriptor = descriptor;
            var timerParameters = timerDescriptor.Parameters;
            var timerValueParameter = defaultValueParameter;
            timerValueParameter.TimerParameters = constructTimerParameters(timerParameters);
            break;
        }
    }
    return defaultValueParameter;
}
exports.extendDefaultValueParameterByControlDescriptor = extendDefaultValueParameterByControlDescriptor;
function retrieveLookupManifestName(dataType, attributes) {
    if (dataType === "Lookup.Simple" &&
        attributes &&
        attributes.Targets &&
        attributes.Targets.length === 1 &&
        attributes.Targets[0] === "subject") {
        return "MscrmControls.FieldControls.SubjectTreeControl";
    }
    return "MscrmControls.FieldControls.SimpleLookupControl";
}
/**
 * Checks if the parameter is null or undefinded
 * @param util The name of the util that needs to be checked
 */
function isNullOrUndefined(util) {
    if (util === null || util === undefined) {
        return true;
    }
    return false;
}
exports.isNullOrUndefined = isNullOrUndefined;
/**
 * Retrieve a custom control configuration based on the control's type
 * @param name The name of the control
 * @param dataFieldName The field name of the control
 * @param type The type of the control, presented in a "<Main type>.<Format>" fashion
 * @param descriptorParameters The parameters from control descriptor control
 * @param entityTypeName The entity type of the form on which this control is present, if applicable
 * @param classId string containing guid class Id for the given control. This parameter
 * is used for the scenario when field control is not implemented and DummyControl is shown instead.
 * Dummy control uses class ID to show which exactly control is not implemented. Dummy control is a
 * temporary solution and will be removed at some point, but there is no precise timeline for that.
 * @param descriptor the Descriptor for this control
 * @param auxInfo auxillary info not included elsewhere on the parameters provided
 */
function retrieveDefaultConfigurationForFieldControl(name, dataFieldName, type, entityTypeName, classId, descriptor, auxInfo) {
    if (!dataFieldName) {
        if (name === BINGMAP_NAME && GuidHelper_1.areGuidsSame(BINGMAP_CLASS_ID, classId)) {
            var addressField = "AddressField";
            var nameAddress = name + "-" + descriptor.Parameters[addressField];
            if (!memoizedFieldSectionControlDefaultConfigs[nameAddress]) {
                memoizedFieldSectionControlDefaultConfigs[nameAddress] = {
                    FormFactor: 2,
                    CustomControlId: FIELD_SECTION_ITEM_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Usage: 0 /* Bound */,
                            Static: false,
                            Type: ManifestType_1.ManifestType.SingleLineAddress,
                            Value: descriptor.Parameters[addressField],
                            Primary: true,
                        },
                        controlMode: {
                            Usage: 2 /* Output */,
                            Static: true,
                            Type: "Enum",
                            Value: ControlMode.Read,
                            Primary: false,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedFieldSectionControlDefaultConfigs[nameAddress];
        }
        if (type === RELEVANCE_SEARCH_CONTROL_ID) {
            if (!memoizedProcessControlDefaultConfigs[name]) {
                memoizedProcessControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: RELEVANCE_SEARCH_CONTROL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Type: ManifestType_1.ManifestType.Search,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedProcessControlDefaultConfigs[name];
        }
        if (classId &&
            (GuidHelper_1.areGuidsSame(SEARCH_WIDGET_CLASS_ID, classId) || GuidHelper_1.areGuidsSame(REFERENCE_PANEL_SEARCH_WIDGET_CLASS_ID, classId))) {
            if (!memoizedProcessControlDefaultConfigs[name]) {
                var autoSuggestionFieldValue = descriptor &&
                    descriptor.Parameters &&
                    descriptor.Parameters.EnableAutoSuggestions === "true" &&
                    descriptor.Parameters.AutoSuggestionSource === "0"
                    ? descriptor.Parameters.SearchForAutoSuggestionsUsing
                    : undefined;
                memoizedProcessControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: SEARCH_WIDGET_CONTROL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Type: ManifestType_1.ManifestType.SearchWidget,
                            Primary: true,
                        },
                        AutoSuggestionField: {
                            Type: "all",
                            Primary: false,
                            Static: false,
                            Usage: 0 /* Bound*/,
                            Value: autoSuggestionFieldValue,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedProcessControlDefaultConfigs[name];
        }
        if (classId && GuidHelper_1.areGuidsSame(classId, KB_ARTICLE_CONTROL_CLASS_ID)) {
            memoizedProcessControlDefaultConfigs[name] = {
                FormFactor: 2,
                CustomControlId: KB_ARTICLE_CONTROL_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Type: ManifestType_1.ManifestType.KbArticle,
                        Primary: true,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        if (classId && GuidHelper_1.areGuidsSame(classId, KB_CONTENT_CONTROL_CLASS_ID)) {
            memoizedProcessControlDefaultConfigs[name] = {
                FormFactor: 2,
                CustomControlId: KB_CONTENT_CONTROL_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Type: ManifestType_1.ManifestType.KbContent,
                        Primary: true,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        if (classId && GuidHelper_1.areGuidsSame(EMAILENGAGEMENT_CLASS_ID, classId)) {
            if (!memoizedProcessControlDefaultConfigs[name]) {
                memoizedProcessControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: EMAILENGAGEMENT_CONTROL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Type: ManifestType_1.ManifestType.EmailEngagementRecipientActivity,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedProcessControlDefaultConfigs[name];
        }
        if (!isNullOrUndefined(XrmProxy_1.default) &&
            !isNullOrUndefined(XrmProxy_1.default.Utils) &&
            !isNullOrUndefined(XrmProxy_1.default.Utils.isFeatureEnabled) &&
            XrmProxy_1.default.Utils.isFeatureEnabled("EmailEngagementComposeForUCI")) {
            if (classId && GuidHelper_1.areGuidsSame(EMAILENGAGEMENT_ACTIONS_CLASS_ID, classId)) {
                if (!memoizedProcessControlDefaultConfigs[name]) {
                    memoizedProcessControlDefaultConfigs[name] = {
                        FormFactor: 2,
                        CustomControlId: EMAILENGAGEMENT_ACTIONS_CONTROL_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Type: ManifestType_1.ManifestType.EmailEngagementActions,
                                Primary: true,
                            },
                            toparams: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.LookupPartyList,
                                Value: "to",
                                Primary: false,
                            },
                            ccparams: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.LookupPartyList,
                                Value: "cc",
                                Primary: false,
                            },
                            directioncode: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.TwoOptions,
                                Value: "directioncode",
                                Primary: false,
                            },
                            isemailfollowed: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.TwoOptions,
                                Value: "isemailfollowed",
                                Primary: false,
                            },
                            followemailuserpreference: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.TwoOptions,
                                Value: "followemailuserpreference",
                                Primary: false,
                            },
                            emailreminderstatus: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.OptionSet,
                                Value: "emailreminderstatus",
                                Primary: false,
                            },
                            emailremindertype: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.OptionSet,
                                Value: "emailremindertype",
                                Primary: false,
                            },
                            emailremindertext: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.SingleLineText,
                                Value: "emailremindertext",
                                Primary: false,
                            },
                            emailreminderexpirytime: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.DateAndTimeDateAndTime,
                                Value: "emailreminderexpirytime",
                                Primary: false,
                            },
                            delayedemailsendtime: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.DateAndTimeDateAndTime,
                                Value: "delayedemailsendtime",
                                Primary: false,
                            },
                            statuscode: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_1.ManifestType.OptionSet,
                                Value: "statuscode",
                                Primary: false,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memoizedProcessControlDefaultConfigs[name];
            }
        }
        if (type === ManifestType_1.ManifestType.WebResourceHtmlControl) {
            if (!memorizedWebResourceDefaultConfigs[name]) {
                memorizedWebResourceDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: WEBRESOURCEHTML_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Usage: 0 /* Bound */,
                            Type: ManifestType_1.ManifestType.WebResourceHtmlControl,
                            Value: null,
                            Static: false,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memorizedWebResourceDefaultConfigs[name];
        }
        if (type === ManifestType_1.ManifestType.TimelineWall) {
            return {
                FormFactor: 2,
                CustomControlId: TIMELINEWALL_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Type: ManifestType_1.ManifestType.TimelineWall,
                        Primary: true,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        // Bug #1107129 Checking if utils are properly initialized
        if (!XrmProxy_1.default ||
            !XrmProxy_1.default.Utils ||
            !XrmProxy_1.default.Utils.isFeatureEnabled ||
            XrmProxy_1.default.Utils.isFeatureEnabled("SocialInsightsMapping")) {
            if (classId && GuidHelper_1.areGuidsSame(SOCIAL_INSIGHTS_CLASS_ID, classId)) {
                if (!memoizedSocialInsightsControlConfigs[name]) {
                    memoizedSocialInsightsControlConfigs[name] = {
                        FormFactor: 2,
                        CustomControlId: SOCIAL_INSIGHTS_CONTROL_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Type: ManifestType_1.ManifestType.SocialInsightsControl,
                                Primary: true,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memoizedSocialInsightsControlConfigs[name];
            }
        }
        if (!memoizedDummyControlDefaultConfigs[name]) {
            memoizedDummyControlDefaultConfigs[name] = {
                FormFactor: 2,
                CustomControlId: DUMMY_CONTROL_ITEM_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Usage: 1 /* Input */,
                        Static: true,
                        Type: classId || type,
                        Value: null,
                        Primary: true,
                    },
                    controlMode: {
                        Usage: 1 /* Input */,
                        Static: true,
                        Type: "Enum",
                        Value: ControlMode.Both,
                        Primary: false,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        return memoizedDummyControlDefaultConfigs[name];
    }
    if (classId && (GuidHelper_1.areGuidsSame(EMAILEDITOR_CLASS_ID, classId) || GuidHelper_1.areGuidsSame(ISHEDITOR_CLASS_ID, classId))) {
        if (type.includes("memo") ||
            type === ManifestType_1.ManifestType.SingleLineText ||
            type === ManifestType_1.ManifestType.SingleLineTextArea ||
            type === ManifestType_1.ManifestType.Multiple) {
            if (!memoizedProcessControlDefaultConfigs[name]) {
                memoizedProcessControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: NEWEMAILEDITOR_CONTROL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Usage: 0 /* Bound */,
                            Static: false,
                            Type: type,
                            Value: dataFieldName,
                            Primary: true,
                        },
                        isUnsafe: {
                            Usage: 1 /* Input */,
                            Static: false,
                            Type: ManifestType_1.ManifestType.WholeNone,
                            Value: "isunsafe",
                            Primary: false,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
        }
        return memoizedProcessControlDefaultConfigs[name];
    }
    if (classId && GuidHelper_1.areGuidsSame(LABEL_CLASS_ID, classId)) {
        if (!memoizedLabelControlDefaultConfigs[name]) {
            memoizedLabelControlDefaultConfigs[name] = {
                FormFactor: 2,
                CustomControlId: LABEL_CONTROL_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Type: ManifestType_1.ManifestType.SingleLineText,
                        Static: true,
                        Primary: true,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        return memoizedLabelControlDefaultConfigs[name];
    }
    if (type === ManifestType_1.ManifestType.QuickForm) {
        var value = createQuickViewFormParameterValue(descriptor, auxInfo);
        if (!memoizedQuickFormDefaultConfigs[name] ||
            memoizedQuickFormDefaultConfigs[name].Parameters[VALUE_KEY].Value !== value) {
            memoizedQuickFormDefaultConfigs[name] = {
                FormFactor: 2,
                CustomControlId: QUICK_FORM_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Usage: 0 /* Bound */,
                        Type: ManifestType_1.ManifestType.QuickForm,
                        Value: value,
                        Static: false,
                        Primary: true,
                        FirstDataRequestType: auxInfo && auxInfo.chartDataRequestType
                            ? auxInfo.chartDataRequestType
                            : 1 /* FirstDataRequestByControl */,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        return memoizedQuickFormDefaultConfigs[name];
    }
    if (type === ManifestType_1.ManifestType.Card) {
        var value = createQuickViewFormParameterValue(descriptor, auxInfo);
        if (!memoizedCardDefaultConfigs[name] ||
            memoizedCardDefaultConfigs[name].Parameters[VALUE_KEY].Value !== value) {
            memoizedCardDefaultConfigs[name] = {
                FormFactor: 2,
                CustomControlId: QUICK_FORM_CARD_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Usage: 0 /* Bound */,
                        Type: ManifestType_1.ManifestType.QuickForm,
                        Value: value,
                        Static: false,
                        Primary: true,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        return memoizedCardDefaultConfigs[name];
    }
    var dataType = retrieveDataTypeBySourceTypeForControl(type, classId);
    var controlMode = getControlMode(dataType);
    var propertyUsage = getPropertyUsage(dataType);
    var fullName = (entityTypeName ? entityTypeName.toLowerCase() + "-" : "") + name;
    if (!memoizedFieldSectionControlDefaultConfigs[fullName]) {
        memoizedFieldSectionControlDefaultConfigs[fullName] = {
            FormFactor: 2,
            CustomControlId: FIELD_SECTION_ITEM_ID,
            Name: name,
            Version: "1.0.0",
            Parameters: {
                value: {
                    Usage: 0 /* Bound */,
                    Static: false,
                    Type: dataType,
                    Value: dataFieldName,
                    Primary: true,
                },
                controlMode: {
                    Usage: propertyUsage,
                    Static: true,
                    Type: "Enum",
                    Value: controlMode,
                    Primary: false,
                },
                displayMode: {
                    Usage: propertyUsage,
                    Static: true,
                    Type: "Enum",
                    Value: DisplayMode.Normal,
                    Primary: false,
                },
                labelMode: {
                    Usage: propertyUsage,
                    Static: true,
                    Type: "Enum",
                    Value: LabelMode.Text,
                    Primary: false,
                },
            },
            ShouldOverrideControlVisible: false,
        };
    }
    return memoizedFieldSectionControlDefaultConfigs[fullName];
}
exports.retrieveDefaultConfigurationForFieldControl = retrieveDefaultConfigurationForFieldControl;
/**
 * Gets the default config for BPF controls
 * @param name
 */
function retrieveDefaultBusinessProcessFlowConfig(controlId) {
    return {
        FormFactor: 2,
        CustomControlId: controlId,
        Name: controlId,
        Version: "1.0.0",
        Parameters: {
            value: {
                Type: ManifestType_1.ManifestType.BusinessProcessFlow,
            },
        },
        ShouldOverrideControlVisible: false,
    };
}
exports.retrieveDefaultBusinessProcessFlowConfig = retrieveDefaultBusinessProcessFlowConfig;
/**
 * Gets configuration for DataSet lookup column
 * @param controlId The controlid of control that contains DataSet
 * @param formFactor The formfactor of control that contains DataSet
 * @param viewId The DataSet viewid
 * @param targetEntityName The DataSet target name
 * @param parameterName DataSet parameter name
 * @param allowFilterOff The flag which indicates whether the end user can toggle relationship filter or not.
 * @param relationshipName The relationship name the lookup filter operates on
 * @param dependentAttributeType The attribute type on which the lookup relationship filter depends
 * @param dependentAttributeName The attribute name on which the lookup relationship filter depends
 * @return {{FormFactor: number, CustomControlId: string, Name: string, Version: string, Parameters: {}}}
 */
function retrieveDataSetColumnLookupConfiguration(controlId, formFactor, viewId, targetEntityName, parameterName, allowFilterOff, relationshipName, dependentAttributeType, dependentAttributeName) {
    var _a;
    return {
        FormFactor: formFactor,
        CustomControlId: controlId,
        Name: controlId,
        Version: "1.0.0",
        Parameters: (_a = {},
            _a[parameterName] = {
                Type: ManifestType_1.ManifestType.Grid,
                ViewId: viewId,
                TargetEntityType: targetEntityName,
                AllowFilterOff: allowFilterOff == null ? false : allowFilterOff,
                RelationshipName: relationshipName,
                DependentAttributeType: dependentAttributeType,
                DependentAttributeName: dependentAttributeName,
            },
            _a),
        ShouldOverrideControlVisible: false,
    };
}
exports.retrieveDataSetColumnLookupConfiguration = retrieveDataSetColumnLookupConfiguration;
/**
 * Gets the default config for a false bound lookup control
 * @param controlId The controlid for the control
 * @param viewId The viewid for the lookup control
 * @param displayName The display name for the control
 * @param callback The callback function to be called on value change
 */
function retrieveFalseBoundLookupConfig(controlId, viewId, targetEntityName, displayName, callback) {
    return {
        FormFactor: 2,
        CustomControlId: controlId,
        Name: controlId,
        Version: "1.0.0",
        Parameters: {
            value: {
                Usage: 3,
                Type: ManifestType_1.ManifestType.LookupSimple,
                ViewId: viewId,
                Attributes: {
                    LogicalName: "falseBoundLookup",
                    Targets: new Array(targetEntityName),
                    DisplayName: displayName,
                },
                Callback: callback,
            },
        },
        ShouldOverrideControlVisible: false,
    };
}
exports.retrieveFalseBoundLookupConfig = retrieveFalseBoundLookupConfig;
/**
 * TODO: merge with retrieveFalseBoundlookupConfig function.
 * Gets the default config for a false bound lookup control
 * @param controlId The controlid for the control
 * @param defaultViewId The default viewid for the lookup control
 * @param defaultEntityType The default entity type for the lookup control
 * @param entityTypes The available entity types for multi entity lookup control
 * @param lookupType The lookup control type
 * @param callback The callback function to be called on value change
 * @param extraFilters Extra Filters for lookup dialog
 * @param additionalTargetExtraFilters Additional ExtraFilters for each entity
 */
function retrieveFalseBoundLookupConfig2(controlId, defaultViewId, defaultEntityType, entityTypes, lookupType, callback, extraFilters, additionalTargetExtraFilters, value, disableMru) {
    if (disableMru === void 0) { disableMru = false; }
    var targets;
    if (entityTypes && entityTypes.length !== 0) {
        targets = entityTypes;
    }
    else if (defaultEntityType) {
        targets = [defaultEntityType];
    }
    return {
        FormFactor: 2,
        CustomControlId: controlId,
        Name: controlId,
        Version: "1.0.0",
        Parameters: {
            value: {
                Usage: 3,
                Type: lookupType,
                ViewId: defaultViewId,
                Attributes: {
                    LogicalName: "falseBoundLookup",
                    Targets: targets,
                },
                Callback: callback,
                ExtraFilters: extraFilters,
                Value: value,
                AdditionalTargetExtraFilters: additionalTargetExtraFilters,
                DisableMru: disableMru,
            },
            displayMode: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: 1,
                Primary: false,
            },
        },
        ShouldOverrideControlVisible: false,
    };
}
exports.retrieveFalseBoundLookupConfig2 = retrieveFalseBoundLookupConfig2;
/**
 * Gets the default config for BPF controls
 * @param name
 */
function retrieveDefaultDashboardConfig(name) {
    return {
        FormFactor: 2,
        CustomControlId: name,
        Name: name,
        Version: "1.0.0",
        Parameters: {
            value: {
                Usage: 0 /* Bound */,
                Type: ManifestType_1.ManifestType.Dashboard,
                Value: null,
                Static: false,
                Primary: true,
            },
        },
        ShouldOverrideControlVisible: false,
    };
}
exports.retrieveDefaultDashboardConfig = retrieveDefaultDashboardConfig;
/**
 * Gets the default config for Reference Panel control
 * @param name
 */
function retrieveDefaultReferencePanelConfig(name) {
    return {
        FormFactor: 2,
        CustomControlId: name,
        Name: name,
        Version: "1.0.0",
        Parameters: {
            value: {
                Usage: 0 /* Bound */,
                Type: ManifestType_1.ManifestType.ReferencePanel,
                Value: null,
                Static: false,
                Primary: true,
            },
        },
        ShouldOverrideControlVisible: false,
    };
}
exports.retrieveDefaultReferencePanelConfig = retrieveDefaultReferencePanelConfig;
/**
 * Gets the default configuration for a subgrid control
 * @param controlId The id of the control
 * @param parameters The parameters for the control as a datasetParameter list
 * @returns The configuration for the subgrid control
 */
function retrieveDefaultConfigurationForSubgridControl(controlId, parameters, isAssociatedGrid) {
    if (isAssociatedGrid === void 0) { isAssociatedGrid = false; }
    return {
        FormFactor: 1,
        CustomControlId: getSubGridCustomControlId(parameters.TargetEntityType),
        Name: controlId,
        Version: "1.0.0",
        Parameters: getSubGridCustomControlParameters(parameters, isAssociatedGrid),
        ShouldOverrideControlVisible: false,
        isDefaultConfig: true,
    };
}
exports.retrieveDefaultConfigurationForSubgridControl = retrieveDefaultConfigurationForSubgridControl;
/**
 * Gets the default configuration for a home page grid control
 * @param controlId The id of the control
 * @returns The configuration for the home page grid control
 */
function retrieveDefaultConfigurationForHomePageGridControl(controlId, entityName, viewId) {
    return {
        FormFactor: 1,
        CustomControlId: READ_ONLY_GRID_CONTROL_ID,
        Name: controlId,
        DisplayNameKey: READ_ONLY_GRID_CONTROL_DISPLAY_NAME_KEY,
        Version: "1.0.0",
        Parameters: getHomePageCustomControlParameters(entityName, viewId),
        ShouldOverrideControlVisible: false,
        isDefaultConfig: true,
    };
}
exports.retrieveDefaultConfigurationForHomePageGridControl = retrieveDefaultConfigurationForHomePageGridControl;
/**
 * Gets the default configuration for a home page grid control for chart
 * @param controlId The id of the control
 * @returns The configuration for the home page chart + grid control
 */
function retrieveDefaultConfigurationForHomePageGridControlForChart(controlId, entityName, viewId) {
    return {
        FormFactor: 1,
        CustomControlId: READ_ONLY_GRID_CONTROL_ID,
        DisplayNameKey: READ_ONLY_GRID_CONTROL_DISPLAY_NAME_KEY,
        Name: controlId,
        Version: "1.0.0",
        Parameters: getHomePageCustomControlParametersForChart(entityName, viewId),
        ShouldOverrideControlVisible: false,
        isDefaultConfig: true,
    };
}
exports.retrieveDefaultConfigurationForHomePageGridControlForChart = retrieveDefaultConfigurationForHomePageGridControlForChart;
/**
 * Checks whether editable grid needs to be disabled (and instead, use read-only grids) in case this is phone form factor device
 * @returns A boolean indicating if we need to force read-only grid on the current form factor
 */
function forceReadOnlyGridAsDefaultConfiguration() {
    if (!isNullOrUndefined(XrmProxy_1.default) &&
        !isNullOrUndefined(XrmProxy_1.default.Utils) &&
        !isNullOrUndefined(XrmProxy_1.default.Utils.isFeatureEnabled) &&
        XrmProxy_1.default.Utils.isFeatureEnabled("DisableEditableGridControlOnPhone") &&
        !isNullOrUndefined(XrmProxy_1.default.Client.getFormFactor) &&
        XrmProxy_1.default.Client.getFormFactor() === 3 /* Phone */) {
        return true;
    }
    return false;
}
/**
 * Gets the custom control parameters
 * @parameters custom control descriptor parameters
 * @returns The configuration for the subgrid control
 */
function getSubGridCustomControlParameters(parameters, isAssociatedGrid) {
    if (parameters.TargetEntityType === "sharepointdocument") {
        return {
            Grid: {
                Type: ManifestType_1.ManifestType.Grid,
                ViewId: parameters.DefaultViewId || parameters.ViewId,
                TargetEntityType: parameters.TargetEntityType,
                EnableViewPicker: parameters.EnableViewPicker,
                RelationshipName: parameters.RelationshipName,
                Columns: [],
                Primary: true,
                DataSetUIOptions: {
                    displayQuickFind: false,
                    displayIndex: false,
                    displayCommandBar: true,
                    displayViewSelector: true,
                },
            },
            EnableEditing: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
            EnableGroupBy: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
            EnableFiltering: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
        };
    }
    else if (parameters.TargetEntityType === "connection" &&
        parameters.ViewId &&
        (parameters.ViewId.toUpperCase() === SUBGRID_ALL_SALESTEAMMEMBERS_VIEWID ||
            parameters.ViewId.toUpperCase() === SUBGRID_ALL_STAKEHOLDERS_VIEWID) &&
        !forceReadOnlyGridAsDefaultConfiguration()) {
        //Special handling for connection stakeholder and sales team sub grids. However, if this on a phone form factor device, render it as a read-only grid/list.
        return {
            Grid: {
                Type: ManifestType_1.ManifestType.Grid,
                ViewId: parameters.DefaultViewId || parameters.ViewId,
                TargetEntityType: parameters.TargetEntityType,
                EnableViewPicker: parameters.EnableViewPicker,
                RelationshipName: parameters.RelationshipName,
                Columns: [],
                Primary: true,
            },
            EnableEditing: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Yes",
                Primary: false,
            },
            EnableGroupBy: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
            EnableFiltering: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
        };
    }
    else {
        var params = {
            Grid: {
                Type: ManifestType_1.ManifestType.Grid,
                ViewId: parameters.DefaultViewId || parameters.ViewId,
                TargetEntityType: parameters.TargetEntityType,
                EnableViewPicker: parameters.EnableViewPicker,
                RelationshipName: parameters.RelationshipName,
                Columns: [],
                Primary: true,
            },
            EnableEditing: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
            EnableGroupBy: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
            EnableFiltering: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
        };
        if (isAssociatedGrid) {
            params.EnableFiltering.Value = "Yes";
        }
        return params;
    }
}
/**
 * Gets the custom control parameters
 * @entityName entity Name
 * @viewId View Id
 * @returns The configuration for the home page grid control
 */
function getHomePageCustomControlParameters(entityName, viewId) {
    return {
        Grid: {
            Type: ManifestType_1.ManifestType.Grid,
            EntityName: entityName,
            ViewId: viewId,
        },
        EnableEditing: {
            Usage: 1,
            Static: true,
            Type: "Enum",
            Value: "No",
            Primary: false,
        },
        EnableGroupBy: {
            Usage: 1,
            Static: true,
            Type: "Enum",
            Value: "No",
            Primary: false,
        },
        EnableFiltering: {
            Usage: 1,
            Static: true,
            Type: "Enum",
            Value: "Yes",
            Primary: false,
        },
    };
}
/**
 * Gets the custom control parameters
 * @entityName entity Name
 * @viewId View Id
 * @returns The configuration for the home page grid control  for chart
 */
function getHomePageCustomControlParametersForChart(entityName, viewId) {
    return {
        Grid: {
            Type: ManifestType_1.ManifestType.Grid,
            EntityName: entityName,
            ViewId: viewId,
        },
        EnableEditing: {
            Usage: 1,
            Static: true,
            Type: "Enum",
            Value: "No",
            Primary: false,
        },
        EnableGroupBy: {
            Usage: 1,
            Static: true,
            Type: "Enum",
            Value: "No",
            Primary: false,
        },
        EnableFiltering: {
            Usage: 1,
            Static: true,
            Type: "Enum",
            Value: "Yes",
            Primary: false,
        },
    };
}
/**
 * Gets the custom control id
 *  @entityName entity Name
 * @returns The configuration for the home page grid control
 */
function getSubGridCustomControlId(entityName) {
    if (entityName === "sharepointdocument") {
        return SHAREPOINT_GRID_CONTROL_ID;
    }
    else if (entityName === "connection") {
        return GRID_CONTROL_ID;
    }
    else {
        return READ_ONLY_GRID_CONTROL_ID;
    }
}
/**
 *  Gets the default configuration for the chart control on the grid home page
 * @param name The name of the chart control
 * @param entityName The entity type name
 * @param viewId The view id for the chart
 * @param visualizationId The visualization id for the chart
 * @param filterExpression The filter expresion string used to identify the selected chart series
 * @param isUserChart user chart or system chart
 * @param chartDrillDownParameters chart drill down parameters
 * @param isUserView user view or system view
 * @param extraFilters grid page filters coming from other controls (grid filters, jump bar filters, etc.)
 * @param linkEntities This is only used by Queue Item filters.
 * 	Linked entities and attributes are available in the view xml in most cases, but Queue Item filters add filters on linked entity Queue.
 * 	We need to add linked entities to make the filter work properly.
 * @returns The configuration for the chart control on the grid home page
 */
function retrieveDefaultConfigurationForHomePageChartControl(name, entityName, viewId, visualizationId, refreshCounter, filterExpression, isUserChart, chartDrillDownParameters, isUserView, extraFilters, linkEntities) {
    var filterExpressionString = filterExpression ? filterExpression : null;
    var isUserChartString = isUserChart ? "true" : "false";
    var isUserViewString = isUserView ? "true" : "false";
    return {
        FormFactor: 1,
        CustomControlId: name,
        Name: name,
        Version: "1.0.0",
        Parameters: {
            ChartDataSet: {
                Type: ManifestType_1.ManifestType.Grid,
                EntityName: entityName,
                ViewId: viewId,
                VisualizationId: visualizationId,
                ChartGridMode: "Chart",
                HighchartFilterExpression: filterExpressionString,
                ExtraFilters: extraFilters,
                IsUserChart: isUserChartString,
                ChartDrillDownParameters: chartDrillDownParameters,
                FirstDataRequestType: 2 /* FirstDataRequestByPage */,
                IsUserView: isUserViewString,
                RefreshInput: {
                    Value: refreshCounter,
                    Static: true,
                },
                LinkingInput: {
                    Value: linkEntities,
                    Static: true,
                },
            },
            Parent: {
                Type: "SingleLine.Text",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: "DataSetHost",
            },
            ChartSelectorMode: {
                Type: "Enum",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: "ChartSelector",
            },
            CommandMode: {
                Type: "Enum",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: "GridChartCommand",
            },
            EnableExpandButton: {
                Type: "Enum",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: "Yes",
            },
        },
        ShouldOverrideControlVisible: false,
        isDefaultConfig: true,
    };
}
exports.retrieveDefaultConfigurationForHomePageChartControl = retrieveDefaultConfigurationForHomePageChartControl;
/**
 * Gets the default configuration for the powerbi control on the form
 * @param parameters The parameters for the control in the form descriptor
 * @returns The configuration for the powerbi control on the form
 */
function retrieveContainerControlForFormPowerBIControl(parameters, FormFactor, Name) {
    return {
        FormFactor: FormFactor,
        CustomControlId: Name,
        Name: POWERBI_ID,
        Version: "1.0.0",
        Parameters: {
            value: {
                TileUrl: parameters.TileUrl,
                PowerBIGroupId: parameters.PowerBIGroupId,
                PowerBIDashboardId: parameters.PowerBIDashboardId,
                PowerBIType: parameters.Type,
                PowerBIReportId: parameters.PowerBIReportId,
                PowerBIFilter: parameters.PowerBIFilter,
                EnableInMobile: parameters.EnableInMobile || false,
                TileId: parameters.TileId,
                IsPowerBIEnabled: parameters.IsPowerBIEnabled || true,
                Type: ManifestType_1.ManifestType.PowerBI,
                Primary: true,
                FirstPartyIntegrationSiteUrl: parameters.FirstPartyIntegrationSiteUrl,
                Tenant: parameters.Tenant,
            },
        },
        ShouldOverrideControlVisible: false,
        isDefaultConfig: true,
    };
}
exports.retrieveContainerControlForFormPowerBIControl = retrieveContainerControlForFormPowerBIControl;
/**
 * Gets the default configuration for the chart control on the Quick Form control
 * @param parameters The parameters for the control in the form descriptor
 * @param dataRequestType The data request type for chart control
 * @returns The configuration for the chart control on the form
 */
function retrieveDefaultConfigurationForQuickFormChartControl(parameters, dataRequestType) {
    if (dataRequestType === void 0) { dataRequestType = 1 /* FirstDataRequestByControl */; }
    var configuration = retrieveDefaultConfigurationForFormChartControl(parameters, dataRequestType);
    configuration.Parameters.Parent.Value = "QuickViewForm";
    return configuration;
}
exports.retrieveDefaultConfigurationForQuickFormChartControl = retrieveDefaultConfigurationForQuickFormChartControl;
/**
 * Gets the default configuration for the chart control on the form
 * @param parameters The parameters for the control in the form descriptor
 * @returns The configuration for the chart control on the form
 */
function retrieveDefaultConfigurationForFormChartControl(parameters, firstDataRequestType) {
    if (firstDataRequestType === void 0) { firstDataRequestType = 2 /* FirstDataRequestByPage */; }
    var chartSelectorModeValue = parameters.EnableChartPicker && parameters.EnableChartPicker === "true" ? "ChartSelector" : "ChartTitle";
    var viewSelectorModeValue = parameters.EnableViewPicker && parameters.EnableViewPicker === "true" ? "ViewSelector" : "ViewTitle";
    return {
        FormFactor: 1,
        CustomControlId: CHART_CONTROL_ID,
        Name: CHART_CONTROL_ID,
        Version: "1.0.0",
        Parameters: {
            ChartDataSet: {
                Type: ManifestType_1.ManifestType.Grid,
                EntityName: parameters.TargetEntityType,
                ViewId: parameters.ViewId,
                VisualizationId: parameters.VisualizationId,
                ChartGridMode: "Chart",
                HighchartFilterExpression: null,
                IsUserChart: parameters.IsUserChart,
                FirstDataRequestType: firstDataRequestType,
                IsUserView: parameters.IsUserView,
                ViewIds: parameters.ViewIds,
                RelationshipName: parameters.RelationshipName,
                EnableViewPicker: parameters.EnableViewPicker === "true",
                EnableChartPicker: parameters.EnableChartPicker === "true",
            },
            Parent: {
                Type: "SingleLine.Text",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: "EditForm",
            },
            ChartSelectorMode: {
                Type: "Enum",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: chartSelectorModeValue,
            },
            ViewSelectorMode: {
                Type: "Enum",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: viewSelectorModeValue,
            },
            CommandMode: {
                Type: "Enum",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: "FormChartCommand",
            },
            EnableExpandButton: {
                Type: "Enum",
                Primary: false,
                Static: true,
                Usage: 1,
                Value: "Yes",
            },
        },
        ShouldOverrideControlVisible: false,
        isDefaultConfig: true,
    };
}
exports.retrieveDefaultConfigurationForFormChartControl = retrieveDefaultConfigurationForFormChartControl;
/**
 * Retrieve a custom control configuration based on the control's type
 * @param name The name of the control
 * @param dataFieldName The field name of the control
 * @param type The type of the control, presented in a "<Main type>.<Format>" fashion
 * @param descriptor Control descriptor
 * @param entityTypeName The entity type of the form containing this control, if applicable
 * @param classId string containing guid class Id for the given control. This parameter
 * is used for the scenario when field control is not implemented and DummyControl is shown instead.
 * Dummy control uses class ID to show which exactly control is not implemented. Dummy control is a
 * temporary solution and will be removed at some point, but there is no precise timeline for that.
 */
function retrieveDefaultConfigurationForControl(name, dataFieldName, type, descriptor, entityTypeName, classId) {
    var configuration;
    if (classId && (GuidHelper_1.areGuidsSame(classId, GRID_CLASS_ID) || GuidHelper_1.areGuidsSame(classId, SUBGRID_CLASS_ID))) {
        configuration = retrieveDefaultConfigurationForSubgridControl(name, descriptor.Parameters);
    }
    else {
        configuration = retrieveDefaultConfigurationForFieldControl(name, dataFieldName, type, entityTypeName, classId, descriptor);
    }
    var primaryParameter = _getPrimaryParameter(configuration);
    if (primaryParameter) {
        extendDefaultValueParameterByControlDescriptor(primaryParameter, descriptor);
    }
    // Add specification parameters to default field section item control configuration
    var fieldSectionItemSpecificationParameters = getFieldSectionItemSpecificationParameters(configuration, classId);
    if (fieldSectionItemSpecificationParameters !== null) {
        Object.assign(configuration.Parameters, fieldSectionItemSpecificationParameters);
    }
    return configuration;
}
exports.retrieveDefaultConfigurationForControl = retrieveDefaultConfigurationForControl;
/**
 * Retrieve manifest data type by its source type for controls.
 * @param {string} srcType The source type of the control.
 * @param {string} srcFormat The source format of the control.
 * @returns The ManifestType of its source type.
 */
function retrieveDataTypeBySourceTypeForControl(type, classId) {
    /// For some reason type now looks like "SingleLine.0" instead of "SingleLine.Text".
    /// Need to investigate this later.
    /// Probably this is just enum value serialized as is to string type.
    var _a = type ? type.split(".") : [null, null], srcType = _a[0], srcFormat = _a[1];
    if (!srcType) {
        srcType = "string";
    }
    if (!srcFormat || srcFormat === "null" || srcFormat === "undefined") {
        srcFormat = classId ? ManifestType_1.ManifestType.ClassIdControlMap[classId] || "text" : "text";
    }
    var dataType;
    switch (srcType) {
        case "boolean":
            dataType = ManifestType_1.ManifestType.TwoOptions;
            break;
        case "customer":
            dataType = ManifestType_1.ManifestType.LookupCustomer;
            break;
        case "datetime":
            switch (srcFormat.toLowerCase()) {
                case "date":
                case "0":
                    // "0", "date"
                    dataType = ManifestType_1.ManifestType.DateAndTimeDateOnly;
                    break;
                case "datetime":
                case "dateandtime":
                case "1":
                    // "1", "datetime":
                    dataType = ManifestType_1.ManifestType.DateAndTimeDateAndTime;
                    break;
                default:
                    dataType = ManifestType_1.ManifestType.DateAndTimeDateOnly;
            }
            break;
        case "decimal":
            dataType = ManifestType_1.ManifestType.Decimal;
            break;
        case "float":
        case "double":
            dataType = ManifestType_1.ManifestType.FP;
            break;
        case "integer":
            switch (srcFormat.toLowerCase()) {
                case "duration":
                case "1":
                    //"1", "duration"
                    dataType = ManifestType_1.ManifestType.WholeDuration;
                    break;
                case "timezone":
                case "2":
                    // "2", "timezone"
                    dataType = ManifestType_1.ManifestType.WholeTimeZone;
                    break;
                case "language":
                case "3":
                    // "3", "language"
                    dataType = ManifestType_1.ManifestType.WholeLanguage;
                    break;
                default:
                    // "0" == "integer.none"
                    dataType = ManifestType_1.ManifestType.WholeNone;
            }
            break;
        /// There is no such CrmDescriptor format...
        case "lookup":
            switch (srcFormat.toLowerCase()) {
                case "connection":
                case "regarding":
                case "1":
                case "2":
                    dataType = ManifestType_1.ManifestType.LookupRegarding;
                    break;
                default:
                    dataType = ManifestType_1.ManifestType.LookupSimple;
            }
            break;
        // type parameter here sometimes looks like "memo.2"
        // So the memo should contain some formats?
        case "memo":
            dataType = ManifestType_1.ManifestType.Multiple;
            break;
        case "money":
            dataType = ManifestType_1.ManifestType.Currency;
            break;
        case "owner":
            dataType = ManifestType_1.ManifestType.LookupOwner;
            break;
        case "partylist":
            dataType = ManifestType_1.ManifestType.LookupPartyList;
            break;
        case "multiselectpicklist":
            dataType = ManifestType_1.ManifestType.MultiSelectPicklist;
            break;
        // CrmDescriptor contain OptionSetFormat, and picklist is a part of it.
        // Possibly should be changed soon.
        case "picklist":
        case "state":
            dataType = ManifestType_1.ManifestType.OptionSet;
            break;
        case "status":
            dataType = ManifestType_1.ManifestType.StatusOptionSet;
            break;
        case "text":
        case "string":
            switch (srcFormat.toLowerCase()) {
                case "email":
                case "0":
                    // "0"
                    dataType = ManifestType_1.ManifestType.SingleLineEmail;
                    break;
                case "textarea":
                case "2":
                    // "2"
                    dataType = ManifestType_1.ManifestType.Multiple;
                    break;
                case "url":
                case "3":
                    // "3"
                    dataType = ManifestType_1.ManifestType.SingleLineURL;
                    break;
                case "tickersymbol":
                case "4":
                    // "4"
                    dataType = ManifestType_1.ManifestType.SingleLineTickerSymbol;
                    break;
                case "phone":
                case "7":
                    // "7":
                    dataType = ManifestType_1.ManifestType.SingleLinePhone;
                    break;
                case "memo":
                    dataType = ManifestType_1.ManifestType.Multiple;
                    break;
                default:
                    // All other formats will be just SingleLine.Text for now.
                    dataType = ManifestType_1.ManifestType.SingleLineText;
            }
            break;
        case "Timer":
            dataType = ManifestType_1.ManifestType.Timer;
            break;
        default:
            dataType = ManifestType_1.ManifestType.SingleLineText;
    }
    return dataType;
}
exports.retrieveDataTypeBySourceTypeForControl = retrieveDataTypeBySourceTypeForControl;
function retrieveContainerControlTypeByControlId(controlId) {
    switch (controlId) {
        case READ_ONLY_GRID_CONTROL_ID:
        case GRID_CONTROL_ID:
            return ContainerControlType.GridContainer;
        case DASHBOARD_CONTROL_ID:
            return ContainerControlType.DashboardContainer;
        case QUICK_FORM_ID:
            return ContainerControlType.QuickCreateForm;
        case FIELD_SECTION_ITEM_ID:
            return ContainerControlType.FieldSectionContainer;
        case TIMELINEWALL_ID:
            return ContainerControlType.TimelineContainer;
        case CHART_CONTROL_ID:
            return ContainerControlType.ChartControl;
        case WEBRESOURCEHTML_ID:
            return ContainerControlType.WebresourceControl;
        case CALENDAR_CONTROL_ID:
            return ContainerControlType.CalendarControl;
        case DUMMY_CONTROL_ITEM_ID:
            return ContainerControlType.DummyControl;
    }
}
exports.retrieveContainerControlTypeByControlId = retrieveContainerControlTypeByControlId;
function retrieveDefaultManifestNameByDataType(dataType, attributes) {
    var manifestName;
    switch (dataType) {
        case "TwoOptions":
            manifestName = "MscrmControls.FieldControls.CheckboxControl";
            break;
        case "Currency":
            manifestName = "MscrmControls.FieldControls.CurrencyControl";
            break;
        case "Decimal":
            manifestName = "MscrmControls.FieldControls.DecimalNumberControl";
            break;
        case "SingleLine.Email":
            manifestName = "MscrmControls.FieldControls.EmailAddressControl";
            break;
        case "FP":
            manifestName = "MscrmControls.FieldControls.FloatingPointNumberInput";
            break;
        case "Whole.Language":
            manifestName = "MscrmControls.FieldControls.LanguagePickerControl";
            break;
        case "OptionSet":
            manifestName = "MscrmControls.FieldControls.OptionSet";
            break;
        case "StatusOptionSet":
            manifestName = "MscrmControls.FieldControls.PicklistStatusControl";
            break;
        case "SingleLine.Phone":
            manifestName = "MscrmControls.FieldControls.PhoneNumberControl";
            break;
        case "SingleLine.Text":
        case "Multiple":
            manifestName = "MscrmControls.FieldControls.TextBoxControl";
            break;
        case "SingleLine.Ticker":
            manifestName = "MscrmControls.FieldControls.TickerSymbolControl";
            break;
        case "Whole.TimeZone":
            manifestName = "MscrmControls.FieldControls.TimeZonePickListControl";
            break;
        case "SingleLine.URL":
            manifestName = "MscrmControls.FieldControls.UrlControl";
            break;
        case "Whole.None":
            manifestName = "MscrmControls.FieldControls.WholeNumberControl";
            break;
        case "Whole.Duration":
            manifestName = "MscrmControls.FieldControls.DurationControl";
            break;
        case "Lookup.PartyList":
        case "Lookup.Regarding":
        case "Lookup.Simple":
        case "Lookup.Owner":
        case "Lookup.Customer":
        case "Lookup.MultiEntity":
            manifestName = retrieveLookupManifestName(dataType, attributes);
            break;
        case "MultiSelectPicklist":
            manifestName = "MscrmControls.MultiSelectPicklist.UpdMSPicklistControl";
            break;
        case "DateAndTime.DateOnly":
        case "DateAndTime.DateAndTime":
            manifestName = "MscrmControls.FieldControls.DateTimeControl";
            break;
        case "Grid":
            manifestName = "MscrmControls.Grid.ReadOnlyGrid";
            break;
        case "SearchWidget":
        case "SearchWidget.SearchWidget":
        case "ReferencePanelSearchWidget":
            manifestName = "MscrmControls.KbSearchControl.KbSearchControl";
            break;
        case "KbArticle":
            manifestName = "MscrmControls.KbArticleControl.KbArticleControl";
            break;
        case "KbContent":
            manifestName = "MscrmControls.KbContentControl.KbContentControl";
            break;
        case "Timer":
            manifestName = "MscrmControls.FieldControls.TimerControl";
            break;
        case ManifestType_1.ManifestType.SingleLineAddress:
            manifestName = BINGMAP_CONTROL_ID;
            break;
        case "SingleLine.TextArea":
        default:
            manifestName = "MscrmControls.FieldControls.DummyControl";
            break;
    }
    manifestName = getManifestFallback(manifestName);
    return manifestName;
}
exports.retrieveDefaultManifestNameByDataType = retrieveDefaultManifestNameByDataType;
function retrieveDefaultManifestByConfiguration(configuration) {
    if (!configuration) {
        return null;
    }
    var primaryParameter = _getPrimaryParameter(configuration);
    if (!primaryParameter) {
        return null;
    }
    return retrieveDefaultManifestNameByDataType(primaryParameter.Type);
}
exports.retrieveDefaultManifestByConfiguration = retrieveDefaultManifestByConfiguration;
/**
 * Check if control should receive legacy DataSet parameter API
 * @param controlManifest Manifest of control to check for legacy support
 */
function isLegacyDataSetControl(controlManifest) {
    //TODO: better way to determine legacy dataset controls
    switch (controlManifest.CustomControlId) {
        case CALENDAR_CONTROL_ID:
        case GRID_CONTROL_ID:
        case READ_ONLY_GRID_CONTROL_ID:
        case TIMELINE_CONTROL_ID:
        case ACTIONCARD_CONTROL_ID: {
            return true;
        }
        default: {
            return false;
        }
    }
}
exports.isLegacyDataSetControl = isLegacyDataSetControl;
/**
 * Creates a quick view form parameter value
 * @param descriptor the Descriptor for this control
 * @param auxInfo auxillary info not included elsewhere on the parameters provided
 */
function createQuickViewFormParameterValue(descriptor, auxInfo) {
    var formId = auxInfo ? auxInfo.quickFormId : "00000000-0000-0000-0000-000000000000";
    var associatedDataField = descriptor ? descriptor.DataFieldName : "";
    return formId + (associatedDataField ? "|" + associatedDataField : "");
}

},{"./GuidHelper":101,"./ManifestType":104,"./XrmProxy":110}],101:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Regular expression for validating a guid string
 * Valid Examples: {12345678-1234-1234-1234-123456789abc}, 12345678-1234-1234-1234-123456789abc}, 12345678-1234-1234-1234-123456789abc, 12345678123412341234123456789abc
 * Invalid: {123456781234-1234-1234-123456789abc}, {12345678-1234-1234-1234-123}
 */
var guidRegex = /^\{?([0-9a-f]{8}(-?)[0-9a-f]{4}\2[a-f\d]{4}\2[0-9a-f]{4}\2[0-9a-f]{12})}?$/;
/**
 * Compare 2 guid strings. Case insensitive. Ignores open curvy brace at the start and close curvy brace at the end of both strings.
 * @param a guid string
 * @param b guid string
 * @return {boolean} `true` if guids are the same, `false` - otherwise.
 */
function areGuidsSame(a, b) {
    var aMatch = guidRegex.exec(a.toLocaleLowerCase());
    var bMatch = guidRegex.exec(b.toLocaleLowerCase());
    return aMatch[1] === bMatch[1];
}
exports.areGuidsSame = areGuidsSame;
/**
 * Generates a new V4 GUID string.
 * @return {string} GUIDv4 string generated using `random()`.
 */
function guidV4String() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0, v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
exports.guidV4String = guidV4String;

},{}],102:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ManifestType_1 = require("./ManifestType");
var DefaultControlMapper_1 = require("./DefaultControlMapper");
/**
 * LearningPath related helper functions to be used by CCF infra to register controls to Learning path
 */
var LearningPathHelper = /** @class */ (function () {
    function LearningPathHelper() {
    }
    LearningPathHelper.registerToLearningPath = function (element, domAttribute, controlId) {
        if (element && domAttribute && controlId) {
            element.setAttribute(domAttribute, controlId);
        }
    };
    /**
     * Generate the learning path control Id for the control
     */
    LearningPathHelper.getLearningPathControlId = function (bagProps) {
        if (!bagProps.configuration) {
            return null;
        }
        var lpControlId = bagProps.configuration.CustomControlId + "|" + bagProps.controlId;
        if (bagProps.personalizationConfiguration) {
            lpControlId += "|" + bagProps.personalizationConfiguration.entityTypeName;
        }
        var containerType = DefaultControlMapper_1.retrieveContainerControlTypeByControlId(bagProps.configuration.CustomControlId);
        switch (containerType) {
            case DefaultControlMapper_1.ContainerControlType.GridContainer:
            case DefaultControlMapper_1.ContainerControlType.ChartControl:
            case DefaultControlMapper_1.ContainerControlType.CalendarControl:
                lpControlId += LearningPathHelper._generateLpControlIdForccDataSetControl(bagProps);
                break;
            case DefaultControlMapper_1.ContainerControlType.DashboardContainer:
            case DefaultControlMapper_1.ContainerControlType.QuickCreateForm:
                if (bagProps.personalizationConfiguration && bagProps.personalizationConfiguration.formGuid) {
                    lpControlId += "|" + bagProps.personalizationConfiguration.formGuid.guid;
                }
                break;
            case DefaultControlMapper_1.ContainerControlType.WebresourceControl:
                lpControlId += LearningPathHelper._generateLpControlIdForWebresource(bagProps);
                break;
            case DefaultControlMapper_1.ContainerControlType.FieldSectionContainer: //Ex : CustomControlId | field.owner | account
            case DefaultControlMapper_1.ContainerControlType.TimelineContainer: //Ex : CustomControlId | Timeline | account
            case DefaultControlMapper_1.ContainerControlType.DummyControl: //Ex : CustomControlId | mapcontrol | account
            /*This handles map control as "customControlId | mapControl" and there can only be one mapControl on a page.
            All other field controls will be handled as default since controlId will hold field's unique name*/
            default:
                break;
        }
        return lpControlId;
    };
    LearningPathHelper._generateLpControlIdForWebresource = function (bagProps) {
        var lpControlId = "";
        var parameters = bagProps.configuration.Parameters;
        for (var name_1 in parameters) {
            var parameter = parameters[name_1];
            if (parameter.Type === ManifestType_1.ManifestType.WebResourceHtmlControl) {
                var webresourceParam = parameter;
                lpControlId += "|" + webresourceParam.ControlId;
            }
        }
        return lpControlId;
    };
    LearningPathHelper._generateLpControlIdForccDataSetControl = function (bagProps) {
        var lpControlId = "";
        var parameters = bagProps.configuration.Parameters;
        for (var name_2 in parameters) {
            var parameter = parameters[name_2];
            if (parameter.Type === ManifestType_1.ManifestType.Grid) {
                var dataSetParam = parameter;
                if (dataSetParam.ViewId) {
                    lpControlId += "|" + dataSetParam.ViewId;
                }
                // Dataset/Chart inside a dashboard
                if (dataSetParam.VisualizationId) {
                    lpControlId += "|" + dataSetParam.VisualizationId;
                }
                // Main grid
                if (dataSetParam.EntityName) {
                    lpControlId += "|" + dataSetParam.EntityName;
                }
                // Subgrid
                if (dataSetParam.RelationshipName) {
                    lpControlId += "|" + dataSetParam.RelationshipName;
                }
            }
        }
        return lpControlId;
    };
    LearningPathHelper.LEARNING_PATH_ATTRIBUTE = "data-lp-id";
    return LearningPathHelper;
}());
exports.LearningPathHelper = LearningPathHelper;

},{"./DefaultControlMapper":100,"./ManifestType":104}],103:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DefaultDesignLanguage_1 = require("../Models/PropertyFallbacks/Design/DefaultDesignLanguage");
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/**
 * ManifestDesignHelper is designed to be a singleton class used to track design objects for a given manifest
 */
var ManifestDesignHelper = /** @class */ (function () {
    function ManifestDesignHelper() {
        this._map = {};
    }
    ManifestDesignHelper.prototype.GetThemeData = function (manifest, theme /** This will be replaced post-prototype with a more amorphous object **/) {
        if (!theme) {
            theme = DefaultDesignLanguage_1.DEFAULT_FLUID_DL;
        }
        var name = manifest.ConstructorName;
        if (this._map.hasOwnProperty(name)) {
            return this._map[name];
        }
        if (!manifest.DesignMap || !manifest.DesignMap.DesignMap)
            return {};
        var newMap = {};
        for (var key in manifest.DesignMap.DesignMap) {
            var value = manifest.DesignMap.DesignMap[key];
            var mapping = value.split(".");
            var newValue = theme;
            for (var i = 0; i < mapping.length; i++) {
                if (newValue) {
                    newValue = newValue[mapping[i]];
                }
                else {
                    newValue = value;
                    break;
                }
            }
            // Default to key if it can't be found in the map
            newMap[key] = newValue || value;
        }
        this._map[name] = newMap;
        return newMap;
    };
    return ManifestDesignHelper;
}());
exports.ManifestDesignHelper = ManifestDesignHelper;
//singleton instance of telemetry
var instance = new ManifestDesignHelper();
exports.default = instance;

},{"../Models/PropertyFallbacks/Design/DefaultDesignLanguage":88}],104:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Custom Control ManifestType candidates
 */
var ManifestType = /** @class */ (function () {
    function ManifestType() {
    }
    ManifestType.TwoOptions = "TwoOptions";
    ManifestType.DateAndTimeDateOnly = "DateAndTime.DateOnly";
    ManifestType.DateAndTimeDateAndTime = "DateAndTime.DateAndTime";
    ManifestType.Decimal = "Decimal";
    ManifestType.FP = "FP";
    ManifestType.WholeNone = "Whole.None";
    ManifestType.WholeDuration = "Whole.Duration";
    ManifestType.WholeTimeZone = "Whole.TimeZone";
    ManifestType.WholeLanguage = "Whole.Language";
    ManifestType.LookupSimple = "Lookup.Simple";
    ManifestType.LookupCustomer = "Lookup.Customer";
    ManifestType.LookupOwner = "Lookup.Owner";
    ManifestType.LookupPartyList = "Lookup.PartyList";
    ManifestType.LookupRegarding = "Lookup.Regarding";
    ManifestType.LookupMultiEntity = "Lookup.MultiEntity";
    ManifestType.MultiSelectPicklist = "MultiSelectPicklist";
    ManifestType.Multiple = "Multiple";
    ManifestType.Currency = "Currency";
    ManifestType.OptionSet = "OptionSet";
    ManifestType.StatusOptionSet = "StatusOptionSet";
    ManifestType.EntityNameOptionSet = "EntityNameOptionSet";
    ManifestType.SingleLineEmail = "SingleLine.Email";
    ManifestType.SingleLineText = "SingleLine.Text";
    ManifestType.SingleLineTextArea = "SingleLine.TextArea";
    ManifestType.SingleLineURL = "SingleLine.URL";
    ManifestType.SingleLineTickerSymbol = "SingleLine.Ticker";
    ManifestType.SingleLinePhone = "SingleLine.Phone";
    ManifestType.Grid = "Grid";
    ManifestType.BusinessProcessFlow = "BusinessProcessFlow";
    ManifestType.WebResourceHtmlControl = "WebResource.HTML";
    ManifestType.TimelineWall = "TimelineWall";
    ManifestType.QuickForm = "Form.QuickForm";
    ManifestType.Card = "Card";
    ManifestType.Dashboard = "Dashboard";
    ManifestType.Search = "Search";
    ManifestType.SearchWidget = "SearchWidget.SearchWidget";
    ManifestType.KbArticle = "KbArticle";
    ManifestType.KbContent = "KbContent";
    ManifestType.PowerBI = "PowerBI";
    ManifestType.MicrosoftFlow = "MicrosoftFlow";
    ManifestType.EmailEngagementRecipientActivity = "emailrecipientactivitycontrol";
    ManifestType.ReferencePanelSearchWidget = "SearchWidget.ReferencePanelSearchWidget";
    ManifestType.Timer = "Timer";
    ManifestType.SingleLineAddress = "SingleLine.Address";
    ManifestType.GlobalFilter = "GlobalFilter";
    ManifestType.AppliedFilters = "AppliedFilters";
    ManifestType.ReferencePanel = "ReferencePanel";
    ManifestType.EmailEngagementActions = "emailengagementactionscontrol";
    ManifestType.SocialInsightsControl = "SocialInsightsControl";
    ManifestType.ClassIdControlMap = {
        "fd2a7985-3187-444e-908d-6624b21f69c0": "iframe",
        "270bd3db-d9af-4782-9025-509e298dec0a": "lookup",
        "f3015350-44a2-4aa0-97b5-00166532b5e9": "regarding",
        "cbfb742c-14e7-4a17-96bb-1a13f7f64aa2": "partylist",
        "aa987274-ce4e-4271-a803-66164311a958": "duration",
        "c6d124ca-7eda-4a60-aea9-7fb8d318b68f": "integer",
        "0d2c745a-e5a8-4c8f-ba63-c6d3bb604660": "float",
        "533b9e00-756b-4312-95a0-dc888637ac78": "money",
        "c3efe0c3-0ec6-42be-8349-cbd9079dfd8e": "decimal",
        "ada2203e-b4cd-49be-9ddf-234642b43b52": "email",
        "6f3fb987-393b-4d2d-859f-9d0f0349b6ad": "emailbody",
        "4273edbd-ac1d-40d3-9fb2-095c621b552d": "text",
        "e0dece4b-6fc8-4a8f-a065-082708572369": "memo",
        "71716b6c-711e-476c-8ab8-5d11542bfb47": "url",
        "1e1fc551-f7a8-43af-ac34-a8dc35c7b6d4": "tickersymbol",
        "3ef39988-22bb-4f0b-bbbe-64b5a3748aee": "picklist",
        "5d68b988-0661-4db2-bc3e-17598ad3be6c": "status",
        "5b773807-9fb2-42db-97c3-7a91eff8adff": "datetime",
        "67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed": "boolean",
        "b0c6723a-8503-4fd7-bb28-c8a06ac933c2": "boolean",
        "671a9387-ca5a-4d1e-8ab7-06e39ddcf6b5": "language",
        "e7a81278-8635-4d9e-8d4d-59480b391c5b": "subgrid",
        "7c624a0b-f59e-493d-9583-638d34759266": "timezone",
        "3246f906-1f71-45f7-b11f-d7be0f9d04c9": "connection",
        "821acf1a-7e46-4a0c-965d-fe14a57d78c7": "connectionroleojbjecttypecodelist",
        "9fdf5f91-88b1-47f4-ad53-c11efc01a01d": "webResourceHtml",
        "587cdf98-c1d5-4bde-8473-14a0bc7644a7": "webResourceImage",
        "080677db-86ec-4544-ac42-f927e74b491f": "webResourceSilverlight",
        "8c54228c-1b25-4909-a12a-f2b968bb0d62": "powerBITile",
        "06375649-c143-495e-a496-c962e5b4488e": "notes",
        "5c5600e0-1d6e-4205-a272-be80da87fd42": "quickformcollection",
        "b68b05f0-a46d-43f8-843b-917920af806a": "referencepanelquickformcollection",
        "02d4264b-47e2-4b4c-aa95-f439f3f4d458": "referencepanelsubgrid",
        "1f179106-fa28-4495-961e-f6bd93c21974": "interactionwall",
        "62b0df79-0464-470f-8af7-4483cfea0c7d": "bingmap",
        "86b9e25e-695e-4fef-ac69-f05cfa96739c": "socialInsight",
        "76b9e25e-695e-4fef-ac69-f05cfa96739c": "orgInsights",
        "9c5ca0a1-ab4d-4781-be7e-8dfbe867b87e": "timercontrol",
        "e616a57f-20e0-4534-8662-a101b5ddf4e0": "searchwidget",
        "03c5aed6-ee88-404e-b63c-4c53429c8bfb": "kbarticle",
        "1b9fc842-b45e-4fc1-b080-81e96b6d857f": "kbcontent",
        "7ccd1494-1f7a-4e3a-8bde-f32069daeb9f": "referencepanelsearchwidget",
        "ee9078c8-6946-4e2c-b8f8-35e65f4be6a8": "queuecontainer",
        "f130d8ae-ce5b-43c5-bed1-1a6a5856cf3d": "multiplepiechart",
        "6fae836f-fc01-48de-9b63-9b68a8fd86b8": "tagcontrol",
        "f9a8a302-114e-466a-b582-6771b2ae0d92": "customControl",
        "c8bfbbef-6851-4401-a0cc-7450062fe085": "aci",
        "8c10015a-b339-4982-9474-a95fe05631a5": "phone",
        "d2561f53-b292-42d9-b222-478e40ffe29f": "dashboard",
        "7c7059a6-74d9-4b02-80ad-19bc60426393": "search",
        "39354e4a-5015-4d74-8031-ea9eb73a1322": "label",
        "fff0e632-9d7b-4f21-bbc1-05d1567ad144": "globalfilter",
        "9c310a73-a360-42c5-8943-47a06f1b51ea": "appliedfilters",
    };
    return ManifestType;
}());
exports.ManifestType = ManifestType;

},{}],105:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper class for starting and stopping a performance stopwatch
 */
var PerformanceStopwatch = /** @class */ (function () {
    /**
     * Creates a new PerformanceStopwatch instance.
     * @param event The performance event linked to the stopwatch
     * @param parameters Parameters to pass with the stopwatch
     */
    function PerformanceStopwatch(event, parameters) {
        this._event = event;
        this._parameters = parameters;
    }
    /**
     * Starts the stopwatch
     */
    PerformanceStopwatch.prototype.start = function () {
        this._stop = this._event.startStopwatch(this._parameters);
    };
    /**
     * Stops the stopwatch
     */
    PerformanceStopwatch.prototype.stop = function (params) {
        this._stop(params);
    };
    return PerformanceStopwatch;
}());
exports.PerformanceStopwatch = PerformanceStopwatch;

},{}],106:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */

var Popup_1 = require("../../CommonComponents/Primitive/Popup/Popup");
var RootPopup_1 = require("../../CommonComponents/Primitive/Popup/RootPopup");
/*
 * Popup service, which controls all popups, which was created from standard Custom Control.
 */
var PopupService = /** @class */ (function () {
    /*
     * Constructor method.
     * @param host Instance of Custom Controls wrapper.
     */
    function PopupService(host) {
        /*
         * Map which contains all created Popups.
         */
        this._popups = {};
        this._host = host;
    }
    /*
     * Helper method for setting key prop for React components in array.
     * @param name the name of the popup
     * @returns an object with the name mapped to the key "key"
     */
    PopupService.prototype._getKeyName = function (name) {
        return {
            key: name,
        };
    };
    /*
     * Creates new Popup instance.
     * @returns a JSX element of the popup
     */
    PopupService.prototype._createPopup = function (props) {
        return React.createElement(Popup_1.Popup, Object(Object.assign({}, props, this._getKeyName(props.name))));
    };
    /*
     * Create a new popup
     * @param props Properties for Popup.
     */
    PopupService.prototype.createPopup = function (props) {
        if (props.name) {
            this._popups[props.name] = this._createPopup(props);
            this._host.forceUpdate();
        }
    };
    /*
     * Open a new popup
     * @param name Name of a Popup to open.
     */
    PopupService.prototype.openPopup = function (name) {
        if (name === void 0) { name = ""; }
        if (this._popups[name]) {
            var props = this._popups[name].props;
            this._popups[name] = this._createPopup(Object.assign({}, props, { popupToOpen: name }));
            this._host.forceUpdate();
        }
    };
    /*
     * Close a popup
     * @param name Name of a Popup to close.
     */
    PopupService.prototype.closePopup = function (name) {
        if (name === void 0) { name = ""; }
        if (this._popups[name]) {
            var props = this._popups[name].props;
            this._popups[name] = this._createPopup(Object.assign({}, props, { popupToOpen: "" }));
            this._host.forceUpdate();
        }
    };
    /*
     * Update a given popup's props
     * @param name Name of a Popup to update.
     * @param newProps New properties of Popup.
     */
    PopupService.prototype.updatePopup = function (name, newProps) {
        if (name === void 0) { name = ""; }
        if (this._popups[name]) {
            var props = this._popups[name].props;
            this._popups[name] = this._createPopup(Object.assign({}, props, newProps));
            this._host.forceUpdate();
        }
    };
    /*
     * Delete a popup's props
     * @param name Name of a Popup to delete.
     */
    PopupService.prototype.deletePopup = function (name) {
        if (name === void 0) { name = ""; }
        if (this._popups[name]) {
            delete this._popups[name];
            //delete popupId along with deletepopup
            this._popupsId = undefined;
            this._host.forceUpdate();
        }
    };
    /*
     * Retrieve all popups for render
     * @returns an array of JSX elements
     */
    PopupService.prototype.getPopups = function () {
        var result = [];
        for (var key in this._popups) {
            result.push(this._popups[key]);
        }
        return result;
    };
    /**
     * Sets the id of this service object
     * @param id the id to set
     */
    PopupService.prototype.setPopupsId = function (id) {
        this._popupsId = id;
    };
    /**
     * Gets the id of this service object
     * @returns the id of this service object
     */
    PopupService.prototype.getPopupsId = function () {
        return this._popupsId;
    };
    /*
     * Render all available popups present in this service object
     */
    PopupService.prototype.renderPopups = function () {
        var result = this.getPopups();
        var popupsId = this.getPopupsId();
        return result.length ? (React.createElement(RootPopup_1.RootPopup, { id: popupsId, parentCustomControlId: this._host.props.controlId, openPopup: this._host.props.actions.openPopup, closePopup: this._host.props.actions.closePopup, rootNodes: this._host.props.popupRootNodes }, result)) : null;
    };
    return PopupService;
}());
exports.PopupService = PopupService;

},{"../../CommonComponents/Primitive/Popup/Popup":33,"../../CommonComponents/Primitive/Popup/RootPopup":34,"react":undefined}],107:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Implement a stripped down version of MicrosoftAjax to provide the basic functionality without
 * the non-complient code
 */
var StringBuilder = /** @class */ (function () {
    function StringBuilder(initialText) {
        this._text = "";
        if (initialText) {
            this._text = initialText.toString();
        }
    }
    StringBuilder.prototype.append = function (text) {
        this._text += text;
    };
    StringBuilder.prototype.toString = function () {
        return this._text;
    };
    return StringBuilder;
}());
exports.StringBuilder = StringBuilder;

},{}],108:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TelemetryClient is designed to be a singleton class used across the CCF project to trace errors, warnings, and info.
 * It needs to be properly initialized once CustomControlHostProps is available.
 */
var TelemetryClient = /** @class */ (function () {
    function TelemetryClient() {
        //initially false, set to true once _logMessage is overrided
        this._initialized = false;
    }
    /**
     * To be overrided with propertybag's implementation;
     * @param _customControlName Custom Control id
     * @param _control name/id for the control
     * @param _message information about control to be logged
     */
    TelemetryClient.prototype._logMessage = function (_customControlName, _message, _logType) {
        throw "_logMessage is not overrided by actual implementation";
    };
    /**
     * Override _logMessage with actual implementation
     * @param props, which should have props>propBagMethods>utils>logMessage defined
     */
    TelemetryClient.prototype.setProps = function (props) {
        if (!this._initialized &&
            props &&
            props.propBagMethods &&
            props.propBagMethods.utils &&
            props.propBagMethods.utils.logMessage) {
            this._logMessage = props.propBagMethods.utils.logMessage;
            this._initialized = true;
        }
    };
    /**
     * Log a message
     * @param control name/id for the control
     * @param message information about control to be logged
     */
    TelemetryClient.prototype.log = function (control, message) {
        if (this._initialized) {
            //LogType.Log
            this._logMessage(control, message, 3);
        }
    };
    /**
     * Create a warning message about the control
     * @param control name/id for the control
     * @param message information about control to be logged
     */
    TelemetryClient.prototype.warn = function (control, message) {
        if (this._initialized) {
            this._logMessage(control, message, 2);
        }
    };
    /**
     * Create a error message about the control
     * @param control name/id for the control
     * @param message information about control to be logged
     */
    TelemetryClient.prototype.error = function (control, message) {
        if (this._initialized) {
            this._logMessage(control, message, 1);
        }
    };
    return TelemetryClient;
}());
exports.TelemetryClient = TelemetryClient;
//singleton instance of telemetry
var instance = new TelemetryClient();
exports.default = instance;

},{}],109:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var XrmProxy_1 = require("./XrmProxy");
var EVENT_NAME = "uci_controlframework_usage";
var COMPONENT_NAME = "CustomControlFramework";
exports.COMPONENT_NAME = COMPONENT_NAME;
/**
 * TelemetryManager is designed to be a singleton class used in CCF to get access to report event, event success and failure.
 */
var TelemetryManager = /** @class */ (function () {
    function TelemetryManager() {
    }
    TelemetryManager.prototype.reportUsage = function (props, status) {
        var usageEvent = {
            eventName: EVENT_NAME,
            eventParameters: this.generateEventParams(props, null, null, status),
        };
        XrmProxy_1.default.Reporting.reportEvent(usageEvent);
    };
    TelemetryManager.prototype.reportEventFailure = function (props, exception, ApiName, parentId, suggestedMitigation, failureType) {
        var telemetryComponentName = props.manifest ? props.manifest.ConstructorName : props.configuration.CustomControlId;
        if (failureType && failureType === "ControlFramework") {
            telemetryComponentName = COMPONENT_NAME + "." + telemetryComponentName;
        }
        XrmProxy_1.default.Reporting.reportFailure(telemetryComponentName, exception, suggestedMitigation, this.generateEventParams(props, ApiName, parentId));
    };
    TelemetryManager.prototype.reportEventSuccess = function (props, ApiName) {
        var telemetryComponentName = props.manifest ? props.manifest.ConstructorName : props.configuration.CustomControlId;
        telemetryComponentName = COMPONENT_NAME + "." + telemetryComponentName;
        XrmProxy_1.default.Reporting.reportSuccess(telemetryComponentName, this.generateEventParams(props, ApiName));
    };
    /**
     * Generate Telemetry reporting event parameters
     * @param apiName name of the control lifecycle event
     * @param apiParams parameters of the control lifecycle events
     */
    TelemetryManager.prototype.generateEventParams = function (props, apiName, parentId, status) {
        var eventParams = [];
        var ControlName = {
            name: "ControlName",
            value: props ? props.controlId : "",
        };
        var ControlId = {
            name: "ControlId",
            value: props && props.manifest ? props.manifest.CustomControlId : "",
        };
        var APIName = {
            name: "APIName",
            value: apiName,
        };
        var HostPage = {
            name: "HostPage",
            value: props ? props.pageType : "",
        };
        var NumberOfResources = {
            name: "ResourceArrayLength",
            value: props && props.manifest ? props.manifest.Properties.Resources.length : "",
        };
        eventParams.push(ControlName);
        eventParams.push(ControlId);
        eventParams.push(HostPage);
        eventParams.push(NumberOfResources);
        if (status) {
            var Status = {
                name: "ControlLoadStatus",
                value: status,
            };
            eventParams.push(Status);
        }
        if (apiName) {
            eventParams.push(APIName);
        }
        if (parentId) {
            var ParentCCContext = {
                name: "ParentCCContext",
                value: parentId,
            };
            eventParams.push(ParentCCContext);
        }
        if (props.propBagData) {
            var Entity = {
                name: "Entity",
                value: props.propBagData && props.propBagData.modeData ? props.propBagData.modeData.entityTypeName : null,
            };
            eventParams.push(Entity);
        }
        return eventParams;
    };
    return TelemetryManager;
}());
exports.TelemetryManager = TelemetryManager;
var instance = new TelemetryManager();
exports.default = instance;

},{"./XrmProxy":110}],110:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * XrmProxy is designed to be a singleton class used in UClient to get access to Client Api functions without an actions
 */
var XrmProxy = /** @class */ (function () {
    function XrmProxy() {
        this._userSettings = {
            userId: null,
            getTimeZoneOffsetMinutes: null,
            isHighContrastEnabled: null,
            isRTL: null,
            languageId: null,
            userName: null,
            securityRoles: null,
            pagingLimit: null,
        };
        this._orgSettings = {
            languageId: null,
            uniqueName: null,
            isAutoSaveEnabled: null,
            attributes: null,
        };
        this._utils = {
            beginSecureSessionForResource: null,
            getEntityMetadata: null,
            getEntitiesMetadata: null,
            getResourceString: null,
            isFeatureEnabled: null,
            lookupObjects: null,
            getEntityName: null,
            getFormId: null,
            canOpenUrl: null,
        };
        this._page = {
            getClientUrl: null,
        };
        this._reporting = {
            reportSuccess: null,
            reportFailure: null,
            reportEvent: null,
        };
        this._diagnostics = {
            traceError: null,
            traceWarning: null,
            traceInfo: null,
            traceDebug: null,
        };
        this._client = {
            getClient: null,
            getClientState: null,
            getFormFactor: null,
        };
        this._applicationUI = {
            addGlobalNotification: null,
            clearGlobalNotification: null,
            clearGlobalNotifications: null,
        };
        this._webApiContext = {
            online: {
                retrieveRecord: null,
                retrieveMultipleRecords: null,
                updateRecord: null,
                createRecord: null,
                deleteRecord: null,
                execute: null,
                executeMultiple: null,
            },
            offline: {
                retrieveRecord: null,
                retrieveMultipleRecords: null,
                updateRecord: null,
                createRecord: null,
                deleteRecord: null,
                execute: null,
                executeMultiple: null,
            },
        };
        this._initialized = false;
    }
    Object.defineProperty(XrmProxy.prototype, "Initialized", {
        /**
         * Getters and setters
         */
        get: function () {
            return this._initialized;
        },
        set: function (value) {
            this._initialized = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "OrgSettings", {
        get: function () {
            return this._orgSettings;
        },
        set: function (value) {
            this._orgSettings = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "UserSettings", {
        get: function () {
            return this._userSettings;
        },
        set: function (value) {
            this._userSettings = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "Offline", {
        get: function () {
            return this._offline;
        },
        set: function (value) {
            this._offline = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "Utils", {
        get: function () {
            return this._utils;
        },
        set: function (value) {
            this._utils = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "Page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "Reporting", {
        get: function () {
            return this._reporting;
        },
        set: function (value) {
            this._reporting = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "Diagnostics", {
        get: function () {
            return this._diagnostics;
        },
        set: function (value) {
            this._diagnostics = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XrmProxy.prototype, "Client", {
        get: function () {
            return this._client;
        },
        set: function (value) {
            this._client = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * set the user settings
     * @param {ControlAndClientApiInterfaces.UserSettings} userSettings the user settings
     */
    XrmProxy.prototype.setUserSettings = function (userSettings) {
        this._userSettings = userSettings;
    };
    /**
     * set the organization settings
     * @param {ControlAndClientApiInterfaces.UserSettings} userSettings the user settings
     */
    XrmProxy.prototype.setOrgSettings = function (orgSettings) {
        this._orgSettings = orgSettings;
    };
    /**
     * set the offline settings
     * @param {ControlAndClientApiInterfaces.OfflineSettings} offlineUtils the offline utils
     */
    XrmProxy.prototype.setOffline = function (offline) {
        this._offline = offline;
    };
    XrmProxy.prototype.setUtils = function (utilities) {
        this._utils = utilities;
    };
    XrmProxy.prototype.setPage = function (page) {
        this._page = page;
    };
    XrmProxy.prototype.setReporting = function (reporting) {
        this._reporting = reporting;
    };
    XrmProxy.prototype.setDiagnostics = function (diagnostics) {
        this._diagnostics = diagnostics;
    };
    XrmProxy.prototype.setClient = function (client) {
        this._client = client;
    };
    /**
     * set the navigation context
     * @param {ControlAndClientApiInterfaces.Navigation} xrmNavigation the navigation context
     */
    XrmProxy.prototype.setNavigationContext = function (xrmNavigation) {
        this._navigationContext = xrmNavigation;
    };
    /**
     * set the Device context
     * @param {ControlAndClientApiInterfaces.Device} xrmDevice the device context
     */
    XrmProxy.prototype.setDeviceContext = function (xrmDevice) {
        this._deviceContext = xrmDevice;
    };
    /**
     * set the External Context context
     * @param {ControlAndClientApiInterfaces.ExternalContext} The external context
     */
    XrmProxy.prototype.setExternalContext = function (xrmExternalContext) {
        this._externalContext = xrmExternalContext;
    };
    XrmProxy.prototype.setApplicationUI = function (applicationUI) {
        this._applicationUI = applicationUI;
    };
    /**
     * sets the web api
     * @param webApi The web api
     */
    XrmProxy.prototype.setWebApi = function (webApi) {
        this._webApiContext = webApi;
    };
    /**
     * Individual functions on the XrmProxy so the 'this' context on the original function can be maintained
     */
    /**
     * Opens an entity form or quick create form.
     * @param options entity form options.
     * @param parameters entity form parameters.
     * @returns promise defining success or failure of operation
     */
    XrmProxy.prototype.openForm = function (options, parameters) {
        return this._navigationContext.openForm(options, parameters);
    };
    /**
     * Open url, including file urls.
     * @param url url to be opened.
     * @param options window options for the url.
     */
    XrmProxy.prototype.openUrl = function (url, options) {
        return this._navigationContext.openUrl(url, options);
    };
    /**
     * Open a file.
     * @param file file to be opened description.
     * @param options Options for openFile.
     */
    XrmProxy.prototype.openFile = function (file, options) {
        return this._navigationContext.openFile(file, options);
    };
    /**
     * Opens Alert Dialog
     * @param alertStrings Strings to be used in alert dialog
     * @param options Dialog options
     * @returns promise defining success or failure of operation
     */
    XrmProxy.prototype.openAlertDialog = function (alertStrings, options) {
        return this._navigationContext.openAlertDialog(alertStrings, options);
    };
    /**
     * Opens Confirm Dialog
     * @param confirmStrings String which will be used in the dialog
     * @param options Options for the dialog
     * @returns promise defining success or failure of operation. the success case returns a boolean specifying if yes or no button where pressed
     */
    XrmProxy.prototype.openConfirmDialog = function (confirmStrings, options) {
        return this._navigationContext.openConfirmDialog(confirmStrings, options);
    };
    /**
     * Opens a Dialog
     * @param dialogName Unique name of the dialog
     * @param dialogArguments Input arguments which needs to be passed
     * @param options Dialog options
     * @returns promise defining success or failure of operation
     */
    XrmProxy.prototype.openDialog = function (name, options, parameters) {
        return this._navigationContext.openDialog(name, options, parameters);
    };
    /**
     * Opens Error Dialog
     * @param options Dialog options
     * @returns promise defining close or cancel response.
     */
    XrmProxy.prototype.openErrorDialog = function (options) {
        return this._navigationContext.openErrorDialog(options);
    };
    /**
     * ClientAPI: Opens a task flow.
     * @param name name of the task flow.
     * @param options task flow options.
     * @param parameters task flow parameters.
     * @returns promise defining success or failure of operation
     */
    XrmProxy.prototype.openTaskFlow = function (name, options, parameters) {
        return this._navigationContext.openTaskFlow(name, options, parameters);
    };
    /**
     * ClientAPI: Opens an HTML web resource.
     * @param name The name of the HTML web resource to open.
     * @param options Window options for the web resource.
     * @param data Data to be passed into the data parameter.
     */
    XrmProxy.prototype.openWebResource = function (name, options, data) {
        return this._navigationContext.openWebResource(name, options, data);
    };
    /**
     * Capture image.
     * @param options capture picture options.
     */
    XrmProxy.prototype.captureImage = function (options) {
        return this._deviceContext.captureImage(options);
    };
    /**
     * Capture audio.
     */
    XrmProxy.prototype.captureAudio = function () {
        return this._deviceContext.captureAudio();
    };
    /**
     * Capture video.
     */
    XrmProxy.prototype.captureVideo = function () {
        return this._deviceContext.captureVideo();
    };
    /**
     * Pick one or more files from device
     * @param options file pick options
     */
    XrmProxy.prototype.pickFile = function (options) {
        return this._deviceContext.pickFile(options);
    };
    /**
     * Invoke camera to scan Barcode and returns the Scanned Barcode value as string
     * In case of error, returns the ErrorResponse.
     * @returns A deferred containing the Scanned Barcode value. Or, error response object.
     */
    XrmProxy.prototype.getBarcodeValue = function () {
        return this._deviceContext.getBarcodeValue();
    };
    /**
     * Returns the current geolocation object.
     * In case of error, returns the error object.
     * @returns A deferred containing cordova geolocation object. Or, the error object.
     */
    XrmProxy.prototype.getCurrentPosition = function () {
        return this._deviceContext.getCurrentPosition();
    };
    /**
     * Retrieves descriptors for all available external contexts.
     * @return {Collection.ItemCollection<ExternalContextDescriptor>} A collection of the available external contexts.
     */
    XrmProxy.prototype.getAvailableExternalContexts = function () {
        return this._externalContext.getAvailableExternalContexts();
    };
    /**
     * Retrieves a property from an external context.
     * @param {string} externalContextId - The context from which to retrieve the property
     * @param {string} string - The property to retrieve
     * @param {ExternalContextPropertyOptions} [options] - Optional. Any additional options for retrieving the property.
     * @return {Promise<ExternalContextResult>} A promise for the external context property
     */
    XrmProxy.prototype.getExternalContextProperty = function (externalContextId, externalContextPropertyId, options) {
        return this._externalContext.getExternalContextProperty(externalContextId, externalContextPropertyId, options);
    };
    /**
     * Invokes an action on an external context.
     * @param {string} externalContextId - The context upon which to invoke the action
     * @param {string} externalContextActionId - The action to invoke
     * @param {ExternalContextActionOptions} [options] - Optional. Any additional options for invoking the action
     * @return {Promise<ExternalContextResult>} A promise for the invocation result
     */
    XrmProxy.prototype.invokeExternalContextAction = function (externalContextId, externalContextActionId, options) {
        return this._externalContext.invokeExternalContextAction(externalContextId, externalContextActionId, options);
    };
    /**
     * Remove an external context property listener.
     * @param {string} externalContextId - The context from which to retrieve the property
     * @param {string} externalContextPropertyId - The property to retrieve
     * @param {string} externalContextPropertyListenerKey - The update listener key
     */
    XrmProxy.prototype.removeExternalContextPropertyListener = function (externalContextId, externalContextPropertyId, listener) {
        return this._externalContext.removeExternalContextPropertyListener(externalContextId, externalContextPropertyId, listener);
    };
    /**
     * Adds the global notification.
     * From ApplicationUI.addGlobalNotification in Client API
     * @param type The type of the notification. GlobalNotificationType in ClientApi.
     * @param level The level of the notification. GlobalNotificationLevel in ClientApi.
     * @param message The message of the notification.
     * @param title The message of the notification.
     * @param action The action of the notification.
     * @param onCloseHandler The onCloseHandler for the notification.
     * @returns promise defining success or failure of operation. the success case returns an Id of opened toast
     */
    XrmProxy.prototype.addGlobalNotification = function (type, level, message, title, action, onCloseHandler) {
        return this._applicationUI.addGlobalNotification(type, level, message, title, action, onCloseHandler);
    };
    /**
     * Clears the global Notification.
     * From ApplicationUI.clearGlobalNotification in Client API
     * @param id The id of a GlobalNotification.
     * @returns promise defining success or failure of operation
     */
    XrmProxy.prototype.clearGlobalNotification = function (id) {
        return this._applicationUI.clearGlobalNotification(id);
    };
    /**
     * Clears the global Notification.
     * From ApplicationUI.clearGlobalNotification in Client API
     * @param id The id of a GlobalNotification.
     * @returns promise defining success or failure of operation
     */
    XrmProxy.prototype.clearGlobalNotifications = function () {
        return this._applicationUI.clearGlobalNotifications();
    };
    XrmProxy.prototype._getWebApiContext = function () {
        return this._client.getClientState() === "Offline" ? this._webApiContext.offline : this._webApiContext.online;
    };
    /**
     * To retrieve a record from offline db
     * @param id guid to retrieve the record
     * @param entityType schema name of the entity type record to create
     * @param options Options having select and expand conditions
     * @returns The deferred object for the result of the operation
     */
    XrmProxy.prototype.retrieveRecord = function (entityType, id, options) {
        return this._getWebApiContext().retrieveRecord(entityType, id, options);
    };
    /**
     * To create a new record in mobile offline db
     * @param data dictionary with attribute schema name and value
     * @param entityType logical name of the entity type record to create
     * @returns The deferred object for the result of the operation.
     */
    XrmProxy.prototype.createRecord = function (entityType, data) {
        return this._getWebApiContext().createRecord(entityType, data);
    };
    /**
     * To update a record in mobile offline db
     * @param id guid to update the record
     * @param data dictionary containing changed attributes with schema name and value
     * @param entityType logical name of the entity type record to update
     * @returns The deferred object for the result of the operation.
     */
    XrmProxy.prototype.updateRecord = function (entityType, id, data) {
        return this._getWebApiContext().updateRecord(entityType, id, data);
    };
    /**
     * To delete the record mobile offline db
     * @param id guid to delete the record
     * @param entityType logical name of the entity type record to delete
     * @returns The deferred object for the result of the operation.
     */
    XrmProxy.prototype.deleteRecord = function (entityType, id) {
        return this._getWebApiContext().deleteRecord(entityType, id);
    };
    /**
     * To retrieve the records from mobile offline db
     * @param entityType Schema name of the entity type record to retrieve
     * @param options Record retrieval options
     * @param maxPageSize Records to be retrieved per page
     * @returns The deferred object for the result of the operation.
     */
    XrmProxy.prototype.retrieveMultipleRecords = function (entityType, options, maxPageSize) {
        return this._getWebApiContext().retrieveMultipleRecords(entityType, options, maxPageSize);
    };
    /**
     * Execute a single request.
     * @param request to be executed
     */
    XrmProxy.prototype.execute = function (request) {
        return this._getWebApiContext().execute(request);
    };
    /**
     * Execute multiple request.
     * @param requests array containing request to be executed
     */
    XrmProxy.prototype.executeMultiple = function (requests) {
        var context = this._getWebApiContext();
        return context.executeMultiple ? context.executeMultiple(requests) : Promise.resolve(null);
    };
    return XrmProxy;
}());
exports.XrmProxy = XrmProxy;
//singleton instance of telemetry
var instance = new XrmProxy();
exports.default = instance;

},{}],111:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var PropTypes = require("prop-types");
var PopupService_1 = require("../Utilities/PopupService");
var PropertyBag_1 = require("../Models/PropertyBag");
var CCFPerformanceTracker_1 = require("../Utilities/CCFPerformanceTracker");
var VirtualComponentTranslator_1 = require("./VirtualComponentTranslator");
var View_1 = require("../../CommonComponents/Primitive/View");
var ManifestType_1 = require("../Utilities/ManifestType");
var LearningPathHelper_1 = require("../Utilities/LearningPathHelper");
var CCFUtilities = require("../Models/CustomControlUtilityPointers");
var MeasuringHandler_1 = require("../../CommonComponents/Common/MeasuringHandler/MeasuringHandler");
var TelemetryClient_1 = require("../Utilities/TelemetryClient");
var TelemetryManager_1 = require("../Utilities/TelemetryManager");
var XrmProxy_1 = require("../Utilities/XrmProxy");
var CommandingWrapper_1 = require("../Models/CommandingWrapper");
var CustomControlHelper_1 = require("../Utilities/CustomControlHelper");
var CustomControlMemoizationHelper_1 = require("./Helpers/CustomControlMemoizationHelper");
var CustomControlAnimationHelper_1 = require("./Helpers/Animation/CustomControlAnimationHelper");
var CustomControlErrorData_1 = require("./Helpers/CustomControlErrorData");
var CustomControlSeeMoreHelper_1 = require("./Helpers/CustomControlSeeMoreHelper");
var CustomControlEntityReference_1 = require("../Models/CustomControlEntityReference");
var PropertyConstants = require("../Models/UpdatedPropertyConstants");
var DefaultControlMapper_1 = require("../Utilities/DefaultControlMapper");
var CustomControlLocHelper_1 = require("./Helpers/CustomControlLocHelper");
var CALENDAR_CONTROL_ID = "MscrmControls.Calendar.CalendarControl";
var GRID_CONTROL_ID = "MscrmControls.Grid.GridControl";
var READONLY_GRID_CONTROL_ID = "MscrmControls.Grid.ReadOnlyGrid";
var CUSTOM_CONTROL_INIT = "CustomControlHostRoot.init";
var CUSTOM_CONTROL_UPDATE_VIEW = "CustomControlHostRoot.updateView";
var CUSTOM_CONTROL_UPDATE_OUTPUTS = "CustomControlHostRoot.updateOutputs";
var CUSTOM_CONTROL_DID_MOUNT = "CustomControlHostRoot.componentDidMount";
var CUSTOM_CONTROL_DID_UPDATE = "CustomControlHostRoot.componentDidUpdate";
var CUSTOM_CONTROL_RENDER = "CustomControlHostRoot.render";
/**
 * Component representing a custom control
 */
var CustomControlHostRoot = /** @class */ (function (_super) {
    __extends(CustomControlHostRoot, _super);
    function CustomControlHostRoot(props) {
        var _this = _super.call(this, props) || this;
        /**
         * The internal status
         */
        _this._internalStatus = 0 /* Uninitialized */;
        /**
         * Debouncer for output change listener
         */
        _this._outputChangedDebouncer = -1;
        /**
         * True if metadata were requested once
         */
        _this._manifestRequestedOnce = false;
        /**
         * True if dynamic data were requested once through parameters
         */
        _this._dynamicDataRequestedOnce = false;
        /**
         * Whether we are currently tracking the dimensions
         */
        _this._trackingDimensions = false;
        /**
         * The measuring subscriber object
         */
        _this._subscriber = null;
        /**
         * The latest recieved output from this control
         */
        _this._latestOutputs = null;
        /**
         * Whether this control should try to ignore updates from itself
         */
        _this._ignoreSelfUpdates = false;
        /**
         * Whether this control is currently rendering
         */
        _this._currentlyRendering = false;
        /**
         * Whether the control should skip it's next update
         */
        _this._skipControlUpdate = false;
        /**
         * An internal state object
         */
        _this._internalState = {};
        /*
         * An internal promise to track work pending
         */
        _this._internalPendingUnsentUpdates = false;
        /*
         * An internal promise to track work pending
         */
        _this._outputChangedInternalInProgress = false;
        /**
         * An internal tracker of updated properties
         */
        _this._updateInternalTracker = [];
        /**
         * Flag to track whether this control contains a child control in see more mode
         */
        _this._descendantInSeeMore = false;
        /**
         * A memoized version of the host data object sent to children/prop bag
         */
        _this._constantHostData = null;
        _this.state = {
            _status: 1 /* Ready */,
        };
        TelemetryClient_1.default.setProps(props);
        _this._updateInternalTracker = _this._updateInternalTracker.concat(props.updatedProperties);
        _this._parentId = CustomControlHelper_1.getParentIdFromProps(props);
        _this._memoHelper = new CustomControlMemoizationHelper_1.CustomControlMemoizationHelper();
        _this._seeMoreHelper = new CustomControlSeeMoreHelper_1.CustomControlSeeMoreHelper();
        _this._errorData = new CustomControlErrorData_1.ErrorData();
        _this._customControlName = _this.props.manifest
            ? _this.props.manifest.ConstructorName
            : _this.props.configuration.CustomControlId;
        _this._componentName = TelemetryManager_1.COMPONENT_NAME + "." + _this._customControlName;
        return _this;
    }
    CustomControlHostRoot.prototype._setGlobalCommandManagerPromise = function (promise) {
        this._globalCommandManagerPromise = promise;
    };
    CustomControlHostRoot.prototype._getGlobalCommandManagerPromise = function () {
        return this._globalCommandManagerPromise;
    };
    CustomControlHostRoot.prototype._getPopupService = function () {
        if (!this._popupService) {
            this._popupService = new PopupService_1.PopupService(this);
        }
        return this._popupService;
    };
    CustomControlHostRoot.prototype._initializeData = function () {
        var _this = this;
        this._internalStatus = 1 /* DataLoading */;
        this._propertyBag = this._createPropertyBag();
        var promises = [];
        var loadRes = this._loadResources();
        if (loadRes) {
            promises.push(loadRes);
        }
        // Start to initialize data parameters to ensure network calls go out early
        this._ensureParameterDynamicDataInitialization(this.props);
        // For legacy data controls (calendar and grid), init needs width and height info.
        // This pattern should not be relied upon for any new controls.
        //TODO [vasaxena]: This needs to be removed
        if (this.props.manifest.ConstructorName === CALENDAR_CONTROL_ID ||
            this.props.manifest.ConstructorName === GRID_CONTROL_ID ||
            this.props.manifest.ConstructorName === READONLY_GRID_CONTROL_ID) {
            this._updateTrackResize(true);
            if ((!this.props.parentDefinedControlProps || !this.props.parentDefinedControlProps.toggleDimensionListener) &&
                this._trackingDimensions) {
                promises.push(new Promise(function (resolve) {
                    _this._resolveWidth = resolve;
                }));
            }
        }
        if (this.props.actions.setXrmObject) {
            this._setXrmObject();
        }
        var initControl = function () {
            CCFPerformanceTracker_1.default.scheduleControlUpdate(function () {
                if (_this._internalStatus !== 5 /* Destroyed */) {
                    _this._internalStatus = 2 /* DataReady */;
                    _this._initializeControl();
                }
            });
        };
        // If we don't need to wait on additional dependencies,
        // initialize immediately
        if (promises.length === 0) {
            initControl();
        }
        else {
            Promise.all(promises).then(initControl, function () {
                var initializeDataFailed = "initialize data failed";
                TelemetryManager_1.default.reportEventFailure(_this.props, new Error(initializeDataFailed), "_initializeData", _this._parentId);
                _this._onControlLoadedError();
                _this._setErrorData(initializeDataFailed + " for control: " + _this.props.manifest.CustomControlId);
                _this.setState({
                    _status: 0 /* InError */,
                });
            });
        }
    };
    /**
     * Returns true if the control is a virtual control or the manifest is missing (virtual until proven otherwise for rendering reasons)
     */
    CustomControlHostRoot.prototype._isVirtual = function () {
        return !this.props.manifest || this.props.manifest.IsVirtual;
    };
    /**
     * Callback triggerd by SeeMoreHelper when necessary
     * @param skipUpdateIfVirtual Boolean indicating if the control update should be skipped if the control is virtual, or the opposite otherwise.
     */
    CustomControlHostRoot.prototype._seeMoreCallback = function (skipUpdateIfVirtual) {
        var isVirtual = this._isVirtual();
        this._skipControlUpdate = skipUpdateIfVirtual ? isVirtual : !isVirtual;
        this._forceUpdate();
    };
    CustomControlHostRoot.prototype._descendantSeeMoreUpdate = function (childInSeeMore) {
        this._descendantInSeeMore = childInSeeMore;
        this._skipControlUpdate = true;
        this._forceUpdate();
    };
    /**
     * Returns styles for component dom element
     */
    CustomControlHostRoot.prototype._getDomIdDivStyleProperties = function (descriptor) {
        var styleProperties = {
            width: "100%",
            maxWidth: this.props.parentDefinedControlProps &&
                !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.width) &&
                this.props.parentDefinedControlProps.width > 0
                ? this.props.parentDefinedControlProps.width + "px"
                : null,
            maxHeight: this.props.parentDefinedControlProps &&
                !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.height) &&
                this.props.parentDefinedControlProps.height > 0
                ? this.props.parentDefinedControlProps.height + "px"
                : null,
        };
        if (descriptor && !descriptor.Visible) {
            styleProperties.display = "none";
        }
        /** else if (this.state._fullscreen)
        {
            styleProperties.height = "100%";
            styleProperties.width = "100%";
            styleProperties.position = "absolute";
            styleProperties.top = "0px";
            styleProperties.left = "0px";
            styleProperties.backgroundColor = "white";

            if (this.props.propBagData.themingData.fullScreenOverrideStyle)
            {
                styleProperties = Object.assign(styleProperties, this.props.propBagData.themingData.fullScreenOverrideStyle);
            }
        }**/
        return styleProperties;
    };
    /*
     * Generate the property bag object
     */
    CustomControlHostRoot.prototype._createPropertyBag = function () {
        var _this = this;
        var externalUtils = {
            getPopupService: this._getPopupService.bind(this),
            forceUpdate: function (callback) {
                CCFPerformanceTracker_1.default.scheduleControlUpdate(_this._forceUpdate.bind(_this, callback));
            },
            bindDOMElement: this._bindDOMElement.bind(this),
            unbindDOMComponent: this._unbindDOMComponent.bind(this),
            updateComponent: this._updateChildComponent.bind(this),
            setGlobalCommandManagerPromise: this._setGlobalCommandManagerPromise.bind(this),
            getGlobalCommandManagerPromise: this._getGlobalCommandManagerPromise.bind(this),
            xrmProxy: XrmProxy_1.default,
        };
        return new PropertyBag_1.PropertyBag(this.props, externalUtils);
    };
    /**
     * Toggle ignoring self caused updates on this control
     * @param val the updated value to set whether to toggle resize tracking
     */
    CustomControlHostRoot.prototype._updateSelfUpdateIgnore = function (val) {
        this._ignoreSelfUpdates = val;
    };
    /**
     * Toggle resize tracking for this control
     * @param val the updated value to set whether to toggle resize tracking
     */
    CustomControlHostRoot.prototype._updateTrackResize = function (val) {
        // If we're already in the state the control was in, do nothing
        if (this._trackingDimensions === val) {
            return;
        }
        this._trackingDimensions = val;
        if (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.toggleDimensionListener) {
            this.props.parentDefinedControlProps.toggleDimensionListener(this._trackingDimensions);
        }
        else {
            if (this._trackingDimensions) {
                if (this._subscriber === null) {
                    this._subscriber = {
                        getComponent: this._getComponent.bind(this),
                        onMeasure: this._updateDimensions.bind(this),
                    };
                }
                MeasuringHandler_1.MeasuringHandler.getInstance().addMeasuringSubscribers(this._subscriber);
                MeasuringHandler_1.MeasuringHandler.getInstance().scheduleMeasuringUpdate();
            }
            else {
                if (this._subscriber) {
                    MeasuringHandler_1.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._subscriber);
                }
                this._forceUpdate();
            }
        }
    };
    /**
     * Retrieve metadata for this custom control
     */
    CustomControlHostRoot.prototype._loadManifest = function () {
        var _this = this;
        if (this.props.manifest || this._manifestRequestedOnce) {
            // manifest available or retrieval already started once
            // This bit should technically never been hit, but leaving as is for redundancy.
            return Promise.resolve(null);
        }
        if (!this.props.actions.loadManifest) {
            // can't load missing manifest
            XrmProxy_1.default.Diagnostics.traceWarning(this._componentName + "._loadManifest", "Manifest not found for control with id " + this.props.controlId);
            return Promise.reject("Manifest not found for control with id " + this.props.controlId);
        }
        this._manifestRequestedOnce = true;
        // create new Promise based on the jQuery's (Web Client) or native es6 (UC)
        return new Promise(function (resolve, reject) {
            _this.props.actions
                .loadManifest(_this.props.configuration.CustomControlId, _this.props.configuration.Name)
                .then(resolve, reject);
        }).then(function () { return null; });
    };
    /**
     * Load the associated resources for this custom control
     */
    CustomControlHostRoot.prototype._loadResources = function () {
        // TODO: hook this into AssetManagement via state tree
        return this.props.actions.loadResources(this.props.manifest);
    };
    /**
     * Creates the Xrm object for the context and saves it if there is not already one
     */
    CustomControlHostRoot.prototype._setXrmObject = function () {
        return this.props.actions.setXrmObject(XrmProxy_1.default);
    };
    /**
     * Bind a new react structure to the given DOMNode
     */
    CustomControlHostRoot.prototype._bindDOMElement = function (virtualComponent, DOMNode) {
        try {
            var newChildComponent = VirtualComponentTranslator_1.VirtualComponentTranslator.renderVirtualComponent(virtualComponent, this.props, this._generateHostData(), this._memoHelper, false);
            if (this._childElements == null) {
                this._childElements = {};
            }
            this._childElements[virtualComponent.getComponentId()] = DOMNode;
            this.props.actions.renderReactSubtree(this, newChildComponent, DOMNode);
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, "_bindDOMElement", this._parentId);
            throw exception;
        }
    };
    CustomControlHostRoot.prototype._updateChildComponent = function () { };
    CustomControlHostRoot.prototype._forceUpdate = function (callback) {
        if (!this._currentlyRendering) {
            var scheduleRender = this.props.propBagData.utilsData.scheduleRender;
            if (scheduleRender) {
                scheduleRender(this.forceUpdate.bind(this, callback));
            }
            else {
                this.forceUpdate(callback);
            }
        }
    };
    /**
     * Unmounts component from DOM node and removes the corresponding view model from the parent's childViewModels
     * dictionary - for standard controls only
     */
    CustomControlHostRoot.prototype._unbindDOMComponent = function (componentId) {
        var success = false;
        if (this._childElements != null) {
            var DOMElement = this._childElements[componentId];
            if (DOMElement != null) {
                success = ReactDOM.unmountComponentAtNode(DOMElement);
                if (success) {
                    this.props.actions.clearNestedChild(componentId);
                    delete this._childElements[componentId];
                }
            }
        }
        return success;
    };
    /**
     * Clear all the DOM components
     */
    CustomControlHostRoot.prototype._clearAllDOMComponents = function () {
        var success = true;
        for (var domKey in this._childElements) {
            success = success && this._unbindDOMComponent(domKey);
        }
        return success;
    };
    /**
     * Ensure all dynamic data parameters are receiving or already received any data
     * @param props Custom control host props
     */
    CustomControlHostRoot.prototype._ensureParameterDynamicDataInitialization = function (props) {
        if (this._dynamicDataRequestedOnce) {
            return;
        }
        this._dynamicDataRequestedOnce = true;
        // If there is a Grid parameter, then the control is a dataset
        if (CustomControlHelper_1.isDataSetControl(this.props.manifest)) {
            var controlName = this.props.controlId;
            // The XRM grid needs to be created as early as possible to ensure that command bar for the grid can start to initialize early.
            // It does not depend on control data being fetched so it can be done as soon as metadata is available.
            if (!this.props.actions.createXrmGrid(this.props.contextToken, this.props.id, this.props.configuration.Parameters, controlName)) {
                TelemetryManager_1.default.reportEventFailure(this.props, new Error("Error creating the Xrm grid object"), CUSTOM_CONTROL_INIT, this._parentId);
            }
        }
        for (var paramKey in props.dynamicData.parameters) {
            var wrapper = props.dynamicData.parameters[paramKey];
            if (wrapper && wrapper.getParameterManifestType) {
                var manifestType = wrapper.getParameterManifestType();
                if (!this._commandingWrapper &&
                    (manifestType === ManifestType_1.ManifestType.Grid || manifestType === ManifestType_1.ManifestType.TimelineWall)) {
                    this._commandingWrapper = new CommandingWrapper_1.CommandingWrapper(props);
                }
            }
            if (wrapper && wrapper.ensureDataInitialization) {
                var initializableWrapper = wrapper;
                var manifestType = initializableWrapper.getParameterManifestType();
                if (manifestType === ManifestType_1.ManifestType.Grid) {
                    this._commandingWrapper.addDataSetWrapper(initializableWrapper);
                    initializableWrapper.ensureDataInitialization({
                        retrieveAction: props.actions.retrieveGridData,
                        retrieveViewAction: props.actions.retrieveView,
                        retrieveViewSelectorAction: props.actions.retrieveViewSelector,
                        refreshDataSetParameter: props.actions.refreshDataSetParameter,
                        retrieveLookupMetadataAction: props.actions.retrieveLookupMetadataAction,
                        retrieveDataSetLookupCellParameter: props.actions.retrieveDataSetLookupCellParameter,
                        executeAddOnLoad: props.actions.executeAddOnLoad,
                        updateFieldValue: props.actions.updateFieldValue,
                        saveEmbeddedEntity: props.actions.saveEmbeddedEntity,
                        executeNotifyHandlersThatEventOccurred: props.actions.executeNotifyHandlersThatEventOccurred,
                        addSessionTab: props.actions.addSessionTab,
                        closeSessionTab: props.actions.closeSessionTab,
                        updateSessionTab: props.actions.updateSessionTab,
                        closeAllSessionTabs: props.actions.closeAllSessionTabs,
                        dismissMessage: props.actions.dismissMessage,
                        markActiveTab: props.actions.markActiveTab,
                        initializeReferencePanelControl: props.actions.initializeReferencePanelControl,
                        cleanReferencePanelState: props.actions.cleanReferencePanelState,
                        openDatasetItem: null,
                        retrieveEntityData: props.actions.retrieveEntityData,
                        retrieveForm: props.actions.retrieveForm,
                        retrieveRecordForForm: props.actions.retrieveRecordDataForForm,
                        forceUpdate: this._forceUpdate.bind(this),
                        updateControlMemoizedDataSet: props.actions.updateControlMemoizedDataSet,
                        loadWebResource: props.actions.loadWebResource,
                    });
                }
                else if (manifestType === ManifestType_1.ManifestType.QuickForm) {
                    initializableWrapper.ensureDataInitialization({
                        retrieveAction: props.actions.retrieveGridData,
                        retrieveViewAction: props.actions.retrieveView,
                        retrieveViewSelectorAction: props.actions.retrieveViewSelector,
                        refreshDataSetParameter: props.actions.refreshDataSetParameter,
                        retrieveLookupMetadataAction: props.actions.retrieveLookupMetadataAction,
                        retrieveDataSetLookupCellParameter: props.actions.retrieveDataSetLookupCellParameter,
                        executeAddOnLoad: props.actions.executeAddOnLoad,
                        updateFieldValue: props.actions.updateFieldValue,
                        saveEmbeddedEntity: props.actions.saveEmbeddedEntity,
                        executeNotifyHandlersThatEventOccurred: props.actions.executeNotifyHandlersThatEventOccurred,
                        addSessionTab: props.actions.addSessionTab,
                        closeSessionTab: props.actions.closeSessionTab,
                        updateSessionTab: props.actions.updateSessionTab,
                        closeAllSessionTabs: props.actions.closeAllSessionTabs,
                        dismissMessage: props.actions.dismissMessage,
                        markActiveTab: props.actions.markActiveTab,
                        initializeReferencePanelControl: props.actions.initializeReferencePanelControl,
                        cleanReferencePanelState: props.actions.cleanReferencePanelState,
                        openDatasetItem: null,
                        retrieveEntityData: props.actions.retrieveEntityData,
                        retrieveForm: props.actions.retrieveForm,
                        retrieveRecordForForm: props.actions.retrieveRecordDataForForm,
                        forceUpdate: this._forceUpdate.bind(this),
                        updateControlMemoizedDataSet: props.actions.updateControlMemoizedDataSet,
                        loadWebResource: props.actions.loadWebResource,
                    });
                }
            }
            if (wrapper && wrapper.ensureLookupMetaDataInitialization) {
                var delayMetadataInitializationName = "delayMetadataInitialization";
                var delayMetadataInitializationParameter = this.props.descriptor.Parameters && this.props.descriptor.Parameters[delayMetadataInitializationName];
                if (!delayMetadataInitializationParameter) {
                    var lookupWrapper = wrapper;
                    lookupWrapper.ensureLookupMetaDataInitialization({
                        retrieveLookupMetadataAction: props.actions.retrieveLookupMetadataAction,
                        refreshDataSetParameter: props.actions.refreshDataSetParameter,
                    });
                }
            }
            if (wrapper && wrapper.ensureTimelinewallCommandsInitialization) {
                var timelinewallWrapper = wrapper;
                var manifestType = timelinewallWrapper.getParameterManifestType();
                if (manifestType === ManifestType_1.ManifestType.TimelineWall) {
                    wrapper.ensureTimelinewallCommandsInitialization(this.context, props);
                }
            }
            if (wrapper && wrapper.setControlReRender) {
                wrapper.setControlReRender(this._forceUpdate.bind(this));
            }
        }
    };
    /**
     * Initialize a control
     */
    CustomControlHostRoot.prototype._initializeControl = function () {
        this._ensureParameterDynamicDataInitialization(this.props);
        // Do nothing if data is not yet ready or if we're already in the process of initializing the control
        if (!this.props.dynamicData.dataReady ||
            this._internalStatus === 3 /* PreInitialized */ ||
            !this.props.propBagData.resourcesData.stringsLoaded) {
            return;
        }
        this._internalStatus = 3 /* PreInitialized */;
        var generatedPropertyBag;
        try {
            var stop_1 = CCFPerformanceTracker_1.default.startLifecycleStopwatch("constructor", this.props.controlId, this.props.manifest.CustomControlId);
            // eslint-disable-next-line no-eval
            this._controlInstance = eval("new " + this.props.manifest.ConstructorName + "()");
            stop_1();
            generatedPropertyBag = this._propertyBag.generateBag(this.props, this._generateHostDataForPropertyBag());
            var virtualcontrol = this._isVirtual();
            //Code to add the control to the context dictionary
            try {
                // Checking if the control is a quick view form
                if (CustomControlHelper_1.isQuickFormControl(this.props.configuration)) {
                    var recordInfo = CustomControlHelper_1.getRecordInfoFromControlProps(this.props);
                    var entityTypeName = recordInfo.entityTypeName;
                    var recordId = recordInfo.recordId;
                    if (!recordId) {
                        recordId = this.props.propBagData.modeData ? this.props.propBagData.modeData.entityId : null;
                    }
                    if (recordId &&
                        !this.props.actions.createXrmForm(this.props.contextToken, this.props.id, entityTypeName, recordId)) {
                        TelemetryManager_1.default.reportEventFailure(this.props, new Error("Error creating the Xrm form object"), CUSTOM_CONTROL_INIT, this._parentId);
                    }
                }
            }
            catch (exception) {
                TelemetryManager_1.default.reportEventFailure(this.props, new Error("Error creating the Xrm form object"), CUSTOM_CONTROL_INIT, this._parentId, "The first inner catch block");
                throw exception;
            }
            if (virtualcontrol) {
                this._executeAnyOnLoadEventsWhenNeeded();
                var bindOutput = this._onOutputChanged.bind(this);
                var propPersonalizationState = this.props.personalizationState;
                try {
                    var initStop = CCFPerformanceTracker_1.default.startLifecycleStopwatch("init", this.props.controlId, this.props.manifest.CustomControlId);
                    this._controlInstance.init(generatedPropertyBag, bindOutput, propPersonalizationState);
                    initStop();
                }
                catch (exception) {
                    TelemetryManager_1.default.reportEventFailure(this.props, exception, CUSTOM_CONTROL_INIT, this._parentId, "The second inner catch block");
                    throw exception;
                }
            }
            else {
                this._executeAnyOnLoadEventsWhenNeeded();
                var element = this._rootElement; //ReactDOM.findDOMNode(this) as HTMLDivElement;
                if (!element) {
                    // Somehow this has been called before the ref being resolved, so just shortcircuit and hope things go better next time :)
                    return;
                }
                // Set custom control testhook for standard controls
                element.setAttribute("data-id", this.props.controlId + "_container");
                var bindOutput = this._onOutputChanged.bind(this);
                var propPersonalizationState = this.props.personalizationState;
                try {
                    var initStop = CCFPerformanceTracker_1.default.startLifecycleStopwatch("init", this.props.controlId, this.props.manifest.CustomControlId);
                    this._controlInstance.init(generatedPropertyBag, bindOutput, propPersonalizationState, element);
                    initStop();
                }
                catch (exception) {
                    TelemetryManager_1.default.reportEventFailure(this.props, exception, CUSTOM_CONTROL_INIT, this._parentId, "The thrid inner catch block");
                    throw exception;
                }
            }
            var accessibilityData = this._propertyBag.getAccessibilityData();
            if (accessibilityData && accessibilityData.keyboardShortcuts && accessibilityData.keyboardShortcuts.length > 0) {
                var props = {
                    id: this.props.controlId,
                    keyboardShortcuts: accessibilityData.keyboardShortcuts,
                    context: this.context,
                };
                this._accessibilityComponent = this.props.actions.createAccessibilityComponent(props);
            }
            else {
                this._accessibilityComponent = null;
            }
            this._internalStatus = 4 /* Initialized */;
            if (virtualcontrol) {
                this.forceUpdate();
            }
            else {
                this._updateControl();
            }
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, CUSTOM_CONTROL_INIT, this._parentId, "The outer catch block");
            this._onControlLoadedError(exception);
            var message = "Error occured during initialization of control: " +
                this.props.manifest.CustomControlId +
                ";Message: " +
                exception.message;
            this._setErrorData(message, exception.stack);
            this.setState({
                _status: 0 /* InError */,
            });
        }
    };
    /**
     * Update a control
     */
    CustomControlHostRoot.prototype._updateControl = function () {
        if (this._skipControlUpdate) {
            this._skipControlUpdate = false;
            return;
        }
        // Only have to worry about standard controls here, virtual ones are taken care of in render
        if (!this._isVirtual()) {
            var endWork = CCFPerformanceTracker_1.default.trackWork(this._componentName + ".updateControl");
            var generateBag = void 0;
            try {
                var instance = this._controlInstance;
                generateBag = this._propertyBag.generateBag(this.props, this._generateHostDataForPropertyBag());
                this._executeAnyOnLoadEventsWhenNeeded();
                this._currentlyRendering = true;
                try {
                    if (this.props.shouldRender === undefined || this.props.shouldRender) {
                        var stop_2 = CCFPerformanceTracker_1.default.startLifecycleStopwatch("updateView", this.props.controlId, this.props.manifest.CustomControlId);
                        instance.updateView(generateBag);
                        stop_2();
                    }
                }
                catch (exception) {
                    TelemetryManager_1.default.reportEventFailure(this.props, exception, CUSTOM_CONTROL_UPDATE_VIEW, this._parentId, "instance.updateView failure");
                }
                this._currentlyRendering = false;
            }
            catch (exception) {
                TelemetryManager_1.default.reportEventFailure(this.props, exception, CUSTOM_CONTROL_INIT, this._parentId, "Probably failed to generageBag", "ControlFramework");
            }
            endWork();
        }
    };
    /**
     *  Execute Any AddOnLoad events
     */
    CustomControlHostRoot.prototype._executeAnyOnLoadEventsWhenNeeded = function () {
        if (this.props.dynamicData && this.props.dynamicData.parameters) {
            for (var paramKey in this.props.dynamicData.parameters) {
                if (this.props.dynamicData.parameters[paramKey] && this.props.dynamicData.parameters[paramKey]) {
                    var wrapper = this.props.dynamicData.parameters[paramKey];
                    var dataSetWrapper = wrapper;
                    if (dataSetWrapper &&
                        dataSetWrapper.getParameterManifestType &&
                        dataSetWrapper.getUpdateFlag &&
                        dataSetWrapper.getParameterManifestType() === ManifestType_1.ManifestType.Grid &&
                        dataSetWrapper.getUpdateFlag()) {
                        this.props.actions.executeAddOnLoad(wrapper, this.props.contextToken);
                    }
                }
            }
        }
    };
    /**
     * Dispose the control
     */
    CustomControlHostRoot.prototype._disposeControl = function () {
        try {
            this._clearAllDOMComponents();
            try {
                if (this._internalWorkPromiseResolve && !this._outputChangedInternalInProgress) {
                    this._onOutputChangedInternal();
                }
                var stop_3 = CCFPerformanceTracker_1.default.startLifecycleStopwatch("destroy", this.props.controlId, this.props.manifest.CustomControlId);
                this._controlInstance.destroy();
                stop_3();
            }
            catch (exception) {
                TelemetryManager_1.default.reportEventFailure(this.props, exception, "_disposeControl", this._parentId, "Custom control failed to destroy");
            }
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, "_disposeControl", this._parentId, "Probably failed to clearAllDOMComponents", "ControlFramework");
        }
    };
    /**
     * Report Error to parent listener
     */
    CustomControlHostRoot.prototype._onControlLoadedError = function (error) {
        if (error === void 0) { error = null; }
        if (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.onControlLoadedError) {
            this.props.parentDefinedControlProps.onControlLoadedError(error);
        }
    };
    /**
     * Callback for control to alert framework that its outputs have changed
     */
    CustomControlHostRoot.prototype._onOutputChanged = function (doNotAlertSystem) {
        var _this = this;
        if (doNotAlertSystem === void 0) { doNotAlertSystem = false; }
        if (this._outputChangedDebouncer !== -1 && !doNotAlertSystem) {
            window.clearTimeout(this._outputChangedDebouncer);
        }
        if (this._internalStatus === 5 /* Destroyed */) {
            TelemetryManager_1.default.reportUsage(this.props, "NotifyOutputChanged was called by a destroyed control");
            return;
        }
        if (this._internalPendingUnsentUpdates && !doNotAlertSystem) {
            this._onOutputChangedInternal();
            return;
        }
        var callback = this._onOutputChangedInternal.bind(this);
        if (this.props.actions.registerOngoingWork && !this._internalWorkPromiseResolve) {
            this.props.actions.registerOngoingWork(new Promise(function (resolve) {
                _this._internalWorkPromiseResolve = resolve;
            }), doNotAlertSystem ? callback : null, this.props.id);
        }
        doNotAlertSystem
            ? (this._internalPendingUnsentUpdates = true)
            : (this._outputChangedDebouncer = window.setTimeout(callback, 100));
    };
    /**
     * Input for output change debouncer
     */
    CustomControlHostRoot.prototype._onOutputChangedInternal = function () {
        var _this = this;
        this._outputChangedDebouncer = -1;
        this._outputChangedInternalInProgress = true;
        var updatePromise;
        var manifestDefinition;
        try {
            if (this._internalStatus !== 5 /* Destroyed */) {
                var stop_4 = CCFPerformanceTracker_1.default.startLifecycleStopwatch("getOutputs", this.props.controlId, this.props.manifest.CustomControlId);
                var outputs = this._controlInstance.getOutputs();
                stop_4();
                this._latestOutputs = outputs;
                var formattedOutputs = {};
                var _loop_1 = function (key) {
                    // Due to differences in the serializers that provide manifests for uclient vs AIR, this object can be presented as two different interfaces
                    // To combat this, we will try the Uclient interface first, then attempt to fall back to the alternate AIR interface if this is unsuccessful
                    manifestDefinition = this_1.props.manifest.Properties
                        .Properties[key];
                    if (!manifestDefinition && this_1.props.manifest.Properties.Properties instanceof Array) {
                        manifestDefinition = this_1.props.manifest.Properties
                            .Properties.find(function (value) { return value.Name === key; });
                    }
                    if (manifestDefinition) {
                        var config = this_1.props.configuration.Parameters[key];
                        var dynamic = this_1.props.dynamicData.parameters[key];
                        var parameter = void 0;
                        if (dynamic.getLatestData) {
                            parameter = dynamic.getLatestData();
                        }
                        else {
                            parameter = dynamic;
                        }
                        var newOutput = {
                            value: outputs[key],
                            type: manifestDefinition.Usage,
                            paramType: parameter.type,
                        };
                        if (manifestDefinition.Usage === 0 /* Bound */ &&
                            config &&
                            config.Usage === 3 /* FalseBound */) {
                            var falseBoundConfig = config;
                            if (parameter.type === ManifestType_1.ManifestType.LookupSimple ||
                                parameter.type === ManifestType_1.ManifestType.LookupCustomer ||
                                parameter.type === ManifestType_1.ManifestType.LookupOwner ||
                                parameter.type === ManifestType_1.ManifestType.LookupPartyList ||
                                parameter.type === ManifestType_1.ManifestType.LookupRegarding) {
                                falseBoundConfig.Callback(this_1._convertValueToSdkFormat(newOutput));
                            }
                            else {
                                falseBoundConfig.Callback(outputs[key]);
                            }
                        }
                        else if (manifestDefinition.Usage === 0 /* Bound */ ||
                            manifestDefinition.Usage === 2 /* Output */) {
                            if (parameter.attributes && parameter.attributes.LogicalName) {
                                newOutput.fieldName = parameter.attributes.LogicalName;
                            }
                            if (parameter.type === ManifestType_1.ManifestType.LookupSimple ||
                                parameter.type === ManifestType_1.ManifestType.LookupCustomer ||
                                parameter.type === ManifestType_1.ManifestType.LookupOwner ||
                                parameter.type === ManifestType_1.ManifestType.LookupPartyList ||
                                parameter.type === ManifestType_1.ManifestType.LookupRegarding) {
                                newOutput.value = this_1._convertValueToSdkFormat(newOutput);
                            }
                            formattedOutputs[key] = newOutput;
                        }
                    }
                };
                var this_1 = this;
                for (var key in outputs) {
                    _loop_1(key);
                }
                var entityTypeName = this.props.formInfo ? this.props.formInfo.EntityName : null;
                var recordId = this.props.formInfo ? this.props.formInfo.RecordId : null;
                var closestControlParentWithSave = this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.closestParentWithContext;
                updatePromise = this.props.actions.updateOutputs(this.props.id, entityTypeName, recordId, this.props.controlId, closestControlParentWithSave, formattedOutputs, this.props.contextToken);
            }
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, CUSTOM_CONTROL_UPDATE_OUTPUTS, this._parentId, "The outer catch block");
        }
        finally {
            this._outputChangedInternalInProgress = false;
            // Some clients require the update outputs to be asynchronous. This logic allows us to have our updates wait for that promise to return before we resolve the internal work promise
            // If we update all clients to implement this behavior, this can be removed.
            if (this._internalWorkPromiseResolve) {
                if (updatePromise) {
                    updatePromise.then(function () {
                        _this._internalWorkPromiseResolve(true);
                        _this._internalWorkPromiseResolve = null;
                        _this._internalPendingUnsentUpdates = false;
                    }, function () {
                        _this._internalWorkPromiseResolve(true);
                        _this._internalWorkPromiseResolve = null;
                        _this._internalPendingUnsentUpdates = false;
                    });
                }
                else {
                    this._internalWorkPromiseResolve(true);
                    this._internalWorkPromiseResolve = null;
                    this._internalPendingUnsentUpdates = false;
                }
            }
        }
    };
    /**
     * Converts a Custom Control value to the SDK format
     * https://msdn.microsoft.com/en-us/library/gg334409.aspx
     * @param output An output from a CustomControl
     * @returns Formatted output
     */
    CustomControlHostRoot.prototype._convertValueToSdkFormat = function (output) {
        var formattedOutput = [];
        if (CCFUtilities.IsNullOrUndefined(output) || CCFUtilities.IsNullOrUndefined(output.value)) {
            return formattedOutput;
        }
        if (Array.isArray(output.value)) {
            // Lookup exposed attribute is an array of entityReference, we need deep copy of it
            var outputValues = output.value;
            for (var _i = 0, outputValues_1 = outputValues; _i < outputValues_1.length; _i++) {
                var outputValue = outputValues_1[_i];
                formattedOutput.push(new CustomControlEntityReference_1.CustomControlEntityReference(outputValue.entityName || outputValue.entityType, outputValue.id, outputValue.name));
            }
        }
        else {
            formattedOutput.push(new CustomControlEntityReference_1.CustomControlEntityReference(output.value.entityName || output.value.entityType, output.value.id, output.value.name));
        }
        return formattedOutput;
    };
    /**
     * Get the allocated height for this control
     */
    CustomControlHostRoot.prototype._getAllocatedHeight = function () {
        if (this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())) {
            var seeMorePopupInfo = this._seeMoreHelper.getSeeMorePopupInfo();
            return seeMorePopupInfo.endHeightInner;
        }
        return this.props.parentDefinedControlProps &&
            !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.height)
            ? this.props.parentDefinedControlProps.height
            : CCFUtilities.IsNullOrUndefined(this._internalState._latestHeight)
                ? -1
                : this._internalState._latestHeight;
    };
    /**
     * Get the allocated width for this control
     */
    CustomControlHostRoot.prototype._getAllocatedWidth = function () {
        if (this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())) {
            var seeMorePopupInfo = this._seeMoreHelper.getSeeMorePopupInfo();
            return seeMorePopupInfo.endWidthInner;
        }
        return this.props.parentDefinedControlProps &&
            !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.width)
            ? this.props.parentDefinedControlProps.width
            : CCFUtilities.IsNullOrUndefined(this._internalState._latestWidth)
                ? -1
                : this._internalState._latestWidth;
    };
    /**
     * Generate the bag of data from this object to pass to the property bag
     */
    CustomControlHostRoot.prototype._generateHostDataForPropertyBag = function () {
        var data = this._generateHostData();
        if (data.updatedProperties !== this._updateInternalTracker) {
            data.updatedProperties = this._updateInternalTracker;
            if (this._updateInternalTracker.length > 0) {
                this._updateInternalTracker = [];
            }
        }
        return data;
    };
    CustomControlHostRoot.prototype._seeMorePopup = function (value, autosize) {
        if (autosize === void 0) { autosize = false; }
        // We want to keep track of the see more changes via the updateInternalTracker, so we update the internal state before calling the seemoreHelper's seeMorePopup function.
        switch (this._seeMoreHelper.getSeeMorePopupStatus()) {
            case -1 /* NotInUse */:
                if (!value)
                    return; // Already unpopped, nothing to do.
                this._updateInternalTracker.push(PropertyConstants.FULLSCREEN_OPEN_PROPERTY);
                break;
            case 2 /* PoppedOut */:
                if (value)
                    return; // Already popped out, nothing to do.
                this._updateInternalTracker.push(PropertyConstants.FULLSCREEN_CLOSE_PROPERTY);
                break;
        }
        if (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.alertParentInSeeMore) {
            this.props.parentDefinedControlProps.alertParentInSeeMore(value);
        }
        var isRTL = this.props.propBagData && this.props.propBagData.clientData ? this.props.propBagData.clientData.isRTL : null;
        this._seeMoreHelper.seeMorePopup(this._getComponent(), this._seeMoreCallback.bind(this), value, autosize, isRTL);
    };
    /**
     * Generate the bag of data from this object to helper functions (i.e. property bag, VCT)
     */
    CustomControlHostRoot.prototype._generateHostData = function () {
        if (!this._constantHostData) {
            this._constantHostData = {
                allocatedHeight: -1,
                allocatedWidth: -1,
                trackResize: this._updateTrackResize.bind(this),
                updateFullscreen: this._seeMorePopup.bind(this),
                ignoreUpdates: this._updateSelfUpdateIgnore.bind(this),
                updatedProperties: [],
                isInSeeMoreMode: false,
                isInTopMostSeeMore: false,
                updateDescendantSeeMore: this._descendantSeeMoreUpdate.bind(this),
            };
        }
        this._constantHostData.isInSeeMoreMode =
            this._seeMoreHelper.getSeeMorePopupStatus() !== -1 /* NotInUse */ ||
                (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.parentInSeeMoreMode);
        this._constantHostData.isInTopMostSeeMore = this._constantHostData.isInSeeMoreMode && !this._descendantInSeeMore;
        if (!this._trackingDimensions) {
            return this._constantHostData;
        }
        return Object.assign({}, this._constantHostData, {
            allocatedHeight: this._getAllocatedHeight(),
            allocatedWidth: this._getAllocatedWidth(),
        });
    };
    /**
     * Gets the root element of this CCHR
     */
    CustomControlHostRoot.prototype._getComponent = function () {
        return this._rootElement ? this._rootElement : ReactDOM.findDOMNode(this);
    };
    /**
     * Set the latest dimensions for this control
     */
    CustomControlHostRoot.prototype._updateDimensions = function (width) {
        if (this._trackingDimensions && width !== this._internalState._latestWidth) {
            this._internalState = Object.assign(this._internalState, {
                _latestWidth: width,
            });
            this._updateInternalTracker.push(PropertyConstants.LAYOUT_PROPERTY);
            if (this._resolveWidth) {
                this._resolveWidth();
                this._resolveWidth = null;
            }
            this._forceUpdate();
        }
    };
    /**
     * Called after the component is updated
     */
    CustomControlHostRoot.prototype.componentWillUnmount = function () {
        try {
            var stop_5 = CCFPerformanceTracker_1.default.createPerformanceEvent("CustomControlHostRoot.componentWillUnmount", this.props.logLevel).startStopwatch({
                controlId: this.props.controlId,
                manifestControlName: this.props.manifest && this.props.manifest.CustomControlId,
                parentId: this._parentId,
                level: 2 /* LifeCycle */.toString(),
            });
            if (this._commandingWrapper) {
                this._commandingWrapper.unmount();
            }
            if (this._internalStatus === 4 /* Initialized */) {
                this._disposeControl();
            }
            if (this._subscriber) {
                MeasuringHandler_1.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._subscriber);
            }
            if (this._memoHelper) {
                this._memoHelper.destroy();
            }
            if (this._seeMoreHelper) {
                this._seeMoreHelper.destroy();
            }
            this._internalStatus = 5 /* Destroyed */;
            stop_5();
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, "componentWillUnmount", this._parentId, null, "ControlFramework");
            throw exception;
        }
    };
    /**
     * Called after the component is rendered initially
     */
    CustomControlHostRoot.prototype.componentDidMount = function () {
        var _this = this;
        try {
            var stop_6 = CCFPerformanceTracker_1.default.createPerformanceEvent("CustomControlHostRoot.componentDidMount", this.props.logLevel).startStopwatch({
                controlId: this.props.controlId,
                manifestControlName: this.props.manifest && this.props.manifest.CustomControlId,
                parentId: this._parentId,
                level: 2 /* LifeCycle */.toString(),
            });
            if (this.props.stateToPropsMappingError ||
                this._manifestRetrieveFailed ||
                this.state._status === 0 /* InError */) {
                if (this.state._status !== 0 /* InError */) {
                    var error = new Error("Error while mapping state to props during ComponentDidMount for control: " +
                        this.props.controlId +
                        (this.props.stateToPropsMappingErrorMessage
                            ? ". Error message:" + this.props.stateToPropsMappingErrorMessage
                            : "."));
                    TelemetryManager_1.default.reportEventFailure(this.props, error, CUSTOM_CONTROL_DID_MOUNT, this._parentId);
                    this._onControlLoadedError();
                    this._setErrorData("Error while mapping state to props during ComponentDidMount for control: " + this.props.controlId);
                    this.setState({
                        _status: 0 /* InError */,
                    });
                }
                return;
            }
            if (!this.props.manifest) {
                if (!this._manifestRequestedOnce) {
                    this._loadManifest().catch(function (err) {
                        if (DefaultControlMapper_1.KNOWN_FALLBACK_CONTROLS.hasOwnProperty(_this.props.configuration.CustomControlId)) {
                            _this._manifestRequestedOnce = false;
                            DefaultControlMapper_1.updateManifestFallback(_this.props.configuration.CustomControlId, DefaultControlMapper_1.KNOWN_FALLBACK_CONTROLS[_this.props.configuration.CustomControlId]);
                            return;
                        }
                        _this._onControlLoadedError(err);
                        _this._manifestRetrieveFailed = true;
                        TelemetryManager_1.default.reportEventFailure(_this.props, err, CUSTOM_CONTROL_DID_MOUNT, _this._parentId, "Error while retrieving manifest during ComponentDidMount for control:" + _this.props.controlId);
                        _this._setErrorData("Error while retrieving manifest during ComponentDidMount for control: " + _this.props.controlId);
                        _this.setState({
                            _status: 0 /* InError */,
                        });
                    });
                }
                // manifest not available, but this._manifestRetrieveFailed still false => manifest still being retrieved
                return;
            }
            switch (this._internalStatus) {
                case 0 /* Uninitialized */:
                    this._initializeData();
                    break;
                case 2 /* DataReady */:
                    this._initializeControl();
                    break;
                case 4 /* Initialized */:
                    this._updateControl();
                    break;
                default:
                    break;
            }
            stop_6();
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, "componentDidMount", this._parentId, null, "ControlFramework");
            throw exception;
        }
    };
    /**
     * Called when the component gets new props
     */
    CustomControlHostRoot.prototype.componentWillReceiveProps = function (nextProps) {
        this._updateInternalTracker = this._updateInternalTracker.concat(nextProps.updatedProperties);
    };
    /**
     * Called after the component is updated
     */
    CustomControlHostRoot.prototype.componentDidUpdate = function () {
        var _this = this;
        try {
            if (this.props.stateToPropsMappingError ||
                this._manifestRetrieveFailed ||
                this.state._status === 0 /* InError */) {
                if (this.state._status !== 0 /* InError */) {
                    TelemetryManager_1.default.reportEventFailure(this.props, new Error("Error while mapping state to props during ComponentDidUpdate for control: " + this.props.controlId), CUSTOM_CONTROL_DID_UPDATE, this._parentId);
                    this._setErrorData("Error while mapping state to props during ComponentDidUpdate for control: " + this.props.controlId);
                    this._onControlLoadedError();
                    this.setState({
                        _status: 0 /* InError */,
                    });
                }
                return;
            }
            if (this._seeMoreHelper.getSeeMorePopupStatus() !== -1 /* NotInUse */) {
                this._seeMoreHelper.checkOnPopupStatus(this._isVirtual(), this._memoHelper.getIsCompositing(), this._getComponent());
            }
            if (!this.props.manifest) {
                if (!this._manifestRequestedOnce) {
                    this._loadManifest().catch(function (err) {
                        TelemetryManager_1.default.reportEventFailure(_this.props, err, CUSTOM_CONTROL_DID_UPDATE, _this._parentId);
                        _this._setErrorData("Error while retrieving manifest during ComponentDidUpdate for control: " + _this.props.controlId);
                        _this._manifestRetrieveFailed = true;
                        _this._onControlLoadedError(err);
                        _this.setState({
                            _status: 0 /* InError */,
                        });
                    });
                }
                // manifest not available, but this._manifestRetrieveFailed still false => manifest still being retrieved
                return;
            }
            switch (this._internalStatus) {
                case 0 /* Uninitialized */:
                    this._initializeData();
                    break;
                case 2 /* DataReady */:
                    this._initializeControl();
                    break;
                case 4 /* Initialized */:
                    this._updateControl();
                    break;
                default:
                    break;
            }
            this._registerToLearningPath();
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, "componentDidUpdate", this._parentId, null, "ControlFramework");
            throw exception;
        }
    };
    CustomControlHostRoot.prototype._registerToLearningPath = function () {
        //TODO #488846 - Function being called on every re-render of the control
        if (this._internalStatus === 4 /* Initialized */ && this._propertyBag) {
            var learningPathBag = this._propertyBag.getLearningPathBag();
            LearningPathHelper_1.LearningPathHelper.registerToLearningPath(this._getComponent(), learningPathBag.DOMAttributeName, learningPathBag.baseControlId);
        }
    };
    /**
     * Determine whether the component needs to be re-rendered.
     * @params nextProps The new component properties.
     * @returns {boolean} Whether to re-render the component.
     */
    CustomControlHostRoot.prototype.shouldComponentUpdate = function (nextProps) {
        try {
            if (!this._ignoreSelfUpdates || !this._latestOutputs || !nextProps.dynamicData.updated) {
                return true;
            }
            if (nextProps.updatedProperties) {
                for (var _i = 0, _a = nextProps.updatedProperties; _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (key !== PropertyConstants.PARAMETERS && !nextProps.dynamicData.parameters.hasOwnProperty(key)) {
                        return true;
                    }
                }
            }
            for (var paramKey in nextProps.dynamicData.parameters) {
                if (!nextProps.dynamicData.parameters[paramKey] ||
                    !nextProps.dynamicData.parameters[paramKey].hasOwnProperty("raw")) {
                    continue;
                }
                if (!this._latestOutputs || !this._latestOutputs.hasOwnProperty(paramKey)) {
                    if (this.props.dynamicData.parameters &&
                        this.props.dynamicData.parameters[paramKey] &&
                        this.props.dynamicData.parameters[paramKey] !== nextProps.dynamicData.parameters[paramKey]) {
                        return true;
                    }
                    continue;
                }
                var rawVal = nextProps.dynamicData.parameters[paramKey].raw;
                var rawValHasEquals = !CCFUtilities.IsNullOrUndefined(rawVal) && rawVal.equals;
                if (rawValHasEquals ? !rawVal.equals(this._latestOutputs[paramKey]) : rawVal !== this._latestOutputs[paramKey]) {
                    return true;
                }
            }
            return false;
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, "shouldComponentUpdate", this._parentId, null, "ControlFramework");
            throw exception;
        }
    };
    /* tslint:disable:crm-prohibit-standard-react-element */
    CustomControlHostRoot.prototype._renderMainControlComponent = function () {
        var generateBag;
        try {
            if (this._internalStatus === 4 /* Initialized */ && this._isVirtual()) {
                if (this._skipControlUpdate) {
                    this._skipControlUpdate = false;
                    this._currentlyRendering = false;
                    return this._memoHelper.getRoot();
                }
                var virtualControl = void 0;
                var element = void 0;
                var instance = this._controlInstance;
                this._executeAnyOnLoadEventsWhenNeeded();
                generateBag = this._propertyBag.generateBag(this.props, this._generateHostDataForPropertyBag());
                if (this.props.shouldRender === undefined || this.props.shouldRender) {
                    try {
                        var stop_7 = CCFPerformanceTracker_1.default.startLifecycleStopwatch("updateView", this.props.controlId, this.props.manifest.CustomControlId);
                        virtualControl = instance.updateView(generateBag);
                        stop_7();
                        this._currentlyRendering = false;
                    }
                    catch (exception) {
                        TelemetryManager_1.default.reportEventFailure(this.props, exception, "_renderMainControlComponent", this._parentId);
                        this._setErrorData("Custom Control with Id: " +
                            this.props.manifest.CustomControlId +
                            " failed to render; Message: " +
                            exception.message, exception.stack);
                        return this._getErrorElement();
                    }
                    try {
                        element = VirtualComponentTranslator_1.VirtualComponentTranslator.renderVirtualComponent(virtualControl, this.props, this._generateHostData(), this._memoHelper);
                        this._memoHelper.setRoot(element);
                    }
                    catch (exception) {
                        TelemetryManager_1.default.reportEventFailure(this.props, exception, "_renderMainControlComponent", this._parentId, null, "ControlFramework");
                        this._setErrorData("Custom Control with Id: " +
                            this.props.manifest.CustomControlId +
                            " failed to renderVirtualComponent; Message: " +
                            exception.message, exception.stack);
                        return this._getErrorElement();
                    }
                    return element;
                }
                else if (this._memoHelper.getRoot()) {
                    element = this._memoHelper.getRoot();
                    return element;
                }
            }
            this._currentlyRendering = false;
            var standardStyle = { width: "100%" };
            return this._renderGenericDiv(standardStyle);
        }
        catch (exception) {
            TelemetryManager_1.default.reportEventFailure(this.props, exception, "_renderMainControlComponent", this._parentId, null, "ControlFramework");
            throw exception;
        }
    };
    //TODO: Why is this method public?
    CustomControlHostRoot.prototype.renderShadow = function (domId, style) {
        style = style || { display: "none" };
        return React.createElement("div", { key: "shadow", id: domId ? domId + "shadow" : null, style: style });
    };
    /**
     *  Constructs and returns the error div
     */
    CustomControlHostRoot.prototype._getErrorElement = function () {
        var errorDataId = this.props.controlId + "_container_error";
        return (React.createElement("div", { className: "customControl inError", "data-id": errorDataId },
            React.createElement("a", { href: "#", onClick: this._handleErrorLinkClick.bind(this) }, CustomControlLocHelper_1.getLocalizedString("ERROR_LOADING_CONTROL"))));
    };
    CustomControlHostRoot.prototype._setErrorData = function (exceptionMessage, stack) {
        if (exceptionMessage || stack) {
            this._errorData.errorMessage = exceptionMessage;
            this._errorData.errorDetails = stack;
        }
    };
    //TODO: Why is this method public?
    CustomControlHostRoot.prototype.renderWrappedMainElement = function (domId, innerStyle) {
        var domIdDivStyleProperties = innerStyle ||
            (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.containerStyleOverrides
                ? Object.assign(this._getDomIdDivStyleProperties(this.props.descriptor), this.props.parentDefinedControlProps.containerStyleOverrides.allContainers, this.props.parentDefinedControlProps.containerStyleOverrides.primaryInnerContainer)
                : this._getDomIdDivStyleProperties(this.props.descriptor));
        var isVirtual = this._isVirtual();
        var isCompositing = this._memoHelper.getIsCompositing();
        var hiddenCommandManagers = this._renderCommandingComponent();
        var isRTL = this.props.propBagData === null ? null : this.props.propBagData.clientData.isRTL;
        this.props.globalCommandManagerInitialized && this._globalCommandManagerPromise.resolve();
        return (React.createElement(View_1.View, { key: "mainControlContainer", id: domId, style: domIdDivStyleProperties },
            hiddenCommandManagers,
            this._accessibilityComponent,
            this._seeMoreHelper.renderCloseButton(this._seeMorePopup.bind(this, false), isVirtual, isCompositing, isRTL),
            this._seeMoreHelper.renderSpacer(isVirtual, isCompositing),
            this._renderMainControlComponent()));
    };
    //TODO: Why is this method public?
    CustomControlHostRoot.prototype.renderContainerWithResizePads = function (mainElement, outerStyle, domId) {
        var outerStyleAdj = outerStyle ||
            (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.containerStyleOverrides
                ? Object.assign({ width: "100%" }, this.props.parentDefinedControlProps.containerStyleOverrides.allContainers, this.props.parentDefinedControlProps.containerStyleOverrides.outerContainer)
                : { width: "100%" });
        // This one is different because we only care about this control, not its parents
        var mySeeMoreActive = this._seeMoreHelper && this._seeMoreHelper.getSeeMorePopupStatus() !== -1 /* NotInUse */;
        var role = mySeeMoreActive ? "dialog" : null;
        var modal = mySeeMoreActive ? true : null;
        return (React.createElement(View_1.View, { key: "mainControlOuterContainer", id: domId + "_outer" + Math.floor(Math.random() * 10 + 1), style: outerStyleAdj, accessibilityModal: modal, role: role }, mainElement));
    };
    /**
     * Render the generic div
     * @param style The style object
     */
    CustomControlHostRoot.prototype._renderGenericDiv = function (style) {
        var _this = this;
        var className = "customControl " + (this.props.manifest ? this.props.manifest.ConstructorName.replace(".", " ") : "");
        if (this.props.manifest && this.props.manifest.ConstructorName) {
            className = className + " " + this.props.manifest.ConstructorName;
        }
        return (React.createElement("div", { key: "MainContainerElement", className: className, style: style, ref: function (input) {
                _this._rootElement = input;
            } }, this._getPopupService().renderPopups()));
    };
    /**
     * create the command managers for all etns requested
     */
    CustomControlHostRoot.prototype._renderCommandingComponent = function () {
        if (this.props.internalCommandManagerIds &&
            this.props.internalCommandManagerIds.length &&
            this._commandingWrapper) {
            var commandManagers = [];
            for (var i = 0; i < this.props.internalCommandManagerIds.length; i++) {
                var commandId = this.props.internalCommandManagerIds[i].commandManagerId;
                var ribbonId = this.props.internalCommandManagerIds[i].ribbonId;
                commandManagers.push(this._commandingWrapper.createHiddenCommandManager(commandId, ribbonId));
            }
            return commandManagers;
        }
        return null;
    };
    /**
     *  Error link click handler. Opens an error dialog with the error message and details
     */
    CustomControlHostRoot.prototype._handleErrorLinkClick = function (e) {
        e.preventDefault();
        var errorDialogOptions = {
            message: this._errorData.errorMessage,
            details: this._errorData.errorDetails,
        };
        XrmProxy_1.default.openErrorDialog(errorDialogOptions);
    };
    /**
     * Render the section component.
     */
    CustomControlHostRoot.prototype.render = function () {
        this._currentlyRendering = true;
        var domId = "";
        if (this.props.descriptor) {
            domId = this.props.descriptor.DomId ? this.props.descriptor.DomId : "";
        }
        if (this.state._status === 0 /* InError */) {
            // TODO: Localize
            this._currentlyRendering = false;
            TelemetryManager_1.default.reportUsage(this.props, "Failure");
            TelemetryManager_1.default.reportEventFailure(this.props, new Error("Error loading control"), CUSTOM_CONTROL_RENDER, this._parentId, null);
            return this._getErrorElement();
        }
        if (this._internalStatus === 5 /* Destroyed */) {
            this._currentlyRendering = false;
            return React.createElement("div", null);
        }
        var viewStyle = this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.containerStyleOverrides
            ? Object.assign({ width: "100%" }, this.props.parentDefinedControlProps.containerStyleOverrides.allContainers, this.props.parentDefinedControlProps.containerStyleOverrides.rootContainer)
            : { width: "100%" };
        if (this._internalStatus !== 4 /* Initialized */) {
            // TODO: render loading dots once it has been generalized
            // If the manifest is already available and we know that the
            // control is virtual, we can skip rendering out the control wrapper
            if (this._isVirtual()) {
                return null;
            }
            this._currentlyRendering = false;
            var mainElement_1 = this.renderWrappedMainElement(domId, null);
            var mainComponent_1 = this.renderContainerWithResizePads(mainElement_1, null, domId);
            var shadow_1 = this.renderShadow(domId, null);
            return (React.createElement(View_1.View, { key: "root", style: viewStyle },
                shadow_1,
                mainComponent_1));
        }
        var styleBits = { shadowStyle: null, innerStyle: null, outerStyle: null };
        var seeMorePopupStatus = this._seeMoreHelper.getSeeMorePopupStatus();
        var seeMorePopupInfo = this._seeMoreHelper.getSeeMorePopupInfo();
        if (seeMorePopupStatus !== -1 /* NotInUse */) {
            styleBits = CustomControlAnimationHelper_1.CustomControlAnimationHelper.getCustomControlFancyPopoutStyles(this.context.renderer, seeMorePopupStatus, seeMorePopupInfo);
            if (seeMorePopupStatus !== 4 /* ReturnFadeIn */) {
                viewStyle = {
                    height: seeMorePopupInfo.startHeight,
                    width: seeMorePopupInfo.startWidth,
                };
            }
        }
        var mainElement = this.renderWrappedMainElement(domId, styleBits.innerStyle);
        if (this._isVirtual() &&
            !this._memoHelper.getIsCompositing() &&
            (seeMorePopupStatus === -1 /* NotInUse */ || seeMorePopupStatus === 4 /* ReturnFadeIn */)) {
            TelemetryManager_1.default.reportUsage(this.props, "Success");
            //TelemetryManagerInstance.reportEventSuccess(this.props, CUSTOM_CONTROL_RENDER);
            return mainElement;
        }
        var mainComponent = this.renderContainerWithResizePads(mainElement, styleBits.outerStyle, domId);
        var shadow = this.renderShadow(domId, styleBits.shadowStyle);
        TelemetryManager_1.default.reportUsage(this.props, "Success");
        //TelemetryManagerInstance.reportEventSuccess(this.props, CUSTOM_CONTROL_RENDER);
        return (React.createElement(View_1.View, { key: "root", style: viewStyle },
            shadow,
            mainComponent));
    };
    /**
     * Display name for React dev tools
     */
    CustomControlHostRoot.displayName = "CustomControlHost";
    return CustomControlHostRoot;
}(React.Component));
exports.CustomControlHostRoot = CustomControlHostRoot;
CustomControlHostRoot.contextTypes = {
    renderer: PropTypes.object,
    context: PropTypes.object,
    store: PropTypes.object,
};

},{"../../CommonComponents/Common/MeasuringHandler/MeasuringHandler":4,"../../CommonComponents/Primitive/View":55,"../Models/CommandingWrapper":64,"../Models/CustomControlEntityReference":65,"../Models/CustomControlUtilityPointers":67,"../Models/PropertyBag":68,"../Models/UpdatedPropertyConstants":95,"../Utilities/CCFPerformanceTracker":96,"../Utilities/CustomControlHelper":99,"../Utilities/DefaultControlMapper":100,"../Utilities/LearningPathHelper":102,"../Utilities/ManifestType":104,"../Utilities/PopupService":106,"../Utilities/TelemetryClient":108,"../Utilities/TelemetryManager":109,"../Utilities/XrmProxy":110,"./Helpers/Animation/CustomControlAnimationHelper":113,"./Helpers/CustomControlErrorData":117,"./Helpers/CustomControlLocHelper":118,"./Helpers/CustomControlMemoizationHelper":119,"./Helpers/CustomControlSeeMoreHelper":120,"./VirtualComponentTranslator":122,"prop-types":undefined,"react":undefined,"react-dom":undefined}],112:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });


var PropTypes = require("prop-types");
var CustomControlHostRoot_1 = require("./CustomControlHostRoot");
var MeasuringHandler_1 = require("../../CommonComponents/Common/MeasuringHandler/MeasuringHandler");
var XrmProxy_1 = require("../Utilities/XrmProxy");
var DefaultControlMapper = require("../Utilities/DefaultControlMapper");
/**
 * Component representing a custom control
 */
var CustomControlWebClientWrapper = /** @class */ (function (_super) {
    __extends(CustomControlWebClientWrapper, _super);
    function CustomControlWebClientWrapper(props) {
        return _super.call(this, props) || this;
    }
    CustomControlWebClientWrapper.prototype._initializeFela = function () {
        if (!CustomControlWebClientWrapper._FelaInitialized) {
            if (!CustomControlWebClientWrapper._FelaRenderer) {
                CustomControlWebClientWrapper._FelaRenderer = Fela.createRenderer();
            }
            if (!CustomControlWebClientWrapper._FelaElement) {
                CustomControlWebClientWrapper._FelaElement = document.createElement("style");
                CustomControlWebClientWrapper._FelaElement.id = "stylesheet";
                document.head.appendChild(CustomControlWebClientWrapper._FelaElement);
            }
            // Note: the fela typings file does not recognize this, because render is present in "dom-fela" for amd modules.
            // however, since this file is only meant for consumption for non-AMD builds, this cast is here so that it can be
            // referenced properly in this file after our browserify script runs
            Fela.render(CustomControlWebClientWrapper._FelaRenderer, CustomControlWebClientWrapper._FelaElement);
            CustomControlWebClientWrapper._FelaInitialized = true;
        }
    };
    /**
     * falseUpdate wrapper
     * @param callback
     */
    CustomControlWebClientWrapper.prototype._forceUpdate = function (callback) {
        this.forceUpdate(callback);
    };
    CustomControlWebClientWrapper.prototype.getChildContext = function () {
        if (!CustomControlWebClientWrapper._FelaInitialized) {
            this._initializeFela();
        }
        return {
            renderer: CustomControlWebClientWrapper._FelaRenderer,
        };
    };
    /**
     * Called after the component is rendered initially
     */
    CustomControlWebClientWrapper.prototype.componentDidMount = function () {
        this.props.setReRenderCallBack(this._forceUpdate.bind(this));
    };
    /**
     * Render the section component.
     */
    CustomControlWebClientWrapper.prototype.render = function () {
        return React.createElement(CustomControlHostRoot_1.CustomControlHostRoot, __assign({}, this.props.givenHostProps));
    };
    CustomControlWebClientWrapper._FelaInitialized = false;
    CustomControlWebClientWrapper._FelaRenderer = null;
    CustomControlWebClientWrapper._FelaElement = null;
    return CustomControlWebClientWrapper;
}(React.Component));
exports.CustomControlWebClientWrapper = CustomControlWebClientWrapper;
CustomControlWebClientWrapper.contextTypes = {
    context: PropTypes.object,
};
CustomControlWebClientWrapper.childContextTypes = {
    renderer: PropTypes.object,
};
window.CustomControls = {};
window.CustomControls.CustomControlHostRoot = CustomControlHostRoot_1.CustomControlHostRoot;
window.CustomControls.CustomControlWebClientWrapper = CustomControlWebClientWrapper;
window.CustomControls.MeasuringHandler = MeasuringHandler_1.MeasuringHandler.getInstance();
window.CustomControls.XrmProxy = XrmProxy_1.default;
window.CustomControls.Utilities = {};
window.CustomControls.Utilities.GetDefaultControlConfig =
    DefaultControlMapper.retrieveDefaultConfigurationForControl;
window.CustomControls.Utilities.GetDefaultControlManifest =
    DefaultControlMapper.retrieveDefaultManifestByConfiguration;

},{"../../CommonComponents/Common/MeasuringHandler/MeasuringHandler":4,"../Utilities/DefaultControlMapper":100,"../Utilities/XrmProxy":110,"./CustomControlHostRoot":111,"fela":undefined,"prop-types":undefined,"react":undefined}],113:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CustomControlOuterPopAnimationHelper_1 = require("./CustomControlOuterPopAnimationHelper");
var CustomControlInnerPopAnimationHelper_1 = require("./CustomControlInnerPopAnimationHelper");
var CustomControlShadowAnimationHelper_1 = require("./CustomControlShadowAnimationHelper");
var CustomControlAnimationHelper = /** @class */ (function () {
    function CustomControlAnimationHelper() {
    }
    CustomControlAnimationHelper.getCustomControlFancyPopoutStyles = function (renderer, status, props) {
        return {
            shadowStyle: CustomControlShadowAnimationHelper_1.CustomControlShadowAnimationHelper.generateShadowClass(renderer, status),
            outerStyle: CustomControlOuterPopAnimationHelper_1.CustomControlOuterPopAnimationHelper.generateOuterClass(renderer, status, props),
            innerStyle: CustomControlInnerPopAnimationHelper_1.CustomControlInnerPopAnimationHelper.generateInnerClass(renderer, status, props),
        };
    };
    return CustomControlAnimationHelper;
}());
exports.CustomControlAnimationHelper = CustomControlAnimationHelper;

},{"./CustomControlInnerPopAnimationHelper":114,"./CustomControlOuterPopAnimationHelper":115,"./CustomControlShadowAnimationHelper":116}],114:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CustomControlInnerPopAnimationHelper = /** @class */ (function () {
    function CustomControlInnerPopAnimationHelper() {
    }
    CustomControlInnerPopAnimationHelper._innerOutKeyframeGen = function (props) {
        return {
            "0%": {
                opacity: 1,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                transform: "scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            "25%": {
                opacity: 0,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                transform: "scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            "30%": {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            "40%": {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            "100%": {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
        };
    };
    CustomControlInnerPopAnimationHelper._innerInKeyframeGen = function (props) {
        return {
            "0%": {
                opacity: 1,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            "25%": {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            "60%": {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            "70%": {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            "75%": {
                opacity: 0,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                transform: "scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            "100%": {
                opacity: 0,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                transform: "scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
        };
    };
    CustomControlInnerPopAnimationHelper._fadeInAnimation = function () {
        return {
            "0%": {
                opacity: 0,
            },
            "100%": {
                opacity: 1,
            },
        };
    };
    /**
     * IE browser detection
     */
    CustomControlInnerPopAnimationHelper._isIE = function () {
        return !!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident");
    };
    CustomControlInnerPopAnimationHelper.generateInnerClass = function (renderer, status, props) {
        var baseStyle = {
            animationFillMode: "forwards",
            animationDirection: "normal",
            animationIterationCount: "1",
            display: "block",
            backgroundColor: "#FFFFFF",
            opacity: "",
            height: "",
            width: "",
            transform: "",
            marginTop: "",
            marginLeft: "",
            marginRight: "",
            paddingTop: "",
            animationName: "",
            animationDuration: "",
            webkitBackfaceVisibility: "hidden",
            backfaceVisibility: "hidden",
            position: "",
        };
        var transY = props.startHeight / props.endHeight;
        var transX = props.startWidth / props.endWidth;
        var margLeft = (-1 * (props.endWidthInner - props.startWidth)) / 2;
        var margTop = (-1 * (props.endHeightInner - props.startHeight)) / 2;
        var padTop = "";
        if (margTop !== Math.floor(margTop)) {
            margTop = Math.floor(margTop);
            padTop = "1px";
        }
        if (margLeft !== Math.floor(margLeft)) {
            margLeft = Math.floor(margLeft);
        }
        var newProps = Object.assign({}, props, {
            margLeft: margLeft,
            margTop: margTop,
            padTop: padTop,
            transX: transX,
            transY: transY,
        });
        switch (status) {
            case 0 /* PopFadeOutAndMove */:
                baseStyle.animationName = renderer.renderKeyframe(CustomControlInnerPopAnimationHelper._innerOutKeyframeGen, newProps);
                baseStyle.animationDuration = "1.4s";
                break;
            case 1 /* PopFadeIn */:
                baseStyle.animationName = renderer.renderKeyframe(CustomControlInnerPopAnimationHelper._fadeInAnimation, newProps);
                baseStyle.animationDuration = ".5s";
                baseStyle.height = props.endHeightInner + "px";
                baseStyle.width = props.endWidthInner + "px";
                baseStyle.transform = "scaleX(" + transX + ") scaleY(" + transY + ")";
                baseStyle.marginTop = margTop + "px";
                baseStyle.paddingTop = padTop;
                baseStyle.marginLeft = props.isRTL ? "0px" : margLeft + "px";
                baseStyle.marginRight = props.isRTL ? margLeft + "px" : "0px";
                baseStyle.position = CustomControlInnerPopAnimationHelper._isIE() ? "" : "fixed";
                break;
            case 2 /* PoppedOut */:
                baseStyle.height = props.endHeightInner + "px";
                baseStyle.width = props.endWidthInner + "px";
                baseStyle.transform = "scaleX(" + transX + ") scaleY(" + transY + ")";
                baseStyle.marginTop = margTop + "px";
                baseStyle.marginLeft = props.isRTL ? "0px" : margLeft + "px";
                baseStyle.marginRight = props.isRTL ? margLeft + "px" : "0px";
                baseStyle.opacity = "1";
                baseStyle.position = CustomControlInnerPopAnimationHelper._isIE() ? "" : "fixed";
                break;
            case 3 /* ReturnFadeOutAndMove */:
                baseStyle.animationName = renderer.renderKeyframe(CustomControlInnerPopAnimationHelper._innerInKeyframeGen, newProps);
                baseStyle.animationDuration = "1.4s";
                break;
            case 4 /* ReturnFadeIn */:
                baseStyle.animationDuration = ".5s";
                baseStyle.width = "100%";
                baseStyle.animationName = renderer.renderKeyframe(CustomControlInnerPopAnimationHelper._fadeInAnimation, newProps);
                break;
        }
        return baseStyle;
    };
    return CustomControlInnerPopAnimationHelper;
}());
exports.CustomControlInnerPopAnimationHelper = CustomControlInnerPopAnimationHelper;

},{}],115:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CustomControlOuterPopAnimationHelper = /** @class */ (function () {
    function CustomControlOuterPopAnimationHelper() {
    }
    CustomControlOuterPopAnimationHelper._outerOutKeyframeGen = function (props) {
        var transY = props.endHeight / props.startHeight;
        var transX = props.endWidth / props.startWidth;
        return {
            "0%": {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            "25%": {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            "65%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            "70%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(" + transY + ")",
            },
            "75%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
            "100%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
        };
    };
    CustomControlOuterPopAnimationHelper._outerInKeyframeGen = function (props) {
        var transY = props.endHeight / props.startHeight;
        var transX = props.endWidth / props.startWidth;
        return {
            "100%": {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            "75%": {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            "35%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            "30%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(" + transY + ")",
            },
            "25%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
            "0%": {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
        };
    };
    CustomControlOuterPopAnimationHelper.generateOuterClass = function (renderer, status, props) {
        var baseStyle = {
            animationDuration: "1.5s",
            animationFillMode: "forwards",
            animationDirection: "normal",
            animationIterationCount: "1",
            animationName: "",
            position: "fixed",
            display: "initial",
            height: props.startHeight + "px",
            width: props.startWidth + "px",
            overflow: "hidden",
            backgroundColor: "#FFFFFF",
            transform: "",
            left: "",
            top: "",
            zIndex: 1,
        };
        var transY = props.endHeight / props.startHeight;
        var transX = props.endWidth / props.startWidth;
        switch (status) {
            case 0 /* PopFadeOutAndMove */:
                baseStyle.animationName = renderer.renderKeyframe(CustomControlOuterPopAnimationHelper._outerOutKeyframeGen, props);
                break;
            case 1 /* PopFadeIn */:
            case 2 /* PoppedOut */:
                baseStyle.left = props.endLeft + "px";
                baseStyle.top = props.endTop + "px";
                baseStyle.transform = "scaleX(" + transX + ") scaleY(" + transY + ")";
                break;
            case 3 /* ReturnFadeOutAndMove */:
                baseStyle.animationName = renderer.renderKeyframe(CustomControlOuterPopAnimationHelper._outerInKeyframeGen, props);
                break;
            case 4 /* ReturnFadeIn */:
            case -1 /* NotInUse */:
                return null;
        }
        return baseStyle;
    };
    return CustomControlOuterPopAnimationHelper;
}());
exports.CustomControlOuterPopAnimationHelper = CustomControlOuterPopAnimationHelper;

},{}],116:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CustomControlShadowAnimationHelper = /** @class */ (function () {
    function CustomControlShadowAnimationHelper() {
    }
    CustomControlShadowAnimationHelper._shadowOutKeyframeGen = function () {
        return {
            "0%": { opacity: 0 },
            "75%": { opacity: 0.5 },
            "100%": { opacity: 0.5 },
        };
    };
    CustomControlShadowAnimationHelper._shadowInKeyframeGen = function () {
        return {
            "0%": { opacity: 0.5 },
            "25%": { opacity: 0.5 },
            "100%": { opacity: 0 },
        };
    };
    CustomControlShadowAnimationHelper.generateFancyShadowInAnimationName = function (renderer) {
        if (!CustomControlShadowAnimationHelper._shadowOutAnimationName) {
            CustomControlShadowAnimationHelper._shadowOutAnimationName = renderer.renderKeyframe(CustomControlShadowAnimationHelper._shadowOutKeyframeGen, null);
        }
        return CustomControlShadowAnimationHelper._shadowOutAnimationName;
    };
    CustomControlShadowAnimationHelper.generateFancyShadowOutAnimationName = function (renderer) {
        if (!CustomControlShadowAnimationHelper._shadowInAnimationName) {
            CustomControlShadowAnimationHelper._shadowInAnimationName = renderer.renderKeyframe(CustomControlShadowAnimationHelper._shadowInKeyframeGen, null);
        }
        return CustomControlShadowAnimationHelper._shadowInAnimationName;
    };
    CustomControlShadowAnimationHelper.generateShadowClass = function (renderer, status) {
        var baseShadowStyle = {
            width: "100%",
            height: "100%",
            top: "0px",
            left: "0px",
            backgroundColor: "#000000",
            position: "fixed",
            animationDuration: "2s",
            animationFillMode: "forwards",
            animationDirection: "normal",
            animationIterationCount: "1",
            zIndex: "1",
            animationName: null,
            opacity: null,
        };
        switch (status) {
            case 0 /* PopFadeOutAndMove */:
                baseShadowStyle.animationName = CustomControlShadowAnimationHelper.generateFancyShadowInAnimationName(renderer);
                break;
            case 1 /* PopFadeIn */:
            case 2 /* PoppedOut */:
                baseShadowStyle.opacity = ".5";
                break;
            case 3 /* ReturnFadeOutAndMove */:
                baseShadowStyle.animationName = CustomControlShadowAnimationHelper.generateFancyShadowOutAnimationName(renderer);
                break;
            case 4 /* ReturnFadeIn */:
            case -1 /* NotInUse */:
                return {
                    display: "none",
                };
        }
        return baseShadowStyle;
    };
    CustomControlShadowAnimationHelper._shadowOutAnimationName = null;
    CustomControlShadowAnimationHelper._shadowInAnimationName = null;
    return CustomControlShadowAnimationHelper;
}());
exports.CustomControlShadowAnimationHelper = CustomControlShadowAnimationHelper;

},{}],117:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorData = /** @class */ (function () {
    function ErrorData() {
    }
    Object.defineProperty(ErrorData.prototype, "errorMessage", {
        get: function () {
            return this._errorMessage;
        },
        set: function (message) {
            this._errorMessage = message;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErrorData.prototype, "errorDetails", {
        get: function () {
            return this._errorDetails;
        },
        set: function (details) {
            this._errorDetails = details;
        },
        enumerable: true,
        configurable: true
    });
    return ErrorData;
}());
exports.ErrorData = ErrorData;

},{}],118:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"dup":61}],119:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var TelemetryManager_1 = require("../../Utilities/TelemetryManager");
var XrmProxy_1 = require("../../Utilities/XrmProxy");
var CustomControlMemoizationHelper = /** @class */ (function () {
    function CustomControlMemoizationHelper() {
        /**
         * The currently memoized map (generated on last render pass)
         */
        this._memoizedMap = {};
        /**
         * The in-progress memoized map (generated on current render pass)
         */
        this._newMemoizedMap = {};
        /**
         * Whether the last processed memoized map contains a composited control
         */
        this._isCompositing = false;
        /**
         * Whether the current translation contains a composited control
         */
        this._newIsCompositing = false;
        /**
         * Whether this helper thing it is currently in a render pass
         */
        this._midRender = false;
        /**
         * The memoized JSX root element, for instances where a render needs to be called but we don't want to update view.
         */
        this._memoizedRoot = null;
        /**
         * map of commanding _wrappers
         */
        this._wrapperMap = {};
        this.addCommandWrapper = this.addCommandWrapper.bind(this);
    }
    /**
     * Alert the memoization helper that a render is starting. Throw an error if it already believes itself to be in one.
     */
    CustomControlMemoizationHelper.prototype.startRenderFunction = function () {
        if (this._midRender) {
            var error = new Error("Start render called without start");
            XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Components", error, "Start Render, midRender " + this._midRender, [{ name: "APIName", value: TelemetryManager_1.COMPONENT_NAME + ".Components.CustomControlMemoizationHelper.startRenderFunction" }]);
            throw error;
        }
        this._isCompositing = false;
        this._midRender = true;
    };
    /**
     * Alert memoziation render funciton is ending. Flush old memoized data
     */
    CustomControlMemoizationHelper.prototype.stopRenderFunction = function () {
        if (!this._midRender) {
            var error = new Error("Stop render called without start");
            XrmProxy_1.default.Reporting.reportFailure(TelemetryManager_1.COMPONENT_NAME + ".Components", error, "Stop Render, midRender " + this._midRender, [{ name: "APIName", value: TelemetryManager_1.COMPONENT_NAME + ".Components.CustomControlMemoizationHelper.stopRenderFunction" }]);
            throw error;
        }
        this._isCompositing = this._newIsCompositing;
        this._memoizedMap = this._newMemoizedMap;
        this._newMemoizedMap = {};
        this._midRender = false;
    };
    /**
     * Clean up this object and release all references
     */
    CustomControlMemoizationHelper.prototype.destroy = function () {
        for (var key in this._wrapperMap) {
            this._wrapperMap[key].unmount();
        }
        this._wrapperMap = null;
        this._memoizedMap = null;
        this._newMemoizedMap = null;
        this._memoizedRoot = null;
        this._midRender = false;
    };
    /**
     * Get the virtual compopnent associated with a key
     * @param key The key
     * @returns a virtual component
     */
    CustomControlMemoizationHelper.prototype.getVirtualComponentByKey = function (key) {
        if (this._memoizedMap && this._memoizedMap[key]) {
            return this._memoizedMap[key].virtualComponent;
        }
        return null;
    };
    /**
     * Get the react element associated with a key
     * @param key The key
     * @returns a react element
     */
    CustomControlMemoizationHelper.prototype.getReactElementByKey = function (key) {
        if (this._memoizedMap && this._memoizedMap[key]) {
            return this._memoizedMap[key].reactElement;
        }
        return null;
    };
    /**
     * Keep an element from a previous render pass memoized on this one
     * @param key
     */
    CustomControlMemoizationHelper.prototype.retainElement = function (key) {
        if (this._midRender && this._memoizedMap) {
            this._newMemoizedMap[key] = this._memoizedMap[key];
        }
    };
    /**
     * Add an updated entry to the memoization table
     * If we are in a render cycle (e.g. during a virtual component's render function) add it to the temp table
     * If we are not (e.g. a standard control using bindDOMElement) add it to the permanent table.
     * @param key The entry key
     * @param element The entry's react element
     * @param vc The entry's virtual component
     */
    CustomControlMemoizationHelper.prototype.addUpdatedEntry = function (key, element, vc) {
        if (this._midRender && this._newMemoizedMap) {
            this._newMemoizedMap[key] = {
                reactElement: element,
                virtualComponent: vc,
            };
        }
        else if (this._memoizedMap) {
            this._memoizedMap[key] = {
                reactElement: element,
                virtualComponent: vc,
            };
        }
    };
    /**
     * Set whether this instance is compositing a control
     * @param value
     */
    CustomControlMemoizationHelper.prototype.setIsCompositing = function (value) {
        this._newIsCompositing = value;
    };
    /**
     * Gets whether this instance is compositing a control
     */
    CustomControlMemoizationHelper.prototype.getIsCompositing = function () {
        return this._isCompositing;
    };
    /**
     * Set the root for memoization
     * @param element
     */
    CustomControlMemoizationHelper.prototype.setRoot = function (element) {
        this._memoizedRoot = element;
    };
    /**
     * Get the root for memoization
     * @param element
     */
    CustomControlMemoizationHelper.prototype.getRoot = function () {
        return this._memoizedRoot;
    };
    CustomControlMemoizationHelper.prototype.addCommandWrapper = function (key, cw) {
        this._wrapperMap[key] = cw;
    };
    return CustomControlMemoizationHelper;
}());
exports.CustomControlMemoizationHelper = CustomControlMemoizationHelper;

},{"../../Utilities/TelemetryManager":109,"../../Utilities/XrmProxy":110}],120:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });

var View_1 = require("../../../CommonComponents/Primitive/View");
var Button_1 = require("../../../CommonComponents/Primitive/Button");
var MicrosoftIcon_1 = require("../../../CommonComponents/FontIcon/MicrosoftIcon");
var MicrosoftIconSymbol_1 = require("../../../CommonComponents/FontIcon/MicrosoftIconSymbol");
var CustomControlSeeMoreStyleHelper_1 = require("./CustomControlSeeMoreStyleHelper");
var CustomControlConstants_1 = require("../../Utilities/CustomControlConstants");
var XrmProxy_1 = require("../../Utilities/XrmProxy");
var COMPONENT_NAME = CustomControlConstants_1.CustomControlConstants.CCF + ".CustomControlSeeMoreHelper";
var CustomControlSeeMoreHelper = /** @class */ (function () {
    function CustomControlSeeMoreHelper() {
        /**
         * See more popup info
         */
        this._seeMorePopupInfo = null;
        /**
         * The status of the see more
         */
        this._seeMorePopupStatus = -1 /* NotInUse */;
        /**
         * The reference to the div element necessary to
         */
        this._seeMorePopupAnimDiv = null;
        /**
         * A timeout helper to reset the animation state if our listeners fail
         */
        this._seeMoreTimeoutHelper = -1;
        /**
         * Constant reference to the animation fade in function
         */
        this._animFadeInReference = this._seeMoreFadeIn.bind(this);
        /**
         * Constant reference to the animation end function
         */
        this._animEndReference = this._seeMoreEnd.bind(this);
        /**
         * Constant reference to the shouldGivePoppedOutDimensions function
         */
        this.shouldGivePoppedOutDimensions = this._shouldGivePoppedOutDimensions.bind(this);
    }
    /**
     * Clean up this object and release all references
     */
    CustomControlSeeMoreHelper.prototype.destroy = function () {
        if (this._seeMorePopupStatus !== -1 /* NotInUse */) {
            CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().seeMoreClose();
        }
        this._seeMorePopupInfo = null;
        this._seeMorePopupAnimDiv = null;
        this._animFadeInReference = null;
        this._animEndReference = null;
    };
    CustomControlSeeMoreHelper.prototype.getSeeMorePopupInfo = function () {
        return this._seeMorePopupInfo;
    };
    CustomControlSeeMoreHelper.prototype.getSeeMorePopupStatus = function () {
        return this._seeMorePopupStatus;
    };
    CustomControlSeeMoreHelper.prototype._shouldGivePoppedOutDimensions = function (isVirtual) {
        var seeMorePopupInfo = this.getSeeMorePopupInfo();
        var seeMorePopupStatus = this.getSeeMorePopupStatus();
        return (seeMorePopupInfo &&
            seeMorePopupStatus !== 4 /* ReturnFadeIn */ &&
            ((isVirtual && seeMorePopupStatus !== 0 /* PopFadeOutAndMove */) ||
                (!isVirtual && seeMorePopupStatus !== 3 /* ReturnFadeOutAndMove */)));
    };
    CustomControlSeeMoreHelper.prototype.seeMorePopup = function (component, seeMoreCallback, value, autosize, isRTL) {
        if (autosize === void 0) { autosize = false; }
        if (isRTL === void 0) { isRTL = false; }
        var componentInfo = component.getBoundingClientRect();
        this._seeMoreCallback = seeMoreCallback;
        var skipUpdateIfVirtual = true;
        switch (this._seeMorePopupStatus) {
            case -1 /* NotInUse */:
                if (!value)
                    return; // Already unpopped, nothing to do.
                CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().seeMoreOpen();
                this._seeMorePopupStatus = 0 /* PopFadeOutAndMove */;
                var docWidth = document.body.getBoundingClientRect().width;
                var endWidth = !autosize || componentInfo.width > (2 / 3) * docWidth
                    ? docWidth
                    : componentInfo.width > (1 / 3) * docWidth
                        ? (2 / 3) * docWidth
                        : (1 / 3) * docWidth;
                var mobileMWidth = 769;
                var isMobile = docWidth < mobileMWidth;
                var fullScreen = endWidth === docWidth && !isMobile;
                var stdmargin = 80;
                endWidth = endWidth - (fullScreen ? stdmargin : 0);
                var endHeight = document.body.getBoundingClientRect().height - (isMobile ? 0 : stdmargin);
                var endTop = 0.5 * endHeight - 0.5 * componentInfo.height + (isMobile ? 0 : 0.5 * stdmargin);
                var endLeft = (fullScreen ? 0.5 * stdmargin : 0) + (fullScreen ? endWidth : docWidth) / 2 - componentInfo.width / 2;
                this._seeMorePopupInfo = {
                    startHeight: componentInfo.height,
                    startWidth: componentInfo.width,
                    startLeft: componentInfo.left,
                    startTop: componentInfo.top,
                    endTop: endTop,
                    endLeft: endLeft,
                    endWidthInner: endWidth - 48,
                    endHeightInner: endHeight - 48,
                    endWidth: endWidth,
                    endHeight: endHeight,
                    isRTL: isRTL,
                };
                this._seeMoreCallback(skipUpdateIfVirtual);
                break;
            case 2 /* PoppedOut */:
                if (value)
                    return; // Already popped out, nothing to do.
                CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().seeMoreClose();
                this._seeMorePopupStatus = 3 /* ReturnFadeOutAndMove */;
                this._seeMoreCallback(skipUpdateIfVirtual);
                break;
        }
    };
    CustomControlSeeMoreHelper.prototype._getPopupDiv = function (isVirtual, isCompositing, component) {
        switch (this._seeMorePopupStatus) {
            case 0 /* PopFadeOutAndMove */:
            case 3 /* ReturnFadeOutAndMove */:
                if (isVirtual) {
                    return component.lastChild;
                }
                else {
                    return component.parentElement.parentElement;
                }
            case 4 /* ReturnFadeIn */:
                if (isVirtual) {
                    if (isCompositing) {
                        return component.lastChild.lastChild;
                    }
                    return component;
                }
                else {
                    return component.parentElement.parentElement;
                }
            case 1 /* PopFadeIn */:
                if (isVirtual) {
                    return component.lastChild.lastChild;
                }
                else {
                    return component.parentElement.parentElement;
                }
        }
        XrmProxy_1.default.Diagnostics.traceInfo(COMPONENT_NAME + "._getPopupDiv", "Get pop div success");
        return component;
    };
    CustomControlSeeMoreHelper.prototype._getCloseElement = function (component) {
        var element = component;
        /** Ideally component should point to the same div in the structure every time. However this is not the case for virtual
         *  vs standard controls by one DIV. Thus we have to adjust slightly for that scenario. It may be risky to change around how
         *  animations are happening if the above is not a mistake.
         *  TODO: FOLLOW UP AND TRY TO INVESTIGATE WHY ABOVE IS NOT TRUE
         */
        if (element) {
            if (element.id.endsWith("_outer")) {
                element = element.firstChild;
            }
            for (var i = 0; i < element.children.length; i++) {
                if (element.children[i].id === "closeButtonContainer") {
                    return element.children[i].firstChild;
                }
            }
        }
        return null;
    };
    CustomControlSeeMoreHelper.prototype.checkOnPopupStatus = function (isVirtual, isCompositing, component) {
        if (this._seeMoreTimeoutHelper !== -1) {
            // Clear any existing timeout since we will set a new timeout
            window.clearTimeout(this._seeMoreTimeoutHelper);
            this._seeMoreTimeoutHelper = -1;
        }
        switch (this._seeMorePopupStatus) {
            case 0 /* PopFadeOutAndMove */:
            case 3 /* ReturnFadeOutAndMove */:
                this._seeMorePopupAnimDiv = this._getPopupDiv(isVirtual, isCompositing, component);
                this._seeMorePopupAnimDiv.addEventListener("animationend", this._animFadeInReference);
                this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd", this._animFadeInReference);
                this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreFadeIn.bind(this), 2500);
                break;
            case 4 /* ReturnFadeIn */:
                this._seeMorePopupAnimDiv = this._getPopupDiv(isVirtual, isCompositing, component);
                this._seeMorePopupAnimDiv.addEventListener("animationend", this._animEndReference);
                this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd", this._animEndReference);
                this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreEnd.bind(this), 1000);
                break;
            case 1 /* PopFadeIn */:
                this._seeMorePopupAnimDiv = this._getPopupDiv(isVirtual, isCompositing, component);
                this._seeMorePopupAnimDiv.addEventListener("animationend", this._animFadeInReference);
                this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd", this._animFadeInReference);
                this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreFadeIn.bind(this), 1000);
                break;
        }
    };
    CustomControlSeeMoreHelper.prototype._seeMoreFadeIn = function () {
        if (this._seeMoreTimeoutHelper !== -1) {
            window.clearTimeout(this._seeMoreTimeoutHelper);
            this._seeMoreTimeoutHelper = -1;
        }
        var skipUpdateIfVirtual = false;
        switch (this._seeMorePopupStatus) {
            case 1 /* PopFadeIn */:
                this._seeMorePopupStatus = 2 /* PoppedOut */;
                this._getCloseElement(this._seeMorePopupAnimDiv).focus();
                this._seeMorePopupAnimDiv.removeEventListener("animationend", this._animFadeInReference);
                this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd", this._animFadeInReference);
                break;
            case 0 /* PopFadeOutAndMove */:
                this._seeMorePopupStatus = 1 /* PopFadeIn */;
                this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreFadeIn.bind(this), 1500);
                this._seeMoreCallback(skipUpdateIfVirtual);
                break;
            case 3 /* ReturnFadeOutAndMove */:
                this._seeMorePopupStatus = 4 /* ReturnFadeIn */;
                this._seeMorePopupAnimDiv.removeEventListener("animationend", this._animFadeInReference);
                this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd", this._animFadeInReference);
                this._seeMorePopupAnimDiv = null;
                this._seeMoreCallback(skipUpdateIfVirtual);
        }
    };
    CustomControlSeeMoreHelper.prototype._seeMoreEnd = function () {
        if (this._seeMoreTimeoutHelper !== -1) {
            window.clearTimeout(this._seeMoreTimeoutHelper);
            this._seeMoreTimeoutHelper = -1;
        }
        this._seeMorePopupAnimDiv.removeEventListener("animationend", this._animEndReference);
        this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd", this._animEndReference);
        this._seeMorePopupAnimDiv = null;
        this._seeMorePopupStatus = -1 /* NotInUse */;
        this._seeMorePopupInfo = null;
        var skipUpdateIfVirtual = true;
        this._seeMoreCallback(skipUpdateIfVirtual);
    };
    CustomControlSeeMoreHelper.prototype.renderSpacer = function (isVirtual, isCompositing) {
        if (isVirtual === void 0) { isVirtual = true; }
        if (isCompositing === void 0) { isCompositing = false; }
        if (isVirtual &&
            !isCompositing &&
            (this._seeMorePopupStatus === -1 /* NotInUse */ || this._seeMorePopupStatus === 4 /* ReturnFadeIn */)) {
            XrmProxy_1.default.Diagnostics.traceInfo(COMPONENT_NAME + ".renderSpacer", "Render Spacer return null");
            return null;
        }
        var outerStyle = this._seeMorePopupStatus === 1 /* PopFadeIn */ ||
            this._seeMorePopupStatus === 2 /* PoppedOut */ ||
            this._seeMorePopupStatus === 3 /* ReturnFadeOutAndMove */
            ? {
                height: "24px",
                width: "100%",
                backgroundColor: "white",
            }
            : { display: "none" };
        return React.createElement(View_1.View, { key: "ccf_spacer", style: outerStyle });
    };
    CustomControlSeeMoreHelper.prototype.renderCloseButton = function (closeCallback, isVirtual, isCompositing, isRTL) {
        if (isVirtual === void 0) { isVirtual = true; }
        if (isCompositing === void 0) { isCompositing = false; }
        if (isRTL === void 0) { isRTL = false; }
        if (isVirtual &&
            !isCompositing &&
            (this._seeMorePopupStatus === -1 /* NotInUse */ || this._seeMorePopupStatus === 4 /* ReturnFadeIn */)) {
            return null;
        }
        var iconStyle = {
            fontSize: "16px",
            color: "#333333",
            position: "absolute",
            top: "0px",
            right: "0px",
            left: "0px",
            height: "48px",
            width: "48px",
            textAlign: "center",
            paddingTop: "16px",
            cursor: "pointer",
        };
        var buttonStyle = {
            backgroundColor: "transparent",
            border: "none",
            position: "absolute",
            top: "0px",
            right: isRTL ? "" : "-24px",
            left: isRTL ? "-24px" : "",
            height: "48px",
            width: "48px",
            textAlign: "center",
            paddingTop: "16px",
            cursor: "pointer",
        };
        var outerStyle = this._seeMorePopupStatus === 1 /* PopFadeIn */ ||
            this._seeMorePopupStatus === 2 /* PoppedOut */ ||
            this._seeMorePopupStatus === 3 /* ReturnFadeOutAndMove */
            ? {
                height: "48px",
                width: "100%",
                top: "-24px",
                position: "absolute",
            }
            : { display: "none" };
        return (React.createElement(View_1.View, { key: "closeButtonContainer", id: "closeButtonContainer", style: outerStyle },
            React.createElement(Button_1.Button, { key: "closeButton", id: "closeButton", style: buttonStyle, tabIndex: 0, title: "Close Fullscreen Control button", onClick: closeCallback, accessibilityLabel: "Close Fullscreen Control button" },
                React.createElement(MicrosoftIcon_1.MicrosoftIcon, { key: "closeButtonIcon", style: iconStyle, type: MicrosoftIconSymbol_1.MicrosoftIconSymbol.Close }))));
    };
    return CustomControlSeeMoreHelper;
}());
exports.CustomControlSeeMoreHelper = CustomControlSeeMoreHelper;

},{"../../../CommonComponents/FontIcon/MicrosoftIcon":10,"../../../CommonComponents/FontIcon/MicrosoftIconSymbol":11,"../../../CommonComponents/Primitive/Button":12,"../../../CommonComponents/Primitive/View":55,"../../Utilities/CustomControlConstants":98,"../../Utilities/XrmProxy":110,"./CustomControlSeeMoreStyleHelper":121,"react":undefined}],121:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62}],122:[function(require,module,exports){
"use strict";
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });

var CCFUtilities = require("../Models/CustomControlUtilityPointers");
var ManifestType_1 = require("../Utilities/ManifestType");
var CustomControlExposedInterfaces_1 = require("../Models/CustomControlExposedInterfaces");
var CustomControlHelper_1 = require("../Utilities/CustomControlHelper");
var Button_1 = require("../../CommonComponents/Primitive/Button");
var ComboBox_1 = require("../../CommonComponents/Primitive/ComboBox");
var Hyperlink_1 = require("../../CommonComponents/Primitive/Hyperlink");
var Image_1 = require("../../CommonComponents/Primitive/Image");
var IFrame_1 = require("../../CommonComponents/Primitive/IFrame");
var CrmIcon_1 = require("../../CommonComponents/FontIcon/CrmIcon");
var EntityIcon_1 = require("../../CommonComponents/FontIcon/EntityIcon");
var MicrosoftIcon_1 = require("../../CommonComponents/FontIcon/MicrosoftIcon");
var RootPopup_1 = require("../../CommonComponents/Primitive/Popup/RootPopup");
var Popup_1 = require("../../CommonComponents/Primitive/Popup/Popup");
var Flyout_1 = require("../../CommonComponents/Primitive/Flyout");
var LivePersonaCardHoverTarget_1 = require("../../CommonComponents/Primitive/LivePersonaCardHoverTarget");
var List_1 = require("../../CommonComponents/Primitive/List");
var ListItem_1 = require("../../CommonComponents/Primitive/ListItem");
var ScrollView_1 = require("../../CommonComponents/Primitive/ScrollView");
var Switch_1 = require("../../CommonComponents/Primitive/Switch");
var Text_1 = require("../../CommonComponents/Primitive/Text");
var Label_1 = require("../../CommonComponents/Primitive/Label");
var TextInput_1 = require("../../CommonComponents/Primitive/TextInput");
var FileInput_1 = require("../../CommonComponents/Primitive/FileInput");
var View_1 = require("../../CommonComponents/Primitive/View");
var EntityImage_1 = require("../../CommonComponents/Primitive/EntityImage");
var ProgressIndicator_1 = require("../../CommonComponents/Primitive/ProgressIndicator");
var HorizontalScroll_1 = require("../../CommonComponents/Common/HorizontalScroll");
var ViewSelectorControl_1 = require("../../CommonComponents/Common/ViewSelectorControl");
var PresenceIndicator_1 = require("../../CommonComponents/Primitive/PresenceIndicator");
var PlaceHolder_1 = require("../../CommonComponents/Primitive/PlaceHolder");
var Table_1 = require("../../CommonComponents/Primitive/Table/Table");
var TableBody_1 = require("../../CommonComponents/Primitive/Table/TableBody");
var TableCaption_1 = require("../../CommonComponents/Primitive/Table/TableCaption");
var TableCell_1 = require("../../CommonComponents/Primitive/Table/TableCell");
var TableFooter_1 = require("../../CommonComponents/Primitive/Table/TableFooter");
var TableHeader_1 = require("../../CommonComponents/Primitive/Table/TableHeader");
var TableHeaderCell_1 = require("../../CommonComponents/Primitive/Table/TableHeaderCell");
var TableRow_1 = require("../../CommonComponents/Primitive/Table/TableRow");
var Option_1 = require("../../CommonComponents/Primitive/Select/Option");
var Select_1 = require("../../CommonComponents/Primitive/Select/Select");
var RadioInput_1 = require("../../CommonComponents/Primitive/Radio/RadioInput");
var CommandingWrapper_1 = require("../Models/CommandingWrapper");
var CustomControlConstants_1 = require("../Utilities/CustomControlConstants");
var FlexibleText_1 = require("../../CommonComponents/Primitive/FlexibleText");
var DefaultControlMapper_1 = require("../Utilities/DefaultControlMapper");
var GuidHelper_1 = require("../Utilities/GuidHelper");
/**
 * Stores the React element object type. Based on technique in the original inline element transform.
 */
var REACT_ELEMENT_TYPE = (typeof Symbol === "function" && Symbol.for("react.element")) || 0xeac7;
/**
 * Default key for a child that thas no key
 */
var KEYLESS_CHILD_ID = "keylessChild";
/**
 * Default key for a root node with no key
 */
var KEYLESS_ROOT_ID = "root";
/**
 * VirtualComponentTranslator class : helps in translating virtual components to react components
 */
var VirtualComponentTranslator = /** @class */ (function () {
    function VirtualComponentTranslator() {
    }
    /**
     * returns a renderable element for a virtual component
     * @param component the visual component to render
     * @param props custom control props of the parent
     * @param hostData data from the custom control compositing this virtual component
     * @param memHelper the host root's memoization helper
     * @returns a virtual dom element
     */
    VirtualComponentTranslator.renderVirtualComponent = function (component, props, hostData, memHelper, purgeMemHelper) {
        if (purgeMemHelper === void 0) { purgeMemHelper = true; }
        if (purgeMemHelper) {
            memHelper.startRenderFunction();
        }
        if (!component) {
            if (purgeMemHelper) {
                memHelper.stopRenderFunction();
            }
            return null;
        }
        var element = VirtualComponentTranslator.generateReactComponent(component, null, KEYLESS_ROOT_ID, props, hostData, memHelper, null, VirtualComponentTranslator.generateReactChildren(VirtualComponentTranslator._getComponentKey(component, null, KEYLESS_ROOT_ID), component.getChildren(), props, hostData, memHelper, VirtualComponentTranslator._generateFlyoutParentId(props, component)));
        if (purgeMemHelper) {
            memHelper.stopRenderFunction();
        }
        return element;
    };
    /**
     * Returns the JSX element/component based on the type
     * @param elementType the element type
     * @param props the props
     * @param componentProps the component props
     * @param children children
     */
    VirtualComponentTranslator.generateJSXElement = function (elementType, props, children, ownProps, hostData, complexKeeper) {
        if (props == null) {
            return React.createElement(View_1.View, null, "\"UNKNOWN COMPONENT\"");
        }
        var id = props ? CustomControlHelper_1.buildUniqueCustomControlId(ownProps, props.id, props.absoluteId) : "";
        var testhooks = VirtualComponentTranslator._updateDataIdInTesthooks(ownProps, props);
        var learningPathControlId = props[CustomControlConstants_1.CustomControlConstants.LearningPathAttributeName];
        if (learningPathControlId) {
            testhooks[CustomControlConstants_1.CustomControlConstants.LearningPathAttributeSuffix] = learningPathControlId;
        }
        switch (elementType.toUpperCase()) {
            case "CRMICON":
                var fontIconProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: CrmIcon_1.CrmIcon,
                    props: {
                        id: id,
                        testhooks: testhooks,
                        type: fontIconProps.type,
                        style: fontIconProps.style,
                        hidden: fontIconProps.hidden,
                        accessibilityHasPopup: fontIconProps.accessibilityHasPopup,
                        accessibilityExpanded: fontIconProps.accessibilityExpanded,
                        accessibilityLabel: fontIconProps.accessibilityLabel,
                        accessibilityHidden: fontIconProps.accessibilityHidden,
                        labelledByElementId: fontIconProps.labelledByElementId,
                        describedByElementId: fontIconProps.describedByElementId,
                        controlsElementId: fontIconProps.controlsElementId,
                        ownsElementId: fontIconProps.ownsElementId,
                        role: fontIconProps.role,
                        tabIndex: fontIconProps.tabIndex,
                        onClick: fontIconProps.onClick,
                        onFocus: fontIconProps.onFocus,
                        onBlur: fontIconProps.onBlur,
                        onPointerDown: fontIconProps.onPointerDown,
                        onPointerUp: fontIconProps.onPointerUp,
                        onKeyDown: fontIconProps.onKeyDown,
                        onKeyUp: fontIconProps.onKeyUp,
                        title: fontIconProps.title,
                    },
                    key: fontIconProps.key,
                    ref: null,
                    _owner: null,
                };
            case "ENTITYICON":
                var entityIconProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: EntityIcon_1.EntityIcon,
                    props: {
                        id: id,
                        testhooks: testhooks,
                        type: entityIconProps.type,
                        style: entityIconProps.style,
                        hidden: entityIconProps.hidden,
                        accessibilityHasPopup: entityIconProps.accessibilityHasPopup,
                        accessibilityExpanded: entityIconProps.accessibilityExpanded,
                        accessibilityLabel: entityIconProps.accessibilityLabel,
                        accessibilityHidden: entityIconProps.accessibilityHidden,
                        labelledByElementId: entityIconProps.labelledByElementId,
                        describedByElementId: entityIconProps.describedByElementId,
                        controlsElementId: entityIconProps.controlsElementId,
                        ownsElementId: entityIconProps.ownsElementId,
                        role: entityIconProps.role,
                        tabIndex: entityIconProps.tabIndex,
                        onClick: entityIconProps.onClick,
                        onFocus: entityIconProps.onFocus,
                        onBlur: entityIconProps.onBlur,
                        onPointerDown: entityIconProps.onPointerDown,
                        onPointerUp: entityIconProps.onPointerUp,
                        onKeyDown: entityIconProps.onKeyDown,
                        onKeyUp: entityIconProps.onKeyUp,
                        title: entityIconProps.title,
                    },
                    key: entityIconProps.key,
                    ref: null,
                    _owner: null,
                };
            case "MICROSOFTICON":
                var microsoftIconProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: MicrosoftIcon_1.MicrosoftIcon,
                    props: {
                        id: id,
                        testhooks: testhooks,
                        type: microsoftIconProps.type,
                        style: microsoftIconProps.style,
                        hidden: microsoftIconProps.hidden,
                        accessibilityHasPopup: microsoftIconProps.accessibilityHasPopup,
                        accessibilityExpanded: microsoftIconProps.accessibilityExpanded,
                        accessibilityLabel: microsoftIconProps.accessibilityLabel,
                        accessibilityHidden: microsoftIconProps.accessibilityHidden,
                        labelledByElementId: microsoftIconProps.labelledByElementId,
                        describedByElementId: microsoftIconProps.describedByElementId,
                        controlsElementId: microsoftIconProps.controlsElementId,
                        ownsElementId: microsoftIconProps.ownsElementId,
                        role: microsoftIconProps.role,
                        tabIndex: microsoftIconProps.tabIndex,
                        onClick: microsoftIconProps.onClick,
                        onFocus: microsoftIconProps.onFocus,
                        onBlur: microsoftIconProps.onBlur,
                        onPointerDown: microsoftIconProps.onPointerDown,
                        onPointerUp: microsoftIconProps.onPointerUp,
                        onKeyDown: microsoftIconProps.onKeyDown,
                        onKeyUp: microsoftIconProps.onKeyUp,
                        title: microsoftIconProps.title,
                    },
                    key: microsoftIconProps.key,
                    ref: null,
                    _owner: null,
                };
            case "BOOLEAN":
                var switchProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Switch_1.Switch,
                    props: {
                        children: children,
                        style: switchProps.style,
                        name: switchProps.name,
                        disabled: switchProps.disabled,
                        value: switchProps.value,
                        id: id,
                        testhooks: testhooks,
                        hidden: switchProps.hidden,
                        accessibilityHasPopup: switchProps.accessibilityHasPopup,
                        accessibilityExpanded: switchProps.accessibilityExpanded,
                        accessibilityLabel: switchProps.accessibilityLabel,
                        accessibilityLive: switchProps.accessibilityLive,
                        accessibilityHidden: switchProps.accessibilityHidden,
                        accessibilityChecked: switchProps.accessibilityChecked,
                        labelledByElementId: switchProps.labelledByElementId,
                        describedByElementId: switchProps.describedByElementId,
                        controlsElementId: switchProps.controlsElementId,
                        ownsElementId: switchProps.ownsElementId,
                        role: switchProps.role,
                        tabIndex: switchProps.tabIndex,
                        onValueChange: switchProps.onValueChange,
                        onClick: switchProps.onClick,
                        onFocus: switchProps.onFocus,
                        onBlur: switchProps.onBlur,
                        title: switchProps.title,
                        displayAs: switchProps.displayAs,
                        displayValue: switchProps.displayValue,
                        defaultValue: switchProps.defaultValue,
                        options: switchProps.options,
                        onOptionSetValueChange: switchProps.onOptionSetValueChange,
                    },
                    key: switchProps.key,
                    ref: null,
                    _owner: null,
                };
            case "BUTTON":
                var buttonProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Button_1.Button,
                    props: {
                        children: children,
                        testhooks: testhooks,
                        style: buttonProps.style,
                        ownsElementId: buttonProps.ownsElementId,
                        accessKey: buttonProps.accessKey,
                        accessibilityLabel: buttonProps.accessibilityLabel,
                        id: id,
                        disabled: buttonProps.disabled,
                        hidden: buttonProps.hidden,
                        accessibilityDisabled: buttonProps.accessibilityDisabled,
                        accessibilityHasPopup: buttonProps.accessibilityHasPopup,
                        accessibilityExpanded: buttonProps.accessibilityExpanded,
                        accessibilityHidden: buttonProps.accessibilityHidden,
                        activeDescendantId: buttonProps.activeDescendantId,
                        labelledByElementId: buttonProps.labelledByElementId,
                        describedByElementId: buttonProps.describedByElementId,
                        controlsElementId: buttonProps.controlsElementId,
                        isSelected: buttonProps.isSelected,
                        role: buttonProps.role,
                        tabIndex: buttonProps.tabIndex,
                        onClick: buttonProps.onClick,
                        onPointerDown: buttonProps.onPointerDown,
                        onFocus: buttonProps.onFocus,
                        onBlur: buttonProps.onBlur,
                        onKeyUp: buttonProps.onKeyUp,
                        onKeyDown: buttonProps.onKeyDown,
                        title: buttonProps.title,
                        className: buttonProps.className,
                    },
                    key: buttonProps.key,
                    ref: null,
                    _owner: null,
                };
            case "COMBOBOX":
                var comboBoxProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: ComboBox_1.ComboBox,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        name: comboBoxProps.name,
                        options: comboBoxProps.options,
                        value: comboBoxProps.value,
                        placeholder: comboBoxProps.placeholder,
                        pageSize: comboBoxProps.pageSize,
                        freeTextMode: comboBoxProps.freeTextMode,
                        defaultValue: comboBoxProps.defaultValue,
                        disabled: comboBoxProps.disabled,
                        readOnly: comboBoxProps.readOnly,
                        onChange: comboBoxProps.onChange,
                        onOptionSelected: comboBoxProps.onOptionSelected,
                        onClick: comboBoxProps.onClick,
                        onBlur: comboBoxProps.onBlur,
                        onFocus: comboBoxProps.onFocus,
                        onMouseEnter: comboBoxProps.onMouseEnter,
                        onMouseLeave: comboBoxProps.onMouseLeave,
                        style: comboBoxProps.style,
                        hideArrow: comboBoxProps.hideArrow,
                        accessibilityLabel: comboBoxProps.accessibilityLabel,
                        accessibilityRequired: comboBoxProps.accessibilityRequired,
                        labelledByElementId: comboBoxProps.labelledByElementId,
                        describedByElementId: comboBoxProps.describedByElementId,
                        createAccessibilityComponent: ownProps.actions.createAccessibilityComponent,
                        createKeyboardShortcut: ownProps.actions.createKeyboardShortcut,
                        title: comboBoxProps.title,
                        parentCustomControlId: ownProps.controlId,
                        parentFlyoutRoot: ownProps.parentDefinedControlProps
                            ? ownProps.parentDefinedControlProps.parentFlyoutId
                            : null,
                        rootZIndex: hostData && hostData.isInSeeMoreMode,
                        textInputStyle: comboBoxProps.textInputStyle,
                        textStyle: comboBoxProps.textStyle,
                        hideInternalId: comboBoxProps.hideInternalId,
                        relativeToElementId: comboBoxProps.relativeToElementId,
                        ignoreFreeTextValueChange: comboBoxProps.suppressFreeTextChangeCallback,
                    },
                    key: comboBoxProps.key,
                    ref: null,
                    _owner: null,
                };
            case "CONTAINER":
                var viewProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: View_1.View,
                    props: {
                        children: children,
                        style: viewProps.style,
                        id: id,
                        testhooks: testhooks,
                        role: viewProps.role,
                        semanticTag: viewProps.semanticTag,
                        accessKey: viewProps.accessKey,
                        forceMeasure: viewProps.forceMeasure,
                        onMeasuring: viewProps.onMeasuring,
                        isRequestedMeasuring: viewProps.isRequestedMeasuring,
                        isRTL: viewProps.isRTL,
                        hidden: viewProps.hidden,
                        accessibilityHasPopup: viewProps.accessibilityHasPopup,
                        accessibilityExpanded: viewProps.accessibilityExpanded,
                        accessibilityLabel: viewProps.accessibilityLabel,
                        accessibilityHidden: viewProps.accessibilityHidden,
                        accessibilityLive: viewProps.accessibilityLive,
                        accessibilityRelevant: viewProps.accessibilityRelevant,
                        accessibilityAtomic: viewProps.accessibilityAtomic,
                        accessibilityValueMin: viewProps.accessibilityValueMin,
                        accessibilityValueMax: viewProps.accessibilityValueMax,
                        accessibilityValueNow: viewProps.accessibilityValueNow,
                        accessibilityValueText: viewProps.accessibilityValueText,
                        accessibilityRequired: viewProps.accessibilityRequired,
                        accessibilityReadOnly: viewProps.accessibilityReadOnly,
                        accessibilityAriaOrientation: viewProps.accessibilityAriaOrientation,
                        labelledByElementId: viewProps.labelledByElementId,
                        describedByElementId: viewProps.describedByElementId,
                        controlsElementId: viewProps.controlsElementId,
                        ownsElementId: viewProps.ownsElementId,
                        isSelected: viewProps.isSelected,
                        tabIndex: viewProps.tabIndex,
                        onClick: viewProps.onClick,
                        onDoubleClick: viewProps.onDoubleClick,
                        onDrag: viewProps.onDrag,
                        onDragEnd: viewProps.onDragEnd,
                        onDragEnter: viewProps.onDragEnter,
                        onDragExit: viewProps.onDragExit,
                        onDragLeave: viewProps.onDragLeave,
                        onDragOver: viewProps.onDragOver,
                        onDragStart: viewProps.onDragStart,
                        onDrop: viewProps.onDrop,
                        onKeyUp: viewProps.onKeyUp,
                        onKeyDown: viewProps.onKeyDown,
                        onPointerUp: viewProps.onPointerUp,
                        onPointerMove: viewProps.onPointerMove,
                        onPointerDown: viewProps.onPointerDown,
                        onPointerEnter: viewProps.onPointerEnter,
                        onPointerLeave: viewProps.onPointerLeave,
                        onFocus: viewProps.onFocus,
                        onBlur: viewProps.onBlur,
                        title: viewProps.title,
                        isWithinATopMostSeeMore: hostData.isInTopMostSeeMore,
                        className: viewProps.className,
                    },
                    key: viewProps.key,
                    ref: null,
                    _owner: null,
                };
            case "HYPERLINK":
                var hyperlinkProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Hyperlink_1.Hyperlink,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        style: hyperlinkProps.style,
                        href: hyperlinkProps.href,
                        target: hyperlinkProps.target,
                        hidden: hyperlinkProps.hidden,
                        accessibilityHasPopup: hyperlinkProps.accessibilityHasPopup,
                        accessibilityExpanded: hyperlinkProps.accessibilityExpanded,
                        accessibilityLabel: hyperlinkProps.accessibilityLabel,
                        accessibilityHidden: hyperlinkProps.accessibilityHidden,
                        labelledByElementId: hyperlinkProps.labelledByElementId,
                        describedByElementId: hyperlinkProps.describedByElementId,
                        controlsElementId: hyperlinkProps.controlsElementId,
                        ownsElementId: hyperlinkProps.ownsElementId,
                        role: hyperlinkProps.role,
                        tabIndex: hyperlinkProps.tabIndex,
                        onClick: hyperlinkProps.onClick,
                        onFocus: hyperlinkProps.onFocus,
                        onBlur: hyperlinkProps.onBlur,
                        onKeyDown: hyperlinkProps.onKeyDown,
                        onKeyUp: hyperlinkProps.onKeyUp,
                        title: hyperlinkProps.title,
                    },
                    key: hyperlinkProps.key,
                    ref: null,
                    _owner: null,
                };
            case "IMG":
                var imgProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Image_1.Image,
                    props: {
                        id: id,
                        testhooks: testhooks,
                        style: imgProps.style,
                        altText: imgProps.altText,
                        source: imgProps.source,
                        hidden: imgProps.hidden,
                        accessibilityHasPopup: imgProps.accessibilityHasPopup,
                        accessibilityExpanded: imgProps.accessibilityExpanded,
                        accessibilityLabel: imgProps.accessibilityLabel,
                        accessibilityHidden: imgProps.accessibilityHidden,
                        labelledByElementId: imgProps.labelledByElementId,
                        describedByElementId: imgProps.describedByElementId,
                        controlsElementId: imgProps.controlsElementId,
                        ownsElementId: imgProps.ownsElementId,
                        role: imgProps.role,
                        tabIndex: imgProps.tabIndex,
                        onLoad: imgProps.onLoad,
                        onClick: imgProps.onClick,
                        onFocus: imgProps.onFocus,
                        onBlur: imgProps.onBlur,
                        title: imgProps.title,
                    },
                    key: imgProps.key,
                    ref: null,
                    _owner: null,
                };
            case "IFRAME":
                var iframeProps = props;
                var isDefaultIframecontrol = ownProps.descriptor.ClassId && GuidHelper_1.areGuidsSame(DefaultControlMapper_1.IFRAME_CLASS_ID, ownProps.descriptor.ClassId.guid);
                var onReadyStateComplete = ownProps.actions.runOnReadyStateComplete && isDefaultIframecontrol
                    ? function () {
                        ownProps.actions.runOnReadyStateComplete(ownProps.contextToken, ownProps.id, ownProps.controlId);
                    }
                    : null;
                return (React.createElement(IFrame_1.IFrame, { id: iframeProps.id, testhooks: testhooks, title: iframeProps.title, style: iframeProps.style, onLoad: iframeProps.onLoad, src: iframeProps.src, scrolling: iframeProps.scrolling, security: iframeProps.security, onMessage: iframeProps.onMessage, tabIndex: iframeProps.tabIndex, accessibilityLabel: iframeProps.accessibilityLabel, registerSendMessageHandler: iframeProps.registerSendMessageHandler, onReadyStateComplete: onReadyStateComplete, key: iframeProps.src }));
            case "LABEL":
                var labelProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Label_1.Label,
                    props: {
                        children: children,
                        id: id,
                        style: labelProps.style,
                        role: labelProps.role,
                        forElementId: labelProps.forElementId,
                        hidden: labelProps.hidden,
                        accessibilityHasPopup: labelProps.accessibilityHasPopup,
                        accessibilityExpanded: labelProps.accessibilityExpanded,
                        accessibilityLabel: labelProps.accessibilityLabel,
                        accessibilityHidden: labelProps.accessibilityHidden,
                        accessibilityLive: labelProps.accessibilityLive,
                        accessibilityRelevant: labelProps.accessibilityRelevant,
                        accessibilityAtomic: labelProps.accessibilityAtomic,
                        labelledByElementId: labelProps.labelledByElementId,
                        describedByElementId: labelProps.describedByElementId,
                        controlsElementId: labelProps.controlsElementId,
                        ownsElementId: labelProps.ownsElementId,
                        tabIndex: labelProps.tabIndex,
                        onClick: labelProps.onClick,
                        onFocus: labelProps.onFocus,
                        onKeyUp: labelProps.onKeyUp,
                        onKeyDown: labelProps.onKeyDown,
                        onBlur: labelProps.onBlur,
                        testhooks: testhooks,
                        title: labelProps.title,
                    },
                    key: labelProps.key,
                    ref: null,
                    _owner: null,
                };
            case "LIST":
                var listProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: List_1.List,
                    props: {
                        accessibilityExpanded: listProps.accessibilityExpanded,
                        accessibilityHasPopup: listProps.accessibilityHasPopup,
                        accessibilityLabel: listProps.accessibilityLabel,
                        accessibilityHidden: listProps.accessibilityHidden,
                        accessibilityDisabled: listProps.accessibilityDisabled,
                        accessibilityReadOnly: listProps.accessibilityReadOnly,
                        accessibilityRequired: listProps.accessibilityRequired,
                        announceAccessibilityNotification: listProps.announceAccessibilityNotification,
                        children: children,
                        controlsElementId: listProps.controlsElementId,
                        describedByElementId: listProps.describedByElementId,
                        hidden: listProps.hidden,
                        id: id,
                        testhooks: testhooks,
                        labelledByElementId: listProps.labelledByElementId,
                        notificationType: listProps.notificationType,
                        onBlur: listProps.onBlur,
                        onClick: listProps.onClick,
                        onFocus: listProps.onFocus,
                        onKeyUp: listProps.onKeyUp,
                        onKeyDown: listProps.onKeyDown,
                        ownsElementId: listProps.ownsElementId,
                        refCallback: listProps.refCallback,
                        role: listProps.role,
                        style: listProps.style,
                        tabIndex: listProps.tabIndex,
                        title: listProps.title,
                    },
                    key: listProps.key,
                    ref: null,
                    _owner: null,
                };
            case "LISTITEM":
                var listItemProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: ListItem_1.ListItem,
                    props: {
                        accessibilityExpanded: listItemProps.accessibilityExpanded,
                        accessibilityHasPopup: listItemProps.accessibilityHasPopup,
                        accessibilityLabel: listItemProps.accessibilityLabel,
                        accessibilityHidden: listItemProps.accessibilityHidden,
                        accessibilityDisabled: listItemProps.accessibilityDisabled,
                        accessibilityReadOnly: listItemProps.accessibilityReadOnly,
                        accessibilityLevel: listItemProps.accessibilityLevel,
                        accessibilityCurrent: listItemProps.accessibilityCurrent,
                        accessibilityRequired: listItemProps.accessibilityRequired,
                        children: children,
                        controlsElementId: listItemProps.controlsElementId,
                        describedByElementId: listItemProps.describedByElementId,
                        hidden: listItemProps.hidden,
                        id: id,
                        testhooks: testhooks,
                        labelledByElementId: listItemProps.labelledByElementId,
                        onBlur: listItemProps.onBlur,
                        onClick: listItemProps.onClick,
                        onClickCapture: listItemProps.onClickCapture,
                        onFocus: listItemProps.onFocus,
                        onPointerOver: listItemProps.onPointerOver,
                        onPointerOut: listItemProps.onPointerOut,
                        onPointerDown: listItemProps.onPointerDown,
                        onPointerMove: listItemProps.onPointerMove,
                        onPointerUp: listItemProps.onPointerUp,
                        onKeyUp: listItemProps.onKeyUp,
                        onKeyDown: listItemProps.onKeyDown,
                        ownsElementId: listItemProps.ownsElementId,
                        role: listItemProps.role,
                        style: listItemProps.style,
                        tabIndex: listItemProps.tabIndex,
                        isSelected: listItemProps.isSelected,
                        title: listItemProps.title,
                    },
                    key: listItemProps.key,
                    ref: null,
                    _owner: null,
                };
            case "LIVEPERSONACARDHOVERTARGET":
                var lpcprops = props;
                var onKeyDownContainerId = CustomControlHelper_1.buildUniqueCustomControlId(ownProps, lpcprops.onKeyDownContainerId);
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: LivePersonaCardHoverTarget_1.LivePersonaCardHoverTarget,
                    props: {
                        accessibilityLabel: lpcprops.accessibilityLabel,
                        children: children,
                        displayName: lpcprops.displayName,
                        emailAddress: lpcprops.emailAddress,
                        entityReference: lpcprops.entityReference,
                        id: lpcprops.id,
                        onKeyDownContainerId: onKeyDownContainerId,
                        personaType: lpcprops.personaType,
                        recordId: lpcprops.recordId,
                        registerHasLivePersonaCardLoadedCallback: lpcprops.registerHasLivePersonaCardLoadedCallback,
                        registerOpenCardCallback: lpcprops.registerOpenCardCallback,
                        testhooks: testhooks,
                    },
                    key: lpcprops.key,
                    ref: null,
                    _owner: null,
                };
            case "POPUP":
                var popupProps = props;
                var component = React.createElement(Popup_1.Popup, __assign({}, popupProps, { id: popupProps.id, children: children }));
                if (popupProps.type === Popup_1.PopupType.Root) {
                    return (React.createElement(RootPopup_1.RootPopup, { key: popupProps.key, parentCustomControlId: ownProps.controlId, id: popupProps.name, openPopup: ownProps.actions.openPopup, closePopup: ownProps.actions.closePopup, rootNodes: ownProps.popupRootNodes }, component));
                }
                return component;
            case "FLYOUT":
                var flyoutProps = props;
                var prefixedRelativeToElementId = CustomControlHelper_1.buildUniqueCustomControlId(ownProps, flyoutProps.relativeToElementId, props.absoluteId);
                var customControlElementId = CustomControlHelper_1.buildUniqueCustomControlId(ownProps, flyoutProps.focusElementId, props.absoluteId);
                var focusCallback = function (elementId) { return CustomControlHelper_1.focusElementById(ownProps, elementId, true); };
                //if flyout is rendering on dialog, we need to portal it to the end of the dialog
                var portalFlyoutProps = ownProps.portalFlyoutToDialogId
                    ? {
                        isPortalToElement: true,
                        portalContainerId: ownProps.portalFlyoutToDialogId,
                    }
                    : {};
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Flyout_1.Flyout,
                    props: {
                        id: id,
                        parentCustomControlId: ownProps.controlId,
                        groupId: flyoutProps.groupId,
                        onOutsideClick: flyoutProps.onOutsideClick,
                        children: children,
                        flyoutStyle: flyoutProps.flyoutStyle,
                        position: flyoutProps.position,
                        positionType: flyoutProps.positionType,
                        flyoutDirection: flyoutProps.flyoutDirection,
                        relativeToElementId: prefixedRelativeToElementId,
                        size: flyoutProps.size,
                        focusElementId: customControlElementId,
                        focusCallback: focusCallback,
                        hasDynamicContent: flyoutProps.hasDynamicContent,
                        parentFlyoutRoot: ownProps.parentDefinedControlProps
                            ? ownProps.parentDefinedControlProps.parentFlyoutId
                            : null,
                        rootZIndex: hostData && hostData.isInSeeMoreMode,
                        isPortalToElement: portalFlyoutProps.isPortalToElement,
                        portalContainerId: portalFlyoutProps.portalContainerId,
                        role: flyoutProps.role,
                        accessibilityModal: flyoutProps.accessibilityModal,
                        keepOpenOnWindowBlur: flyoutProps.keepOpenOnWindowBlur,
                    },
                    key: flyoutProps.key,
                    ref: null,
                    _owner: null,
                };
            case "SCROLLCONTAINER":
                var scrollViewProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: ScrollView_1.ScrollView,
                    props: {
                        children: children,
                        style: scrollViewProps.style,
                        id: id,
                        testhooks: testhooks,
                        contentContainerStyle: scrollViewProps.contentContainerStyle,
                        horizontal: scrollViewProps.horizontal,
                        onScroll: scrollViewProps.onScroll,
                        hidden: scrollViewProps.hidden,
                        accessibilityHasPopup: scrollViewProps.accessibilityHasPopup,
                        accessibilityExpanded: scrollViewProps.accessibilityExpanded,
                        accessibilityLabel: scrollViewProps.accessibilityLabel,
                        accessibilityHidden: scrollViewProps.accessibilityHidden,
                        labelledByElementId: scrollViewProps.labelledByElementId,
                        describedByElementId: scrollViewProps.describedByElementId,
                        controlsElementId: scrollViewProps.controlsElementId,
                        ownsElementId: scrollViewProps.ownsElementId,
                        role: scrollViewProps.role,
                        tabIndex: scrollViewProps.tabIndex,
                        onScrollToBottom: scrollViewProps.onScrollToBottom,
                        semanticTag: scrollViewProps.semanticTag,
                        onKeyDown: scrollViewProps.onKeyDown,
                        onClick: scrollViewProps.onClick,
                        onFocus: scrollViewProps.onFocus,
                        onBlur: scrollViewProps.onBlur,
                        title: scrollViewProps.title,
                        isRTL: ownProps.propBagData.clientData.isRTL,
                        isWithinATopMostSeeMore: hostData.isInTopMostSeeMore,
                        className: scrollViewProps.className,
                    },
                    key: scrollViewProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLE":
                var tableProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Table_1.Table,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        style: tableProps.style,
                        hidden: tableProps.hidden,
                        accessibilityHasPopup: tableProps.accessibilityHasPopup,
                        accessibilityExpanded: tableProps.accessibilityExpanded,
                        accessibilityLabel: tableProps.accessibilityLabel,
                        accessibilityHidden: tableProps.accessibilityHidden,
                        labelledByElementId: tableProps.labelledByElementId,
                        describedByElementId: tableProps.describedByElementId,
                        controlsElementId: tableProps.controlsElementId,
                        ownsElementId: tableProps.ownsElementId,
                        role: tableProps.role,
                        tabIndex: tableProps.tabIndex,
                        onClick: tableProps.onClick,
                        onFocus: tableProps.onFocus,
                        onBlur: tableProps.onBlur,
                        title: tableProps.title,
                    },
                    key: tableProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLEBODY":
                var tableBodyProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TableBody_1.TableBody,
                    props: {
                        children: children,
                        key: tableBodyProps.key,
                        id: id,
                        testhooks: testhooks,
                        style: tableBodyProps.style,
                        hidden: tableBodyProps.hidden,
                        accessibilityHasPopup: tableBodyProps.accessibilityHasPopup,
                        accessibilityExpanded: tableBodyProps.accessibilityExpanded,
                        accessibilityLabel: tableBodyProps.accessibilityLabel,
                        accessibilityHidden: tableBodyProps.accessibilityHidden,
                        labelledByElementId: tableBodyProps.labelledByElementId,
                        describedByElementId: tableBodyProps.describedByElementId,
                        controlsElementId: tableBodyProps.controlsElementId,
                        ownsElementId: tableBodyProps.ownsElementId,
                        role: tableBodyProps.role,
                        tabIndex: tableBodyProps.tabIndex,
                        onClick: tableBodyProps.onClick,
                        onFocus: tableBodyProps.onFocus,
                        onBlur: tableBodyProps.onBlur,
                        title: tableBodyProps.title,
                    },
                    key: tableBodyProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLECAPTION":
                var tableCaptionProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TableCaption_1.TableCaption,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        style: tableCaptionProps.style,
                        hidden: tableCaptionProps.hidden,
                        accessibilityHasPopup: tableCaptionProps.accessibilityHasPopup,
                        accessibilityExpanded: tableCaptionProps.accessibilityExpanded,
                        accessibilityLabel: tableCaptionProps.accessibilityLabel,
                        accessibilityHidden: tableCaptionProps.accessibilityHidden,
                        labelledByElementId: tableCaptionProps.labelledByElementId,
                        describedByElementId: tableCaptionProps.describedByElementId,
                        controlsElementId: tableCaptionProps.controlsElementId,
                        ownsElementId: tableCaptionProps.ownsElementId,
                        role: tableCaptionProps.role,
                        tabIndex: tableCaptionProps.tabIndex,
                        onClick: tableCaptionProps.onClick,
                        onFocus: tableCaptionProps.onFocus,
                        onBlur: tableCaptionProps.onBlur,
                        title: tableCaptionProps.title,
                    },
                    key: tableCaptionProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLECELL":
                var tableCellProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TableCell_1.TableCell,
                    props: {
                        children: children,
                        id: id,
                        colSpan: tableCellProps.colSpan,
                        testhooks: testhooks,
                        style: tableCellProps.style,
                        hidden: tableCellProps.hidden,
                        accessibilityHasPopup: tableCellProps.accessibilityHasPopup,
                        accessibilityExpanded: tableCellProps.accessibilityExpanded,
                        accessibilityLabel: tableCellProps.accessibilityLabel,
                        accessibilityHidden: tableCellProps.accessibilityHidden,
                        labelledByElementId: tableCellProps.labelledByElementId,
                        describedByElementId: tableCellProps.describedByElementId,
                        controlsElementId: tableCellProps.controlsElementId,
                        ownsElementId: tableCellProps.ownsElementId,
                        role: tableCellProps.role,
                        tabIndex: tableCellProps.tabIndex,
                        onClick: tableCellProps.onClick,
                        onFocus: tableCellProps.onFocus,
                        onBlur: tableCellProps.onBlur,
                        onKeyDown: tableCellProps.onKeyDown,
                        title: tableCellProps.title,
                        rowSpan: tableCellProps.rowSpan,
                        scope: tableCellProps.scope,
                    },
                    key: tableCellProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLEFOOTER":
                var tableFooterProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TableFooter_1.TableFooter,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        style: tableFooterProps.style,
                        hidden: tableFooterProps.hidden,
                        accessibilityHasPopup: tableFooterProps.accessibilityHasPopup,
                        accessibilityExpanded: tableFooterProps.accessibilityExpanded,
                        accessibilityLabel: tableFooterProps.accessibilityLabel,
                        accessibilityHidden: tableFooterProps.accessibilityHidden,
                        labelledByElementId: tableFooterProps.labelledByElementId,
                        describedByElementId: tableFooterProps.describedByElementId,
                        controlsElementId: tableFooterProps.controlsElementId,
                        ownsElementId: tableFooterProps.ownsElementId,
                        role: tableFooterProps.role,
                        tabIndex: tableFooterProps.tabIndex,
                        onClick: tableFooterProps.onClick,
                        onFocus: tableFooterProps.onFocus,
                        onBlur: tableFooterProps.onBlur,
                        title: tableFooterProps.title,
                    },
                    key: tableFooterProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLEHEADER":
                var tableHeaderProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TableHeader_1.TableHeader,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        style: tableHeaderProps.style,
                        hidden: tableHeaderProps.hidden,
                        accessibilityHasPopup: tableHeaderProps.accessibilityHasPopup,
                        accessibilityExpanded: tableHeaderProps.accessibilityExpanded,
                        accessibilityLabel: tableHeaderProps.accessibilityLabel,
                        accessibilityHidden: tableHeaderProps.accessibilityHidden,
                        labelledByElementId: tableHeaderProps.labelledByElementId,
                        describedByElementId: tableHeaderProps.describedByElementId,
                        controlsElementId: tableHeaderProps.controlsElementId,
                        ownsElementId: tableHeaderProps.ownsElementId,
                        role: tableHeaderProps.role,
                        tabIndex: tableHeaderProps.tabIndex,
                        onClick: tableHeaderProps.onClick,
                        onFocus: tableHeaderProps.onFocus,
                        onBlur: tableHeaderProps.onBlur,
                        title: tableHeaderProps.title,
                    },
                    key: tableHeaderProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLEHEADERCELL":
                var tableHeaderCellProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TableHeaderCell_1.TableHeaderCell,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        style: tableHeaderCellProps.style,
                        hidden: tableHeaderCellProps.hidden,
                        accessibilityHasPopup: tableHeaderCellProps.accessibilityHasPopup,
                        accessibilityExpanded: tableHeaderCellProps.accessibilityExpanded,
                        accessibilityLabel: tableHeaderCellProps.accessibilityLabel,
                        accessibilityHidden: tableHeaderCellProps.accessibilityHidden,
                        labelledByElementId: tableHeaderCellProps.labelledByElementId,
                        describedByElementId: tableHeaderCellProps.describedByElementId,
                        controlsElementId: tableHeaderCellProps.controlsElementId,
                        ownsElementId: tableHeaderCellProps.ownsElementId,
                        role: tableHeaderCellProps.role,
                        tabIndex: tableHeaderCellProps.tabIndex,
                        onClick: tableHeaderCellProps.onClick,
                        onFocus: tableHeaderCellProps.onFocus,
                        onBlur: tableHeaderCellProps.onBlur,
                        onKeyDown: tableHeaderCellProps.onKeyDown,
                        title: tableHeaderCellProps.title,
                        colSpan: tableHeaderCellProps.colSpan,
                        rowSpan: tableHeaderCellProps.rowSpan,
                        scope: tableHeaderCellProps.scope,
                    },
                    key: tableHeaderCellProps.key,
                    ref: null,
                    _owner: null,
                };
            case "TABLEROW":
                var tableRowProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TableRow_1.TableRow,
                    props: {
                        children: children,
                        id: id,
                        testhooks: testhooks,
                        style: tableRowProps.style,
                        hidden: tableRowProps.hidden,
                        accessibilityHasPopup: tableRowProps.accessibilityHasPopup,
                        accessibilityExpanded: tableRowProps.accessibilityExpanded,
                        accessibilityLabel: tableRowProps.accessibilityLabel,
                        accessibilityHidden: tableRowProps.accessibilityHidden,
                        labelledByElementId: tableRowProps.labelledByElementId,
                        describedByElementId: tableRowProps.describedByElementId,
                        controlsElementId: tableRowProps.controlsElementId,
                        ownsElementId: tableRowProps.ownsElementId,
                        role: tableRowProps.role,
                        tabIndex: tableRowProps.tabIndex,
                        onClick: tableRowProps.onClick,
                        onFocus: tableRowProps.onFocus,
                        onBlur: tableRowProps.onBlur,
                        title: tableRowProps.title,
                    },
                    key: tableRowProps.key,
                    ref: null,
                    _owner: null,
                };
            case "FILEINPUT":
                var fileInputProps = props;
                return (React.createElement(FileInput_1.FileInput, { style: fileInputProps.style, fileSelected: fileInputProps.fileSelected, fileUnselected: fileInputProps.fileUnselected, accept: fileInputProps.accept, id: id, onReaderError: fileInputProps.onReaderError, multipleFilesSelected: fileInputProps.multipleFilesSelected, testhooks: testhooks, key: fileInputProps.key, title: fileInputProps.title, accessibilityLabel: fileInputProps.accessibilityLabel, tabIndex: fileInputProps.tabIndex }));
            case "TEXTINPUT":
                var textProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: TextInput_1.TextInput,
                    props: {
                        readOnly: textProps.readOnly,
                        id: id,
                        type: textProps.type,
                        keyboardType: textProps.keyboardType,
                        maxLength: textProps.maxLength,
                        multiline: textProps.multiline,
                        ownsElementId: textProps.ownsElementId,
                        onClick: textProps.onClick,
                        onBlur: textProps.onBlur,
                        onChange: textProps.onChange,
                        onChangeText: textProps.onChangeText,
                        onFocus: textProps.onFocus,
                        onKeyPress: textProps.onKeyPress,
                        onKeyDown: textProps.onKeyDown,
                        onKeyUp: textProps.onKeyUp,
                        onPointerEnter: textProps.onPointerEnter,
                        onPointerLeave: textProps.onPointerLeave,
                        onScroll: textProps.onScroll,
                        placeholder: textProps.placeholder,
                        style: textProps.style,
                        value: textProps.value,
                        hidden: textProps.hidden,
                        disabled: textProps.disabled,
                        accessibilityDisabled: textProps.accessibilityDisabled,
                        accessibilityHasPopup: textProps.accessibilityHasPopup,
                        accessibilityExpanded: textProps.accessibilityExpanded,
                        accessibilityLabel: textProps.accessibilityLabel,
                        accessibilityLive: textProps.accessibilityLive,
                        accessibilityHidden: textProps.accessibilityHidden,
                        accessibilityRequired: textProps.accessibilityRequired,
                        activeDescendantId: textProps.activeDescendantId,
                        autoComplete: textProps.autoComplete,
                        labelledByElementId: textProps.labelledByElementId,
                        describedByElementId: textProps.describedByElementId,
                        controlsElementId: textProps.controlsElementId,
                        role: textProps.role,
                        tabIndex: textProps.tabIndex,
                        testhooks: testhooks,
                        refCallback: textProps.refCallback,
                        rows: textProps.rows,
                        selectValueOnFocus: textProps.selectValueOnFocus,
                        title: textProps.title,
                    },
                    key: textProps.key,
                    ref: null,
                    _owner: null,
                };
            case "COMMANDBAR":
                var commandManagerProps = props;
                var commandManagerId = ownProps.id + ":" + ownProps.controlId;
                var wrapper = CommandingWrapper_1.CommandingWrapper.getWrapperByCommandManagerId(commandManagerId);
                if (!wrapper) {
                    wrapper = new CommandingWrapper_1.CommandingWrapper(ownProps);
                    complexKeeper(commandManagerId, wrapper);
                }
                wrapper.populateCommandManagerProps(commandManagerProps, ownProps);
                commandManagerProps.width = commandManagerProps.width || 1;
                commandManagerProps.contextToken = ownProps.contextToken;
                commandManagerProps.rootZIndex = hostData && hostData.isInSeeMoreMode;
                return wrapper.createCommandBar(commandManagerProps);
            case "OPTION":
                var optionProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Option_1.Option,
                    props: {
                        id: id,
                        value: optionProps.value,
                        disabled: optionProps.disabled,
                        style: optionProps.style,
                        testhooks: testhooks,
                    },
                    key: optionProps.key,
                    ref: null,
                    _owner: null,
                };
            case "SELECT":
                var selectProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Select_1.Select,
                    props: {
                        id: id,
                        value: selectProps.value,
                        options: selectProps.options,
                        style: selectProps.style,
                        disabled: selectProps.disabled,
                        tabIndex: selectProps.tabIndex,
                        hidden: selectProps.hidden,
                        accessibilityHasPopup: selectProps.accessibilityHasPopup,
                        accessibilityExpanded: selectProps.accessibilityExpanded,
                        accessibilityLabel: selectProps.accessibilityLabel,
                        accessibilityRequired: selectProps.accessibilityRequired,
                        labelledByElementId: selectProps.labelledByElementId,
                        describedByElementId: selectProps.describedByElementId,
                        controlsElementId: selectProps.controlsElementId,
                        ownsElementId: selectProps.ownsElementId,
                        testhooks: testhooks,
                        onBlur: selectProps.onBlur,
                        onClick: selectProps.onClick,
                        onFocus: selectProps.onFocus,
                        onChange: selectProps.onChange,
                        onPointerOver: selectProps.onPointerOver,
                        onPointerOut: selectProps.onPointerOut,
                        onPointerEnter: selectProps.onPointerEnter,
                        onPointerLeave: selectProps.onPointerLeave,
                        onPointerDown: selectProps.onPointerDown,
                        onPointerUp: selectProps.onPointerUp,
                        onKeyDown: selectProps.onKeyDown,
                        onKeyUp: selectProps.onKeyUp,
                        multiple: selectProps.multiple,
                        readOnly: selectProps.readOnly,
                        title: selectProps.title,
                    },
                    key: selectProps.key,
                    ref: null,
                    _owner: null,
                };
            case "ENTITYIMAGE":
                var entityImgProps = props;
                return (React.createElement(EntityImage_1.EntityImage, { key: entityImgProps.key, id: id, testhooks: testhooks, style: entityImgProps.style, hasPrimaryImageField: entityImgProps.hasPrimaryImageField, imageSrc: entityImgProps.imageSrc, alt: entityImgProps.alt, entityPrimaryField: entityImgProps.entityPrimaryField, hidden: entityImgProps.hidden, accessibilityHasPopup: entityImgProps.accessibilityHasPopup, accessibilityExpanded: entityImgProps.accessibilityExpanded, accessibilityLabel: entityImgProps.accessibilityLabel, accessibilityHidden: entityImgProps.accessibilityHidden, labelledByElementId: entityImgProps.labelledByElementId, describedByElementId: entityImgProps.describedByElementId, controlsElementId: entityImgProps.controlsElementId, ownsElementId: entityImgProps.ownsElementId, role: entityImgProps.role, tabIndex: entityImgProps.tabIndex, onClick: entityImgProps.onClick, onFocus: entityImgProps.onFocus, onBlur: entityImgProps.onBlur, title: entityImgProps.title, sipUrl: entityImgProps.sipUrl, presenceIndicatorSize: entityImgProps.presenceIndicatorSize, entityReference: entityImgProps.entityReference, entityHealthScore: entityImgProps.entityHealthScore, iconStyle: entityImgProps.iconStyle, customEntityIcon: entityImgProps.customEntityIcon }));
            case "PROGRESSINDICATOR":
                var progressIndicatorProps = props;
                return (React.createElement(ProgressIndicator_1.ProgressIndicator, { id: id, style: progressIndicatorProps.style, hidden: progressIndicatorProps.hidden, accessibilityHasPopup: progressIndicatorProps.accessibilityHasPopup, accessibilityExpanded: progressIndicatorProps.accessibilityExpanded, accessibilityLabel: progressIndicatorProps.accessibilityLabel, accessibilityChecked: progressIndicatorProps.accessibilityChecked, accessibilityReadOnly: progressIndicatorProps.accessibilityReadOnly, accessibilityHidden: progressIndicatorProps.accessibilityHidden, labelledByElementId: progressIndicatorProps.labelledByElementId, describedByElementId: progressIndicatorProps.describedByElementId, controlsElementId: progressIndicatorProps.controlsElementId, ownsElementId: progressIndicatorProps.ownsElementId, activeDescendantId: progressIndicatorProps.activeDescendantId, role: progressIndicatorProps.role, tabIndex: progressIndicatorProps.tabIndex, onClick: progressIndicatorProps.onClick, onFocus: progressIndicatorProps.onFocus, onBlur: progressIndicatorProps.onBlur, onPointerOver: progressIndicatorProps.onPointerOver, onPointerOut: progressIndicatorProps.onPointerOut, onPointerUp: progressIndicatorProps.onPointerUp, onPointerDown: progressIndicatorProps.onPointerDown, onPointerEnter: progressIndicatorProps.onPointerEnter, onPointerLeave: progressIndicatorProps.onPointerLeave, onPointerMove: progressIndicatorProps.onPointerMove, onPointerCancel: progressIndicatorProps.onPointerCancel, onKeyDown: progressIndicatorProps.onKeyDown, onKeyUp: progressIndicatorProps.onKeyUp, onMouseEnter: progressIndicatorProps.onMouseEnter, onMouseLeave: progressIndicatorProps.onMouseLeave, testhooks: testhooks, title: progressIndicatorProps.title, active: progressIndicatorProps.active, progressType: progressIndicatorProps.progressType, progress: progressIndicatorProps.progress, progressDots: progressIndicatorProps.progressDots, className: progressIndicatorProps.className, animating: progressIndicatorProps.animating, animationDelay: progressIndicatorProps.animationDelay, isBrowserSafari: progressIndicatorProps.isBrowserSafari }));
            case "RADIO":
                var radioInputProps = props;
                return (React.createElement(RadioInput_1.RadioInput, { id: id, value: radioInputProps.value, options: radioInputProps.options, style: radioInputProps.style, disabled: radioInputProps.disabled, tabIndex: radioInputProps.tabIndex, hidden: radioInputProps.hidden, accessibilityLabel: radioInputProps.accessibilityLabel, labelledByElementId: radioInputProps.labelledByElementId, describedByElementId: radioInputProps.describedByElementId, controlsElementId: radioInputProps.controlsElementId, ownsElementId: radioInputProps.ownsElementId, testhooks: testhooks, onBlur: radioInputProps.onBlur, onClick: radioInputProps.onClick, onFocus: radioInputProps.onFocus, onChange: radioInputProps.onChange, onPointerOver: radioInputProps.onPointerOver, onPointerOut: radioInputProps.onPointerOut, onPointerEnter: radioInputProps.onPointerEnter, onPointerLeave: radioInputProps.onPointerLeave, onPointerDown: radioInputProps.onPointerDown, onPointerUp: radioInputProps.onPointerUp, onKeyDown: radioInputProps.onKeyDown, onKeyUp: radioInputProps.onKeyUp }));
            case "HORIZONTALSCROLL":
                var horizontalScrollProps = props;
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: HorizontalScroll_1.HorizontalScroll,
                    props: {
                        isRTL: ownProps.propBagData.clientData.isRTL,
                        children: children,
                        scrollViewStyle: horizontalScrollProps.scrollViewStyle,
                        style: horizontalScrollProps.style,
                        id: id,
                        startChildIndex: horizontalScrollProps.startChildIndex,
                        arrowWidth: horizontalScrollProps.arrowWidth,
                        arrowButtonStyle: horizontalScrollProps.arrowButtonStyle,
                        prevArrowIconType: horizontalScrollProps.prevArrowIconType,
                        nextArrowIconType: horizontalScrollProps.nextArrowIconType,
                        onPrevArrowClick: horizontalScrollProps.onPrevArrowClick,
                        onNextArrowClick: horizontalScrollProps.onNextArrowClick,
                        onPrevArrowKeyDown: horizontalScrollProps.onPrevArrowKeyDown,
                        onNextArrowKeyDown: horizontalScrollProps.onNextArrowKeyDown,
                        testhooks: testhooks,
                        hidden: horizontalScrollProps.hidden,
                        accessibilityHasPopup: horizontalScrollProps.accessibilityHasPopup,
                        accessibilityExpanded: horizontalScrollProps.accessibilityExpanded,
                        accessibilityLabel: horizontalScrollProps.accessibilityLabel,
                        accessibilityHidden: horizontalScrollProps.accessibilityHidden,
                        labelledByElementId: horizontalScrollProps.labelledByElementId,
                        describedByElementId: horizontalScrollProps.describedByElementId,
                        controlsElementId: horizontalScrollProps.controlsElementId,
                        ownsElementId: horizontalScrollProps.ownsElementId,
                        role: horizontalScrollProps.role,
                        semanticTag: horizontalScrollProps.semanticTag,
                        tabIndex: horizontalScrollProps.tabIndex,
                        onClick: horizontalScrollProps.onClick,
                        onFocus: horizontalScrollProps.onFocus,
                        onBlur: horizontalScrollProps.onBlur,
                        title: horizontalScrollProps.title,
                    },
                    key: horizontalScrollProps.key,
                    ref: null,
                    _owner: null,
                };
            case "VIEWSELECTORCONTROL":
                var viewSelectorProps = props;
                return (React.createElement(ViewSelectorControl_1.ViewSelectorControl, { style: viewSelectorProps.style, viewSelectorStyle: viewSelectorProps.viewSelectorStyle, textStyle: viewSelectorProps.textStyle, id: id, key: viewSelectorProps.key, value: viewSelectorProps.value, title: viewSelectorProps.title, categories: viewSelectorProps.categories, options: viewSelectorProps.options, hoveredStyle: viewSelectorProps.hoveredStyle, caretStyle: viewSelectorProps.caretStyle, caretType: viewSelectorProps.caretType, createAccessibilityComponent: ownProps.actions.createAccessibilityComponent, createKeyboardShortcut: ownProps.actions.createKeyboardShortcut, defaultValue: viewSelectorProps.defaultValue, tabIndex: viewSelectorProps.tabIndex, onChange: viewSelectorProps.onChange, onClick: viewSelectorProps.onClick, onKeyUp: viewSelectorProps.onKeyUp, onKeyDown: viewSelectorProps.onKeyDown, onPointerUp: viewSelectorProps.onPointerUp, onPointerMove: viewSelectorProps.onPointerMove, onPointerDown: viewSelectorProps.onPointerDown, onPointerEnter: viewSelectorProps.onPointerEnter, onPointerLeave: viewSelectorProps.onPointerLeave, onFocus: viewSelectorProps.onFocus, onBlur: viewSelectorProps.onBlur, suppressFreeTextChangeCallback: viewSelectorProps.suppressFreeTextChangeCallback, parentCustomControlId: ownProps.controlId, rootZIndex: hostData && hostData.isInSeeMoreMode, isRTL: ownProps.propBagData.clientData && ownProps.propBagData.clientData.isRTL }));
            case "TEXT":
                var textProperties = props;
                var flexibleTextProperties = props;
                if (flexibleTextProperties.truncatedlines) {
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: FlexibleText_1.FlexibleText,
                        props: {
                            isRTL: flexibleTextProperties.isRTL === null || flexibleTextProperties.isRTL === undefined
                                ? ownProps.propBagData.clientData.isRTL
                                : flexibleTextProperties.isRTL,
                            children: children,
                            id: id,
                            style: flexibleTextProperties.style,
                            flexibleTextContainerStyle: flexibleTextProperties.flexibleTextContainerStyle,
                            flexibleTextStyle: flexibleTextProperties.flexibleTextStyle,
                            role: flexibleTextProperties.role,
                            hidden: flexibleTextProperties.hidden,
                            accessibilityHasPopup: flexibleTextProperties.accessibilityHasPopup,
                            accessibilityExpanded: flexibleTextProperties.accessibilityExpanded,
                            accessibilityLabel: flexibleTextProperties.accessibilityLabel,
                            accessibilityHidden: flexibleTextProperties.accessibilityHidden,
                            accessibilityLive: flexibleTextProperties.accessibilityLive,
                            accessibilityRelevant: flexibleTextProperties.accessibilityRelevant,
                            accessibilityAtomic: flexibleTextProperties.accessibilityAtomic,
                            labelledByElementId: flexibleTextProperties.labelledByElementId,
                            describedByElementId: flexibleTextProperties.describedByElementId,
                            controlsElementId: flexibleTextProperties.controlsElementId,
                            ownsElementId: flexibleTextProperties.ownsElementId,
                            tabIndex: flexibleTextProperties.tabIndex,
                            onClick: flexibleTextProperties.onClick,
                            onFocus: flexibleTextProperties.onFocus,
                            onKeyUp: flexibleTextProperties.onKeyUp,
                            onKeyDown: flexibleTextProperties.onKeyDown,
                            onBlur: flexibleTextProperties.onBlur,
                            testhooks: testhooks,
                            title: flexibleTextProperties.title,
                            semanticTag: flexibleTextProperties.semanticTag,
                            truncatedlines: flexibleTextProperties.truncatedlines,
                            maskingColor: flexibleTextProperties.maskingColor,
                            noExpandable: flexibleTextProperties.noExpandable,
                            isFieldLabel: flexibleTextProperties.isFieldLabel,
                            lineHeight: flexibleTextProperties.lineHeight,
                        },
                        key: flexibleTextProperties.key,
                        ref: null,
                        _owner: null,
                    };
                }
                // Returns an inlined React.createElement for performance.
                // TODO: switch to compile-time optimization once tsc supports that.
                return {
                    $$typeof: REACT_ELEMENT_TYPE,
                    type: Text_1.Text,
                    props: {
                        children: children,
                        id: id,
                        style: textProperties.style,
                        role: textProperties.role,
                        hidden: textProperties.hidden,
                        accessibilityHasPopup: textProperties.accessibilityHasPopup,
                        accessibilityExpanded: textProperties.accessibilityExpanded,
                        accessibilityLabel: textProperties.accessibilityLabel,
                        accessibilityHidden: textProperties.accessibilityHidden,
                        labelledByElementId: textProperties.labelledByElementId,
                        describedByElementId: textProperties.describedByElementId,
                        controlsElementId: textProperties.controlsElementId,
                        ownsElementId: textProperties.ownsElementId,
                        tabIndex: textProperties.tabIndex,
                        onClick: textProperties.onClick,
                        onFocus: textProperties.onFocus,
                        onKeyUp: textProperties.onKeyUp,
                        onKeyDown: textProperties.onKeyDown,
                        onBlur: textProperties.onBlur,
                        testhooks: testhooks,
                        title: textProperties.title,
                        semanticTag: textProperties.semanticTag,
                    },
                    key: textProperties.key,
                    ref: null,
                    _owner: null,
                };
            case "PRESENCEINDICATOR":
                var presenceIndicatorProps = props;
                var parentControlId = CustomControlHelper_1.buildUniqueCustomControlId(ownProps, presenceIndicatorProps.parentControlId, props.absoluteId);
                return (React.createElement(PresenceIndicator_1.PresenceIndicator, { id: presenceIndicatorProps.id, key: presenceIndicatorProps.key, sipUrl: presenceIndicatorProps.sipUrl, displaySize: presenceIndicatorProps.displaySize, entityReference: presenceIndicatorProps.entityReference, style: presenceIndicatorProps.style, role: presenceIndicatorProps.role, tabIndex: presenceIndicatorProps.tabIndex, title: presenceIndicatorProps.title, parentControlId: parentControlId, accessibilityLabel: presenceIndicatorProps.accessibilityLabel, presenceTarget: presenceIndicatorProps.presenceTarget }));
            case "PLACEHOLDER":
                var placeHolderProps = props;
                if (placeHolderProps == null) {
                    break;
                }
                return (React.createElement(PlaceHolder_1.PlaceHolder, { id: placeHolderProps.id, icon: placeHolderProps.icon, iconStyle: placeHolderProps.iconStyle, text: placeHolderProps.text, textStyle: placeHolderProps.textStyle, containerStyle: placeHolderProps.containerStyle, accessibilityHidden: placeHolderProps.accessibilityHidden }));
        }
        return React.createElement(View_1.View, null, "\"UNKNOWN COMPONENT\"");
    };
    VirtualComponentTranslator._generateFlyoutParentId = function (hostProps, component) {
        if (hostProps && hostProps.parentDefinedControlProps && hostProps.parentDefinedControlProps.parentFlyoutId) {
            return hostProps.parentDefinedControlProps.parentFlyoutId;
        }
        if (component.getType().toUpperCase() === "FLYOUT") {
            var props = component.getProperties();
            return Flyout_1.InnerFlyout.generateFlyoutId(hostProps.controlId, props.groupId);
        }
        return null;
    };
    /**
     * Returns the react component based on the type
     * @param component the virtual component
     * @param parentKey the key for this component's parent
     * @param defaultKey the default key to use if this component does not have an obvious defined key
     * @param props custom control host props
     * @param memHelper The memoization helper object
     * @param hostData data from the custom control compositing this virtual component
     * @param children the children array
     * @returns a virtual dom element
     */
    VirtualComponentTranslator.generateReactComponent = function (component, parentKey, defaultKey, props, hostData, memHelper, flyoutParent, children) {
        try {
            if (!component) {
                return null;
            }
            var element = null;
            var key = VirtualComponentTranslator._getComponentKey(component, parentKey, defaultKey);
            var memoizedComponent = key ? memHelper.getVirtualComponentByKey(key) : null;
            if (memoizedComponent && memoizedComponent === component) {
                element = memHelper.getReactElementByKey(key);
                memHelper.retainElement(key);
            }
            else {
                if (!VirtualComponentTranslator.isComplexComponent(component)) {
                    if (component.getType() === "IFRAME") {
                        memHelper.setIsCompositing(true);
                    }
                    element = VirtualComponentTranslator.generateJSXElement(component.getType(), component.getProperties(), children, props, hostData, memHelper.addCommandWrapper);
                }
                else if (CCFUtilities.IsNullOrUndefined(component.getComponentId())) {
                    element = React.createElement(View_1.View, null, "\"UNKNOWN COMPONENT\"");
                }
                else {
                    element = VirtualComponentTranslator.generateComplexControl(component, props, hostData, flyoutParent);
                    memHelper.setIsCompositing(true);
                }
                if (key) {
                    memHelper.addUpdatedEntry(key, element, component);
                }
            }
            return element;
        }
        catch (exception) {
            throw exception;
        }
    };
    /**
     * Creates the component key for this VC
     * @param component The component
     * @param parentKey The component's parent's key
     * @param defaultKey The default key for this component
     * @returns this component's key
     */
    VirtualComponentTranslator._getComponentKey = function (component, parentKey, defaultKey) {
        return ((parentKey ? parentKey + "|" : "") +
            (!VirtualComponentTranslator.isComplexComponent(component)
                ? component.getProperties().hasOwnProperty("key")
                    ? component.getProperties().key
                    : defaultKey
                : component.getComponentId() || defaultKey));
    };
    /**
     * If the testhooks contain a property with name id, it is updated to be a unique identifier for the element.
     * The newly updated testhooks object is returned.
     * If the props don't possess any testhooks, they are generated with a (testhook) id attribute.
     */
    VirtualComponentTranslator._updateDataIdInTesthooks = function (ownProps, props) {
        if (!props || !props.id) {
            return {};
        }
        var idKey = "id";
        if (props.testhooks) {
            var testhookId = CustomControlHelper_1.buildTesthookId(ownProps, props.testhooks[idKey] || props.id);
            var updatedTesthooks = Object.assign({}, props.testhooks);
            updatedTesthooks[idKey] = testhookId; // Overwrite "data-id" if it already exists.
            return updatedTesthooks;
        }
        return { id: CustomControlHelper_1.buildTesthookId(ownProps, props.id) };
    };
    /**
     * generates a complex control from the component
     * @param component the virtual component
     * @param props custom control host props
     * @param hostData data from the custom control compositing this virtual component
     * @returns a virtual dom component
     */
    VirtualComponentTranslator.generateComplexControl = function (component, props, hostData, flyoutParent) {
        var componentId = component.getComponentId();
        var properties = component.getProperties();
        var parentProps = {
            toggleDimensionListener: hostData.trackResize,
        };
        var parentControlId = props.descriptor.Id;
        var controlId = parentControlId + "." + componentId;
        var childUnique = props.descriptor.UniqueId + "." + componentId;
        var childDomId = CustomControlHelper_1.buildChildDomId(props);
        // disabling TSLint rules until the typings in this project can be improved
        // parsing properties passed
        var controlStates = properties.controlstates;
        var showLabel = props.descriptor.ShowLabel;
        var label = props.descriptor.Label;
        var disabled = false;
        if (!CCFUtilities.IsNullOrUndefined(controlStates)) {
            parentProps.height = !controlStates.hasOwnProperty("height") ? hostData.allocatedHeight : controlStates.height;
            parentProps.width = !controlStates.hasOwnProperty("width") ? hostData.allocatedWidth : controlStates.width;
            parentProps.hasFocus = CCFUtilities.IsNullOrUndefined(controlStates.hasFocus) ? false : controlStates.hasFocus;
            parentProps.containerStyleOverrides = controlStates.containerStyleOverrides;
            disabled = CCFUtilities.IsNullOrUndefined(controlStates.isControlDisabled)
                ? false
                : controlStates.isControlDisabled;
            showLabel = CCFUtilities.IsNullOrUndefined(controlStates.showLabel) ? showLabel : controlStates.showLabel;
            label = CCFUtilities.IsNullOrUndefined(controlStates.label) ? label : controlStates.label;
        }
        else {
            parentProps.height = hostData.allocatedHeight;
            parentProps.width = hostData.allocatedWidth;
        }
        parentProps.decorators = properties.decorators;
        var eventListeners = [];
        var childeventlisteners = properties.childeventlisteners;
        if (!CCFUtilities.IsNullOrUndefined(childeventlisteners)) {
            var _loop_1 = function (listener) {
                var eventName = listener.eventname;
                var eventIndex = eventListeners.findIndex(function (x) { return x.eventname === eventName; });
                var handlers = listener.eventhandler;
                // if the event name already exists, add the listener to the list
                if (eventIndex !== -1) {
                    eventListeners[eventIndex].eventhandler.concat(handlers);
                }
                else {
                    var eventListener = {
                        eventname: eventName,
                        eventhandler: [handlers],
                    };
                    eventListeners.push(eventListener);
                }
            };
            for (var _i = 0, childeventlisteners_1 = childeventlisteners; _i < childeventlisteners_1.length; _i++) {
                var listener = childeventlisteners_1[_i];
                _loop_1(listener);
            }
            parentProps.eventListeners = eventListeners;
        }
        if (properties.contextOverrides) {
            parentProps.propertyBagOverrides = properties.contextOverrides;
        }
        var params = {};
        if (!CCFUtilities.IsNullOrUndefined(properties.parameters)) {
            params = properties.parameters;
        }
        var descriptor = null;
        var nestedFormProps = null;
        // TODO: This should be replaced in the future with something designed to handle the business logic id
        var parentFieldSectionItem = null;
        if (props.configuration.CustomControlId === DefaultControlMapper_1.FIELD_SECTION_ITEM_ID) {
            parentFieldSectionItem = parentControlId;
        }
        else if (props.parentDefinedControlProps && props.parentDefinedControlProps.parentFieldSectionItem) {
            parentFieldSectionItem = props.parentDefinedControlProps.parentFieldSectionItem;
        }
        parentProps.parentFieldSectionItem = parentFieldSectionItem;
        parentProps.parentInSeeMoreMode = hostData.isInSeeMoreMode;
        // If there are nestedFormProps specified in the child props, it means the control belongs to a different form than the current form.
        // Do not generate the descriptor for the control here. Get the descriptor from the control attributes
        if (!properties.descriptor) {
            descriptor = {
                Id: controlId,
                Label: label,
                Name: "",
                DomId: childDomId,
                ShowLabel: showLabel,
                Visible: props.descriptor.Visible,
                ClassId: null,
                Disabled: disabled,
                UniqueId: childUnique,
                Parameters: props.descriptor && props.descriptor.Parameters,
            };
        }
        else {
            descriptor = properties.descriptor;
            controlId = componentId;
        }
        if (!descriptor.parentFieldSectionItem) {
            descriptor.parentFieldSectionItem = parentFieldSectionItem;
        }
        // If the parent has specific form props, pass it down to the children as well.
        if (!properties.nestedFormProps) {
            nestedFormProps = props.formInfo;
        }
        else {
            nestedFormProps = properties.nestedFormProps;
        }
        var configuration;
        if (props.children && props.children.hasOwnProperty(componentId)) {
            configuration = props.children[componentId];
        }
        else if (!properties.configuration) {
            // If this is a container control which is a nested form properties, do not add this configuration
            // This will get generated from the attribute
            configuration = {
                FormFactor: 2,
                CustomControlId: component.getType().toString(),
                Name: props.manifest.CustomControlId + "." + controlId,
                Parameters: Object.assign({}, params),
                Version: "0.0",
                ShouldOverrideControlVisible: false,
                isDefaultConfig: true,
            };
        }
        else {
            configuration = properties.configuration;
        }
        VirtualComponentTranslator._parseParameters(configuration.Parameters);
        var dataSetUIOptions = null;
        if (configuration.Parameters) {
            for (var parameterName in configuration.Parameters) {
                var parameter = configuration.Parameters[parameterName];
                switch (parameter.Type) {
                    case ManifestType_1.ManifestType.Grid: {
                        var dataSetParameter = parameter;
                        if (dataSetParameter.SortingInput) {
                            var sortingParameter = dataSetParameter.SortingInput;
                            if (sortingParameter.ControlLinked && sortingParameter.Value) {
                                sortingParameter.Value = parentControlId + "." + sortingParameter.Value;
                            }
                        }
                        if (dataSetParameter.FilteringInput) {
                            var filteringParameter = dataSetParameter.FilteringInput;
                            if (filteringParameter.ControlLinked && filteringParameter.Value) {
                                filteringParameter.Value = parentControlId + "." + filteringParameter.Value;
                            }
                        }
                        if (dataSetParameter.PagingInput) {
                            var pagingParameter = dataSetParameter.PagingInput;
                            if (pagingParameter.ControlLinked && pagingParameter.Value) {
                                pagingParameter.Value = parentControlId + "." + pagingParameter.Value;
                            }
                        }
                        if (dataSetParameter.DataSetUIOptions) {
                            dataSetUIOptions = dataSetParameter.DataSetUIOptions;
                        }
                        break;
                    }
                    default: {
                        var propertyParameter = parameter;
                        // If the parameter is a control linked input with a known value and is not marked as having an absolute address
                        // it should be properly prepended with it's parent's ID so the relativistic connection is made correctly
                        if (propertyParameter.Usage === 1 /* Input */ &&
                            propertyParameter.ControlLinked &&
                            !propertyParameter.AbsoluteLinkAddress &&
                            propertyParameter.Value) {
                            configuration.Parameters[parameterName] = Object.assign({}, propertyParameter, {
                                Value: parentControlId + "." + propertyParameter.Value,
                            });
                        }
                        break;
                    }
                }
            }
        }
        if (props.descriptor.HasContext) {
            parentProps.closestParentWithContext = parentControlId;
        }
        else if (props.parentDefinedControlProps && props.parentDefinedControlProps.closestParentWithContext) {
            parentProps.closestParentWithContext = props.parentDefinedControlProps.closestParentWithContext;
        }
        parentProps.parentFlyoutId = flyoutParent;
        return props.actions.renderNestedCustomControl(controlId, {
            id: props.id,
            controlId: controlId,
            systemDefinedProperties: props.systemDefinedProperties,
            parentDefinedControlProps: parentProps,
            configuration: configuration,
            descriptor: descriptor,
            formInfo: nestedFormProps,
            rowSpan: props.rowSpan,
            themingData: properties.themingData,
            contextString: properties.contextString || this._buildContextString(props, nestedFormProps),
            parentContextToken: props.contextToken,
            externalCommandManagerId: props.externalCommandManagerId,
            externalCommandPromise: props.externalCommandPromise,
        }, {
            dataSetUIOptions: dataSetUIOptions,
        });
    };
    /**
     * Parse the parameters given from the parent control
     * @param params The parameters of this config
     */
    VirtualComponentTranslator._parseParameters = function (params) {
        for (var key in params) {
            if (params[key].Usage ===
                3 /* FalseBound */) {
                params[key].Attributes = Object.assign({}, VirtualComponentTranslator._baseAttributes, params[key].Attributes);
            }
        }
    };
    /**
     * Typeguard check for a Virtual Component.
     */
    VirtualComponentTranslator._isVirtualComponent = function (obj) {
        return !!(obj && typeof obj === "object" && "getType" in obj);
    };
    /**
     * Generated the React child for a Virtual Component.
     */
    VirtualComponentTranslator._generateReactChild = function (parentKey, defaultKey, virtualComponent, props, hostData, memHelper, flyoutKey) {
        if (this._isVirtualComponent(virtualComponent)) {
            var elemChildren = virtualComponent.getChildren();
            var component = virtualComponent;
            var newFlyoutKey = flyoutKey || VirtualComponentTranslator._generateFlyoutParentId(props, component);
            return this.generateReactComponent(component, parentKey, defaultKey, props, hostData, memHelper, newFlyoutKey, elemChildren !== null
                ? this.generateReactChildren(VirtualComponentTranslator._getComponentKey(component, parentKey, defaultKey), elemChildren, props, hostData, memHelper, newFlyoutKey)
                : null);
        }
        else {
            return virtualComponent;
        }
    };
    /**
     * Generates the react counterparts for the given virtual component children.
     * @param parentKey The key of this parent
     * @param virtualComponents either an array of virtual components, or just a single component
     * @param props properties of the Custom Control host
     * @param hostData Data provided from this VC's parent CustomControlHostRoot
     * @param memHelper this component's associated memoization helper
     */
    VirtualComponentTranslator.generateReactChildren = function (parentKey, virtualComponents, props, hostData, memHelper, flyoutKey) {
        if (virtualComponents !== null) {
            if (Array.isArray(virtualComponents)) {
                var childNodes = [];
                for (var index = 0; index < virtualComponents.length; index++) {
                    childNodes.push(this._generateReactChild(parentKey, KEYLESS_CHILD_ID + index, virtualComponents[index], props, hostData, memHelper, flyoutKey));
                }
                return childNodes;
            }
            else {
                return this._generateReactChild(parentKey, KEYLESS_CHILD_ID, virtualComponents, props, hostData, memHelper, flyoutKey);
            }
        }
    };
    /**
     * Check if the component is Complex Component, a Customized Control Component
     * @param virtualComponent Virtual Component Pass in
     */
    VirtualComponentTranslator.isComplexComponent = function (virtualComponent) {
        if (!virtualComponent) {
            return false;
        }
        var type = virtualComponent.getType();
        if (type && CustomControlExposedInterfaces_1.SupportedPrimitives.indexOf(type.toUpperCase()) !== -1) {
            return false;
        }
        return true;
    };
    VirtualComponentTranslator._buildContextString = function (parentProps, currentFormInfo) {
        var isGrid = false;
        var isQuickForm = false;
        for (var parameter in parentProps.configuration.Parameters) {
            if (parentProps.configuration.Parameters[parameter].Type === ManifestType_1.ManifestType.QuickForm) {
                isQuickForm = true;
            }
            else if (parentProps.configuration.Parameters[parameter].Type === ManifestType_1.ManifestType.Grid) {
                isGrid = true;
            }
        }
        var contextChanged = !parentProps.formInfo !== !currentFormInfo;
        if (!contextChanged && parentProps.formInfo) {
            contextChanged =
                parentProps.formInfo.EntityName !== currentFormInfo.EntityName ||
                    parentProps.formInfo.FormId !== currentFormInfo.FormId ||
                    parentProps.formInfo.RecordId !== currentFormInfo.RecordId ||
                    parentProps.formInfo.RibbonId !== currentFormInfo.RibbonId;
        }
        if (contextChanged) {
            if (isQuickForm) {
                return ManifestType_1.ManifestType.QuickForm + ":" + parentProps.controlId;
            }
            else if (isGrid) {
                return ManifestType_1.ManifestType.Grid;
            }
        }
        return "default";
    };
    /**
     * Base attributes default values
     */
    VirtualComponentTranslator._baseAttributes = {
        DisplayName: "",
        LogicalName: "",
        Type: "string",
        IsSecured: false,
        RequiredLevel: 0,
        MinValue: -100000000000,
        MaxValue: 100000000000,
        ImeMode: 0,
        MaxLength: 100,
        EntityLogicalName: "",
        Precision: 2,
        Format: "1",
        LanguageByCode: {},
        TimeZoneByCode: {},
        Behavior: 0,
        Targets: [],
        Options: [
            {
                Label: "---",
                Value: 1,
            },
        ],
        DefaultValue: 1,
        lastUpdatedField: null,
        lastUpdatedValue: null,
        rollupStateField: null,
        rollupStateValue: 0,
        calculatedFieldValid: false,
        rollupValid: false,
        SourceType: null,
        recalculate: function () { },
    };
    return VirtualComponentTranslator;
}());
exports.VirtualComponentTranslator = VirtualComponentTranslator;

},{"../../CommonComponents/Common/HorizontalScroll":3,"../../CommonComponents/Common/ViewSelectorControl":5,"../../CommonComponents/FontIcon/CrmIcon":6,"../../CommonComponents/FontIcon/EntityIcon":8,"../../CommonComponents/FontIcon/MicrosoftIcon":10,"../../CommonComponents/Primitive/Button":12,"../../CommonComponents/Primitive/ComboBox":14,"../../CommonComponents/Primitive/EntityImage":16,"../../CommonComponents/Primitive/FileInput":18,"../../CommonComponents/Primitive/FlexibleText":19,"../../CommonComponents/Primitive/Flyout":20,"../../CommonComponents/Primitive/Hyperlink":24,"../../CommonComponents/Primitive/IFrame":26,"../../CommonComponents/Primitive/Image":27,"../../CommonComponents/Primitive/Label":28,"../../CommonComponents/Primitive/List":29,"../../CommonComponents/Primitive/ListItem":30,"../../CommonComponents/Primitive/LivePersonaCardHoverTarget":31,"../../CommonComponents/Primitive/PlaceHolder":32,"../../CommonComponents/Primitive/Popup/Popup":33,"../../CommonComponents/Primitive/Popup/RootPopup":34,"../../CommonComponents/Primitive/PresenceIndicator":35,"../../CommonComponents/Primitive/ProgressIndicator":36,"../../CommonComponents/Primitive/Radio/RadioInput":38,"../../CommonComponents/Primitive/ScrollView":39,"../../CommonComponents/Primitive/Select/Option":40,"../../CommonComponents/Primitive/Select/Select":41,"../../CommonComponents/Primitive/Switch":44,"../../CommonComponents/Primitive/Table/Table":45,"../../CommonComponents/Primitive/Table/TableBody":46,"../../CommonComponents/Primitive/Table/TableCaption":47,"../../CommonComponents/Primitive/Table/TableCell":48,"../../CommonComponents/Primitive/Table/TableFooter":49,"../../CommonComponents/Primitive/Table/TableHeader":50,"../../CommonComponents/Primitive/Table/TableHeaderCell":51,"../../CommonComponents/Primitive/Table/TableRow":52,"../../CommonComponents/Primitive/Text":53,"../../CommonComponents/Primitive/TextInput":54,"../../CommonComponents/Primitive/View":55,"../Models/CommandingWrapper":64,"../Models/CustomControlExposedInterfaces":66,"../Models/CustomControlUtilityPointers":67,"../Utilities/CustomControlConstants":98,"../Utilities/CustomControlHelper":99,"../Utilities/DefaultControlMapper":100,"../Utilities/GuidHelper":101,"../Utilities/ManifestType":104,"react":undefined}]},{},[112]);
