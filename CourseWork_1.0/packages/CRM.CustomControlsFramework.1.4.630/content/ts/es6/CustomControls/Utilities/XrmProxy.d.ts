import { IXrmProxy } from "../Models/CustomControlDataInterfaces";
declare class XrmProxy implements IXrmProxy {
    private _userSettings;
    private _orgSettings;
    private _utils;
    private _offline;
    private _page;
    private _reporting;
    private _diagnostics;
    private _client;
    private _navigationContext;
    private _deviceContext;
    private _externalContext;
    private _applicationUI;
    private _webApiContext;
    private _initialized;
    constructor();
    Initialized: boolean;
    OrgSettings: ControlAndClientApiInterfaces.OrgSettings;
    UserSettings: ControlAndClientApiInterfaces.UserSettings;
    Offline: ControlAndClientApiInterfaces.Offline;
    Utils: ControlAndClientApiInterfaces.Utils;
    Page: ControlAndClientApiInterfaces.Page;
    Reporting: ControlAndClientApiInterfaces.Reporting;
    Diagnostics: ControlAndClientApiInterfaces.Diagnostics;
    Client: ControlAndClientApiInterfaces.Client;
    setUserSettings(userSettings: ControlAndClientApiInterfaces.UserSettings): void;
    setOrgSettings(orgSettings: ControlAndClientApiInterfaces.OrgSettings): void;
    setOffline(offline: ControlAndClientApiInterfaces.Offline): void;
    setUtils(utilities: ControlAndClientApiInterfaces.Utils): void;
    setPage(page: ControlAndClientApiInterfaces.Page): void;
    setReporting(reporting: ControlAndClientApiInterfaces.Reporting): void;
    setDiagnostics(diagnostics: ControlAndClientApiInterfaces.Diagnostics): void;
    setClient(client: ControlAndClientApiInterfaces.Client): void;
    setNavigationContext(xrmNavigation: ControlAndClientApiInterfaces.Navigation): void;
    setDeviceContext(xrmDevice: ControlAndClientApiInterfaces.Device): void;
    setExternalContext(xrmExternalContext: ControlAndClientApiInterfaces.ExternalContext): void;
    setApplicationUI(applicationUI: ControlAndClientApiInterfaces.ApplicationUI): void;
    setWebApi(webApi: ControlAndClientApiInterfaces.WebApiSwitch): void;
    openForm(options: ControlAndClientApiInterfaces.EntityFormOptions, parameters?: ControlAndClientApiInterfaces.Parameters): Promise<ControlAndClientApiInterfaces.OpenFormSuccessResponse>;
    openUrl(url: string, options?: ControlAndClientApiInterfaces.WindowOptions): void;
    openFile(file: File, options?: ControlAndClientApiInterfaces.OpenFileOptions): Promise<void>;
    openAlertDialog(alertStrings: ControlAndClientApiInterfaces.AlertDialogStrings, options?: ControlAndClientApiInterfaces.DialogOptions): Promise<ControlAndClientApiInterfaces.AlertDialogResponse>;
    openConfirmDialog(confirmStrings: ControlAndClientApiInterfaces.ConfirmDialogStrings, options?: ControlAndClientApiInterfaces.DialogOptions): Promise<ControlAndClientApiInterfaces.ConfirmDialogResponse>;
    openDialog(name: string, options?: ControlAndClientApiInterfaces.DialogOptions, parameters?: ControlAndClientApiInterfaces.Parameters): Promise<ControlAndClientApiInterfaces.DialogResponse>;
    openErrorDialog(options: ControlAndClientApiInterfaces.ErrorDialogOptions): Promise<ControlAndClientApiInterfaces.ErrorDialogResponse>;
    openTaskFlow(name: string, options?: ControlAndClientApiInterfaces.TaskFlowOptions, parameters?: ControlAndClientApiInterfaces.Parameters): Promise<ControlAndClientApiInterfaces.TaskFlowResponse>;
    openWebResource(name: string, options?: ControlAndClientApiInterfaces.WindowOptions, data?: string): void;
    captureImage(options?: ControlAndClientApiInterfaces.CaptureImageOptions): Promise<File>;
    captureAudio(): Promise<File>;
    captureVideo(): Promise<File>;
    pickFile(options?: ControlAndClientApiInterfaces.PickFileOptions): Promise<File[]>;
    getBarcodeValue(): Promise<string>;
    getCurrentPosition(): Promise<Position>;
    getAvailableExternalContexts(): Collection.ItemCollection<ControlAndClientApiInterfaces.ExternalContextDescriptor>;
    getExternalContextProperty(externalContextId: string, externalContextPropertyId: string, options?: ControlAndClientApiInterfaces.ExternalContextPropertyOptions): Promise<ControlAndClientApiInterfaces.ExternalContextSuccessResponse>;
    invokeExternalContextAction(externalContextId: string, externalContextActionId: string, options?: ControlAndClientApiInterfaces.ExternalContextActionOptions): Promise<ControlAndClientApiInterfaces.ExternalContextSuccessResponse>;
    removeExternalContextPropertyListener(externalContextId: string, externalContextPropertyId: string, listener: ControlAndClientApiInterfaces.ExternalContextPropertyListener): void;
    addGlobalNotification(type: number, level: number, message: string, title: string, action: ControlAndClientApiInterfaces.ActionDescriptor, onCloseHandler: ControlAndClientApiInterfaces.EventHandler): Promise<string>;
    clearGlobalNotification(id: string): Promise<void>;
    clearGlobalNotifications(): Promise<void>;
    private _getWebApiContext;
    retrieveRecord(entityType: string, id: string, options?: string): Promise<WebApi.Entity>;
    createRecord(entityType: string, data: WebApi.Entity): Promise<ControlAndClientApiInterfaces.LookupValue>;
    updateRecord(entityType: string, id: string, data: WebApi.Entity): Promise<ControlAndClientApiInterfaces.LookupValue>;
    deleteRecord(entityType: string, id: string): Promise<ControlAndClientApiInterfaces.LookupValue>;
    retrieveMultipleRecords(entityType: string, options?: string, maxPageSize?: number): Promise<WebApi.RetrieveMultipleResponse>;
    execute(request: WebApi.ODataContract): Promise<WebApi.Response>;
    executeMultiple(requests: WebApi.ODataContract[]): Promise<WebApi.Response[]>;
}
declare const instance: XrmProxy;
export { XrmProxy, instance as default };
