import * as React from "react";
import { KeyCode } from "../Supplementary/Accessibility/KeyCode";
import IComboBoxOption from "./ComboBox/IComboBoxOption";
import IComboBoxProps from "./ComboBox/IComboBoxProps";
import IComboBoxState from "./ComboBox/IComboBoxState";
import { ComponentBase } from "./ComponentBase";
import { InnerListItem } from "./ListItem";
import { InnerScrollView } from "./ScrollView";
import { ITextStyle, InnerText } from "./Text";
import { InnerView } from "./View";
declare class InnerComboBox<ICBProps extends IComboBoxProps, ICBState extends IComboBoxState> extends ComponentBase<ICBProps, ICBState | IComboBoxState> {
    static supportedKeys: KeyCode[];
    static displayName: string;
    static DEFAULT_PAGE_SIZE: number;
    static COLORS: {
        Grey1: string;
        Grey2: string;
        Grey3: string;
        Grey5: string;
        Grey7: string;
    };
    static SHADOWS: {
        Shadow01: string;
    };
    protected readonly focusableControlId: string;
    private _internalIdAppendix;
    private _containerWidth;
    private _container;
    private _textInput;
    private _text;
    private _wasInnerFocusRequested;
    protected scrollView: InnerScrollView;
    protected selectedListItem: InnerListItem;
    protected clickedOutside: boolean;
    protected keyboardScrolling: boolean;
    protected selectedIndex: number;
    constructor(props?: ICBProps, context?: any);
    protected getInternalId(sourceId?: string, internalIdAppendix?: string): string;
    protected getListId(sourceId?: string, internalIdAppendix?: string): string;
    protected readonly getEmptyListId: string;
    protected getListItemId(option: IComboBoxOption): string;
    protected getFlyoutId(sourceId?: string, internalIdAppendix?: string): string;
    protected getButtonId(sourceId?: string, internalIdAppendix?: string): string;
    protected onFlyoutScroll(): void;
    protected getActiveDescendantId(): string;
    protected getPageSize(): number;
    private _getInitialStateOption;
    protected getOptionByValue(options: Array<IComboBoxOption>, value: string): IComboBoxOption;
    componentWillReceiveProps(nextProps: ICBProps): void;
    private _getIfValueChanged;
    protected getElementProps(): React.HTMLAttributes<Element>;
    protected getElementChildren(): React.ReactNode;
    setIsExpanded(isExpanded: boolean): void;
    private _toggleIsExpanded;
    setFocus(): void;
    private _resetSelectedIndex;
    protected setCurrentItemByValue(value: string, changeValue?: boolean): void;
    private _setCurrentItemByVisibleIndex;
    protected handleKeyDown(event: KeyboardEvent): void;
    getVisibleOptions(state?: IComboBoxState, options?: IComboBoxOption[]): IComboBoxOption[];
    private _searchOptions;
    protected saveContainerRef(ref: InnerView): void;
    protected saveItemRef(item: InnerListItem): void;
    private _saveTextInputRef;
    protected saveTextRef(ref: InnerText): void;
    private _updateContainerWidth;
    protected handleValueChange(valueNew: string): void;
    protected handleItemSelected(item: InnerListItem): void;
    protected handleItemPointerDown(e: React.MouseEvent): void;
    protected handleItemHover(e: React.MouseEvent): void;
    private _handleTextInputChange;
    protected handleTextPointerDown(e: React.MouseEvent): void;
    private _handleButtonClick;
    protected handleArrowUp(amount: number): void;
    protected handleArrowDown(_e: KeyboardEvent, amount: number): void;
    private _handleMove;
    setFocusToItem: (elementId: string) => void;
    protected selectItem(elementId: string): void;
    protected handleBlur(e: React.FormEvent): void;
    protected handleEnterKey(e: KeyboardEvent): void;
    protected handleTabKey(e: KeyboardEvent): void;
    protected handleKeyboardExpandRequest(): void;
    protected handleFlyoutOutsideClick(e: React.MouseEvent): void;
    protected handleInnerControlFocus(): void;
    protected handleInnerControlBlur(): void;
    private _resetSelectedListItem;
    protected handleRelativeToElementSelector(element: HTMLElement): HTMLElement;
    protected renderOptionsList(options?: Array<IComboBoxOption>): JSX.Element;
    protected renderFlyout(isRTL?: boolean): JSX.Element;
    private _renderTextInput;
    protected getTextOnlyStyle(): ITextStyle;
    private _getEmptyList;
    protected getTextOnlyInnerComponent(valueId: string): JSX.Element;
    protected renderTextOnly(controlId: string, testHooks?: any): JSX.Element;
    protected getSelectedOptionText(): string;
    protected getSelectedOptionValue(): string;
    private _renderDropDownButton;
    render(): JSX.Element;
    protected calculateWidth(): number | string;
    protected static getListItemStyle(): {
        flex: string;
        cursor: string;
        padding: string;
        ":hover": {
            backgroundColor: string;
            color: string;
        };
    };
    protected keyboardNavigation: (event: KeyboardEvent) => void;
    protected static getSelectedItemStyle(): {
        backgroundColor: string;
        color: string;
    };
}
declare const ComboBox: any;
export { IComboBoxOption, IComboBoxProps, IComboBoxState, InnerComboBox, ComboBox };
